package com.google.android.exoplayer2.audio;

import com.google.android.exoplayer2.Format;
import com.google.android.exoplayer2.drm.DrmInitData;
import com.google.android.exoplayer2.util.ParsableBitArray;
import com.google.android.exoplayer2.util.ParsableByteArray;
import java.lang.annotation.Annotation;
import java.lang.annotation.Documented;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.nio.ByteBuffer;

public final class Ac3Util
{
  private static final int AC3_SYNCFRAME_AUDIO_SAMPLE_COUNT = 1536;
  private static final int AUDIO_SAMPLES_PER_AUDIO_BLOCK = 256;
  private static final int[] BITRATE_BY_HALF_FRMSIZECOD = { 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, 448, 512, 576, 640 };
  private static final int[] BLOCKS_PER_SYNCFRAME_BY_NUMBLKSCOD = { 1, 2, 3, 6 };
  private static final int[] CHANNEL_COUNT_BY_ACMOD;
  private static final int[] SAMPLE_RATE_BY_FSCOD = { 48000, 44100, 32000 };
  private static final int[] SAMPLE_RATE_BY_FSCOD2 = { 24000, 22050, 16000 };
  private static final int[] SYNCFRAME_SIZE_WORDS_BY_HALF_FRMSIZECOD_44_1 = { 69, 87, 104, 121, 139, 174, 208, 243, 278, 348, 417, 487, 557, 696, 835, 975, 1114, 1253, 1393 };
  public static final int TRUEHD_RECHUNK_SAMPLE_COUNT = 16;
  public static final int TRUEHD_SYNCFRAME_PREFIX_LENGTH = 10;
  
  static
  {
    CHANNEL_COUNT_BY_ACMOD = new int[] { 2, 1, 2, 3, 3, 4, 4, 5 };
  }
  
  private Ac3Util() {}
  
  public static int findTrueHdSyncframeOffset(ByteBuffer paramByteBuffer)
  {
    int j = paramByteBuffer.position();
    int k = paramByteBuffer.limit();
    int i = j;
    while (i <= k - 10)
    {
      if ((paramByteBuffer.getInt(i + 4) & 0xFEFFFFFF) == -1167101192) {
        return i - j;
      }
      i += 1;
    }
    return -1;
  }
  
  public static int getAc3SyncframeAudioSampleCount()
  {
    return 1536;
  }
  
  private static int getAc3SyncframeSize(int paramInt1, int paramInt2)
  {
    int i = paramInt2 / 2;
    if ((paramInt1 >= 0) && (paramInt1 < SAMPLE_RATE_BY_FSCOD.length) && (paramInt2 >= 0) && (i < SYNCFRAME_SIZE_WORDS_BY_HALF_FRMSIZECOD_44_1.length))
    {
      paramInt1 = SAMPLE_RATE_BY_FSCOD[paramInt1];
      if (paramInt1 == 44100) {
        return (SYNCFRAME_SIZE_WORDS_BY_HALF_FRMSIZECOD_44_1[i] + paramInt2 % 2) * 2;
      }
      paramInt2 = BITRATE_BY_HALF_FRMSIZECOD[i];
      if (paramInt1 == 32000) {
        return paramInt2 * 6;
      }
      return paramInt2 * 4;
    }
    return -1;
  }
  
  public static Format parseAc3AnnexFFormat(ParsableByteArray paramParsableByteArray, String paramString1, String paramString2, DrmInitData paramDrmInitData)
  {
    int i = paramParsableByteArray.readUnsignedByte();
    int k = SAMPLE_RATE_BY_FSCOD[((i & 0xC0) >> 6)];
    int m = paramParsableByteArray.readUnsignedByte();
    int j = CHANNEL_COUNT_BY_ACMOD[((m & 0x38) >> 3)];
    i = j;
    if ((m & 0x4) != 0) {
      i = j + 1;
    }
    return Format.createAudioSampleFormat(paramString1, "audio/ac3", null, -1, -1, i, k, null, paramDrmInitData, 0, paramString2);
  }
  
  public static SyncFrameInfo parseAc3SyncframeInfo(ParsableBitArray paramParsableBitArray)
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: can not merge I and Z\n\tat com.googlecode.dex2jar.ir.TypeClass.merge(TypeClass.java:100)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeRef.updateTypeClass(TypeTransformer.java:174)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.copyTypes(TypeTransformer.java:311)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.fixTypes(TypeTransformer.java:226)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.analyze(TypeTransformer.java:207)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer.transform(TypeTransformer.java:44)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:162)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\n");
  }
  
  public static int parseAc3SyncframeSize(byte[] paramArrayOfByte)
  {
    if (paramArrayOfByte.length < 6) {
      return -1;
    }
    int i;
    if ((paramArrayOfByte[5] & 0xFF) >> 3 == 16) {
      i = 1;
    } else {
      i = 0;
    }
    if (i != 0)
    {
      i = paramArrayOfByte[2];
      return ((paramArrayOfByte[3] & 0xFF | (i & 0x7) << 8) + 1) * 2;
    }
    return getAc3SyncframeSize((paramArrayOfByte[4] & 0xC0) >> 6, paramArrayOfByte[4] & 0x3F);
  }
  
  public static Format parseEAc3AnnexFFormat(ParsableByteArray paramParsableByteArray, String paramString1, String paramString2, DrmInitData paramDrmInitData)
  {
    paramParsableByteArray.skipBytes(2);
    int i = paramParsableByteArray.readUnsignedByte();
    int k = SAMPLE_RATE_BY_FSCOD[((i & 0xC0) >> 6)];
    int m = paramParsableByteArray.readUnsignedByte();
    int j = CHANNEL_COUNT_BY_ACMOD[((m & 0xE) >> 1)];
    i = j;
    if ((m & 0x1) != 0) {
      i = j + 1;
    }
    j = i;
    if ((paramParsableByteArray.readUnsignedByte() & 0x1E) >> 1 > 0)
    {
      j = i;
      if ((0x2 & paramParsableByteArray.readUnsignedByte()) != 0) {
        j = i + 2;
      }
    }
    String str2 = "audio/eac3";
    String str1 = str2;
    if (paramParsableByteArray.bytesLeft() > 0)
    {
      str1 = str2;
      if ((paramParsableByteArray.readUnsignedByte() & 0x1) != 0) {
        str1 = "audio/eac3-joc";
      }
    }
    return Format.createAudioSampleFormat(paramString1, str1, null, -1, -1, j, k, null, paramDrmInitData, 0, paramString2);
  }
  
  public static int parseEAc3SyncframeAudioSampleCount(ByteBuffer paramByteBuffer)
  {
    int j = paramByteBuffer.get(paramByteBuffer.position() + 4);
    int i = 6;
    if ((j & 0xC0) >> 6 != 3) {
      i = BLOCKS_PER_SYNCFRAME_BY_NUMBLKSCOD[((paramByteBuffer.get(paramByteBuffer.position() + 4) & 0x30) >> 4)];
    }
    return i * 256;
  }
  
  public static int parseTrueHdSyncframeAudioSampleCount(ByteBuffer paramByteBuffer, int paramInt)
  {
    int i;
    if ((paramByteBuffer.get(paramByteBuffer.position() + paramInt + 7) & 0xFF) == 187) {
      i = 1;
    } else {
      i = 0;
    }
    int j = paramByteBuffer.position();
    if (i != 0) {
      i = 9;
    } else {
      i = 8;
    }
    return 40 << (paramByteBuffer.get(j + paramInt + i) >> 4 & 0x7);
  }
  
  public static int parseTrueHdSyncframeAudioSampleCount(byte[] paramArrayOfByte)
  {
    int j = paramArrayOfByte[4];
    int i = 0;
    if ((j == -8) && (paramArrayOfByte[5] == 114) && (paramArrayOfByte[6] == 111))
    {
      if ((paramArrayOfByte[7] & 0xFE) != 186) {
        return 0;
      }
      if ((paramArrayOfByte[7] & 0xFF) == 187) {
        i = 1;
      }
      if (i != 0) {
        i = 9;
      } else {
        i = 8;
      }
      return 40 << (paramArrayOfByte[i] >> 4 & 0x7);
    }
    return 0;
  }
  
  public static final class SyncFrameInfo
  {
    public static final int STREAM_TYPE_TYPE0 = 0;
    public static final int STREAM_TYPE_TYPE1 = 1;
    public static final int STREAM_TYPE_TYPE2 = 2;
    public static final int STREAM_TYPE_UNDEFINED = -1;
    public final int channelCount;
    public final int frameSize;
    public final String mimeType;
    public final int sampleCount;
    public final int sampleRate;
    public final int streamType;
    
    private SyncFrameInfo(String paramString, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5)
    {
      mimeType = paramString;
      streamType = paramInt1;
      channelCount = paramInt2;
      sampleRate = paramInt3;
      frameSize = paramInt4;
      sampleCount = paramInt5;
    }
    
    @Documented
    @Retention(RetentionPolicy.SOURCE)
    public static @interface StreamType {}
  }
}
