package com.google.android.exoplayer2.upstream.cache;

import android.net.Uri;
import androidx.annotation.Nullable;
import com.google.android.exoplayer2.upstream.DataSink;
import com.google.android.exoplayer2.upstream.DataSource;
import com.google.android.exoplayer2.upstream.DataSourceException;
import com.google.android.exoplayer2.upstream.DataSpec;
import com.google.android.exoplayer2.upstream.FileDataSource;
import com.google.android.exoplayer2.upstream.TeeDataSource;
import com.google.android.exoplayer2.upstream.TransferListener;
import com.google.android.exoplayer2.util.Assertions;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.lang.annotation.Annotation;
import java.lang.annotation.Documented;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class CacheDataSource
  implements DataSource
{
  public static final int CACHE_IGNORED_REASON_ERROR = 0;
  public static final int CACHE_IGNORED_REASON_UNSET_LENGTH = 1;
  private static final int CACHE_NOT_IGNORED = -1;
  public static final long DEFAULT_MAX_CACHE_FILE_SIZE = 2097152L;
  public static final int FLAG_BLOCK_ON_CACHE = 1;
  public static final int FLAG_IGNORE_CACHE_FOR_UNSET_LENGTH_REQUESTS = 4;
  public static final int FLAG_IGNORE_CACHE_ON_ERROR = 2;
  private static final long MIN_READ_BEFORE_CHECKING_CACHE = 102400L;
  @Nullable
  private Uri actualUri;
  private final boolean blockOnCache;
  private long bytesRemaining;
  private final Cache cache;
  private final CacheKeyFactory cacheKeyFactory;
  private final DataSource cacheReadDataSource;
  @Nullable
  private final DataSource cacheWriteDataSource;
  private long checkCachePosition;
  @Nullable
  private DataSource currentDataSource;
  private boolean currentDataSpecLengthUnset;
  @Nullable
  private CacheSpan currentHoleSpan;
  private boolean currentRequestIgnoresCache;
  @Nullable
  private final EventListener eventListener;
  private int flags;
  private int httpMethod;
  private final boolean ignoreCacheForUnsetLengthRequests;
  private final boolean ignoreCacheOnError;
  @Nullable
  private String key;
  private long readPosition;
  private boolean seenCacheError;
  private long totalCachedBytesRead;
  private final DataSource upstreamDataSource;
  @Nullable
  private Uri uri;
  
  public CacheDataSource(Cache paramCache, DataSource paramDataSource)
  {
    this(paramCache, paramDataSource, 0, 2097152L);
  }
  
  public CacheDataSource(Cache paramCache, DataSource paramDataSource, int paramInt)
  {
    this(paramCache, paramDataSource, paramInt, 2097152L);
  }
  
  public CacheDataSource(Cache paramCache, DataSource paramDataSource, int paramInt, long paramLong)
  {
    this(paramCache, paramDataSource, new FileDataSource(), new CacheDataSink(paramCache, paramLong), paramInt, null);
  }
  
  public CacheDataSource(Cache paramCache, DataSource paramDataSource1, DataSource paramDataSource2, DataSink paramDataSink, int paramInt, @Nullable EventListener paramEventListener)
  {
    this(paramCache, paramDataSource1, paramDataSource2, paramDataSink, paramInt, paramEventListener, null);
  }
  
  public CacheDataSource(Cache paramCache, DataSource paramDataSource1, DataSource paramDataSource2, DataSink paramDataSink, int paramInt, @Nullable EventListener paramEventListener, @Nullable CacheKeyFactory paramCacheKeyFactory)
  {
    cache = paramCache;
    cacheReadDataSource = paramDataSource2;
    if (paramCacheKeyFactory == null) {
      paramCacheKeyFactory = CacheUtil.DEFAULT_CACHE_KEY_FACTORY;
    }
    cacheKeyFactory = paramCacheKeyFactory;
    boolean bool2 = false;
    if ((paramInt & 0x1) != 0) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    blockOnCache = bool1;
    if ((paramInt & 0x2) != 0) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    ignoreCacheOnError = bool1;
    boolean bool1 = bool2;
    if ((paramInt & 0x4) != 0) {
      bool1 = true;
    }
    ignoreCacheForUnsetLengthRequests = bool1;
    upstreamDataSource = paramDataSource1;
    if (paramDataSink != null) {
      cacheWriteDataSource = new TeeDataSource(paramDataSource1, paramDataSink);
    } else {
      cacheWriteDataSource = null;
    }
    eventListener = paramEventListener;
  }
  
  private void closeCurrentSource()
    throws IOException
  {
    if (currentDataSource == null) {
      return;
    }
    try
    {
      currentDataSource.close();
      return;
    }
    finally
    {
      currentDataSource = null;
      currentDataSpecLengthUnset = false;
      if (currentHoleSpan != null)
      {
        cache.releaseHoleSpan(currentHoleSpan);
        currentHoleSpan = null;
      }
    }
  }
  
  private static Uri getRedirectedUriOrDefault(Cache paramCache, String paramString, Uri paramUri)
  {
    paramString = ContentMetadataInternal.getRedirectedUri(paramCache.getContentMetadata(paramString));
    paramCache = paramString;
    if (paramString == null) {
      paramCache = paramUri;
    }
    return paramCache;
  }
  
  private void handleBeforeThrow(IOException paramIOException)
  {
    if ((isReadingFromCache()) || ((paramIOException instanceof Cache.CacheException))) {
      seenCacheError = true;
    }
  }
  
  private boolean isBypassingCache()
  {
    return currentDataSource == upstreamDataSource;
  }
  
  private static boolean isCausedByPositionOutOfRange(IOException paramIOException)
  {
    while (paramIOException != null)
    {
      if (((paramIOException instanceof DataSourceException)) && (reason == 0)) {
        return true;
      }
      paramIOException = paramIOException.getCause();
    }
    return false;
  }
  
  private boolean isReadingFromCache()
  {
    return currentDataSource == cacheReadDataSource;
  }
  
  private boolean isReadingFromUpstream()
  {
    return isReadingFromCache() ^ true;
  }
  
  private boolean isWritingToCache()
  {
    return currentDataSource == cacheWriteDataSource;
  }
  
  private void notifyBytesRead()
  {
    if ((eventListener != null) && (totalCachedBytesRead > 0L))
    {
      eventListener.onCachedBytesRead(cache.getCacheSpace(), totalCachedBytesRead);
      totalCachedBytesRead = 0L;
    }
  }
  
  private void notifyCacheIgnored(int paramInt)
  {
    if (eventListener != null) {
      eventListener.onCacheIgnored(paramInt);
    }
  }
  
  private void openNextSource(boolean paramBoolean)
    throws IOException
  {
    // Byte code:
    //   0: aload_0
    //   1: getfield 198	com/google/android/exoplayer2/upstream/cache/CacheDataSource:currentRequestIgnoresCache	Z
    //   4: ifeq +9 -> 13
    //   7: aconst_null
    //   8: astore 8
    //   10: goto +65 -> 75
    //   13: aload_0
    //   14: getfield 104	com/google/android/exoplayer2/upstream/cache/CacheDataSource:blockOnCache	Z
    //   17: ifeq +39 -> 56
    //   20: aload_0
    //   21: getfield 93	com/google/android/exoplayer2/upstream/cache/CacheDataSource:cache	Lcom/google/android/exoplayer2/upstream/cache/Cache;
    //   24: aload_0
    //   25: getfield 200	com/google/android/exoplayer2/upstream/cache/CacheDataSource:key	Ljava/lang/String;
    //   28: aload_0
    //   29: getfield 202	com/google/android/exoplayer2/upstream/cache/CacheDataSource:readPosition	J
    //   32: invokeinterface 206 4 0
    //   37: astore 8
    //   39: goto +36 -> 75
    //   42: invokestatic 212	java/lang/Thread:currentThread	()Ljava/lang/Thread;
    //   45: invokevirtual 215	java/lang/Thread:interrupt	()V
    //   48: new 217	java/io/InterruptedIOException
    //   51: dup
    //   52: invokespecial 218	java/io/InterruptedIOException:<init>	()V
    //   55: athrow
    //   56: aload_0
    //   57: getfield 93	com/google/android/exoplayer2/upstream/cache/CacheDataSource:cache	Lcom/google/android/exoplayer2/upstream/cache/Cache;
    //   60: aload_0
    //   61: getfield 200	com/google/android/exoplayer2/upstream/cache/CacheDataSource:key	Ljava/lang/String;
    //   64: aload_0
    //   65: getfield 202	com/google/android/exoplayer2/upstream/cache/CacheDataSource:readPosition	J
    //   68: invokeinterface 221 4 0
    //   73: astore 8
    //   75: aload 8
    //   77: ifnonnull +58 -> 135
    //   80: aload_0
    //   81: getfield 110	com/google/android/exoplayer2/upstream/cache/CacheDataSource:upstreamDataSource	Lcom/google/android/exoplayer2/upstream/DataSource;
    //   84: astore 9
    //   86: new 223	com/google/android/exoplayer2/upstream/DataSpec
    //   89: dup
    //   90: aload_0
    //   91: getfield 225	com/google/android/exoplayer2/upstream/cache/CacheDataSource:uri	Landroid/net/Uri;
    //   94: aload_0
    //   95: getfield 227	com/google/android/exoplayer2/upstream/cache/CacheDataSource:httpMethod	I
    //   98: aconst_null
    //   99: aload_0
    //   100: getfield 202	com/google/android/exoplayer2/upstream/cache/CacheDataSource:readPosition	J
    //   103: aload_0
    //   104: getfield 202	com/google/android/exoplayer2/upstream/cache/CacheDataSource:readPosition	J
    //   107: aload_0
    //   108: getfield 229	com/google/android/exoplayer2/upstream/cache/CacheDataSource:bytesRemaining	J
    //   111: aload_0
    //   112: getfield 200	com/google/android/exoplayer2/upstream/cache/CacheDataSource:key	Ljava/lang/String;
    //   115: aload_0
    //   116: getfield 231	com/google/android/exoplayer2/upstream/cache/CacheDataSource:flags	I
    //   119: invokespecial 234	com/google/android/exoplayer2/upstream/DataSpec:<init>	(Landroid/net/Uri;I[BJJJLjava/lang/String;I)V
    //   122: astore 11
    //   124: aload 8
    //   126: astore 10
    //   128: aload 11
    //   130: astore 8
    //   132: goto +255 -> 387
    //   135: aload 8
    //   137: getfield 239	com/google/android/exoplayer2/upstream/cache/CacheSpan:isCached	Z
    //   140: ifeq +102 -> 242
    //   143: aload 8
    //   145: getfield 243	com/google/android/exoplayer2/upstream/cache/CacheSpan:file	Ljava/io/File;
    //   148: invokestatic 249	android/net/Uri:fromFile	(Ljava/io/File;)Landroid/net/Uri;
    //   151: astore 9
    //   153: aload_0
    //   154: getfield 202	com/google/android/exoplayer2/upstream/cache/CacheDataSource:readPosition	J
    //   157: aload 8
    //   159: getfield 252	com/google/android/exoplayer2/upstream/cache/CacheSpan:position	J
    //   162: lsub
    //   163: lstore 6
    //   165: aload 8
    //   167: getfield 255	com/google/android/exoplayer2/upstream/cache/CacheSpan:length	J
    //   170: lload 6
    //   172: lsub
    //   173: lstore 4
    //   175: lload 4
    //   177: lstore_2
    //   178: aload_0
    //   179: getfield 229	com/google/android/exoplayer2/upstream/cache/CacheDataSource:bytesRemaining	J
    //   182: ldc2_w 256
    //   185: lcmp
    //   186: ifeq +13 -> 199
    //   189: lload 4
    //   191: aload_0
    //   192: getfield 229	com/google/android/exoplayer2/upstream/cache/CacheDataSource:bytesRemaining	J
    //   195: invokestatic 263	java/lang/Math:min	(JJ)J
    //   198: lstore_2
    //   199: new 223	com/google/android/exoplayer2/upstream/DataSpec
    //   202: dup
    //   203: aload 9
    //   205: aload_0
    //   206: getfield 202	com/google/android/exoplayer2/upstream/cache/CacheDataSource:readPosition	J
    //   209: lload 6
    //   211: lload_2
    //   212: aload_0
    //   213: getfield 200	com/google/android/exoplayer2/upstream/cache/CacheDataSource:key	Ljava/lang/String;
    //   216: aload_0
    //   217: getfield 231	com/google/android/exoplayer2/upstream/cache/CacheDataSource:flags	I
    //   220: invokespecial 266	com/google/android/exoplayer2/upstream/DataSpec:<init>	(Landroid/net/Uri;JJJLjava/lang/String;I)V
    //   223: astore 11
    //   225: aload_0
    //   226: getfield 95	com/google/android/exoplayer2/upstream/cache/CacheDataSource:cacheReadDataSource	Lcom/google/android/exoplayer2/upstream/DataSource;
    //   229: astore 9
    //   231: aload 8
    //   233: astore 10
    //   235: aload 11
    //   237: astore 8
    //   239: goto +148 -> 387
    //   242: aload 8
    //   244: invokevirtual 269	com/google/android/exoplayer2/upstream/cache/CacheSpan:isOpenEnded	()Z
    //   247: ifeq +11 -> 258
    //   250: aload_0
    //   251: getfield 229	com/google/android/exoplayer2/upstream/cache/CacheDataSource:bytesRemaining	J
    //   254: lstore_2
    //   255: goto +37 -> 292
    //   258: aload 8
    //   260: getfield 255	com/google/android/exoplayer2/upstream/cache/CacheSpan:length	J
    //   263: lstore 4
    //   265: lload 4
    //   267: lstore_2
    //   268: aload_0
    //   269: getfield 229	com/google/android/exoplayer2/upstream/cache/CacheDataSource:bytesRemaining	J
    //   272: ldc2_w 256
    //   275: lcmp
    //   276: ifeq -21 -> 255
    //   279: lload 4
    //   281: aload_0
    //   282: getfield 229	com/google/android/exoplayer2/upstream/cache/CacheDataSource:bytesRemaining	J
    //   285: invokestatic 263	java/lang/Math:min	(JJ)J
    //   288: lstore_2
    //   289: goto -34 -> 255
    //   292: new 223	com/google/android/exoplayer2/upstream/DataSpec
    //   295: dup
    //   296: aload_0
    //   297: getfield 225	com/google/android/exoplayer2/upstream/cache/CacheDataSource:uri	Landroid/net/Uri;
    //   300: aload_0
    //   301: getfield 227	com/google/android/exoplayer2/upstream/cache/CacheDataSource:httpMethod	I
    //   304: aconst_null
    //   305: aload_0
    //   306: getfield 202	com/google/android/exoplayer2/upstream/cache/CacheDataSource:readPosition	J
    //   309: aload_0
    //   310: getfield 202	com/google/android/exoplayer2/upstream/cache/CacheDataSource:readPosition	J
    //   313: lload_2
    //   314: aload_0
    //   315: getfield 200	com/google/android/exoplayer2/upstream/cache/CacheDataSource:key	Ljava/lang/String;
    //   318: aload_0
    //   319: getfield 231	com/google/android/exoplayer2/upstream/cache/CacheDataSource:flags	I
    //   322: invokespecial 234	com/google/android/exoplayer2/upstream/DataSpec:<init>	(Landroid/net/Uri;I[BJJJLjava/lang/String;I)V
    //   325: astore 9
    //   327: aload_0
    //   328: getfield 117	com/google/android/exoplayer2/upstream/cache/CacheDataSource:cacheWriteDataSource	Lcom/google/android/exoplayer2/upstream/DataSource;
    //   331: ifnull +24 -> 355
    //   334: aload_0
    //   335: getfield 117	com/google/android/exoplayer2/upstream/cache/CacheDataSource:cacheWriteDataSource	Lcom/google/android/exoplayer2/upstream/DataSource;
    //   338: astore 11
    //   340: aload 8
    //   342: astore 10
    //   344: aload 9
    //   346: astore 8
    //   348: aload 11
    //   350: astore 9
    //   352: goto +35 -> 387
    //   355: aload_0
    //   356: getfield 110	com/google/android/exoplayer2/upstream/cache/CacheDataSource:upstreamDataSource	Lcom/google/android/exoplayer2/upstream/DataSource;
    //   359: astore 10
    //   361: aload_0
    //   362: getfield 93	com/google/android/exoplayer2/upstream/cache/CacheDataSource:cache	Lcom/google/android/exoplayer2/upstream/cache/Cache;
    //   365: aload 8
    //   367: invokeinterface 137 2 0
    //   372: aload 9
    //   374: astore 8
    //   376: aconst_null
    //   377: astore 11
    //   379: aload 10
    //   381: astore 9
    //   383: aload 11
    //   385: astore 10
    //   387: aload_0
    //   388: getfield 198	com/google/android/exoplayer2/upstream/cache/CacheDataSource:currentRequestIgnoresCache	Z
    //   391: ifne +24 -> 415
    //   394: aload 9
    //   396: aload_0
    //   397: getfield 110	com/google/android/exoplayer2/upstream/cache/CacheDataSource:upstreamDataSource	Lcom/google/android/exoplayer2/upstream/DataSource;
    //   400: if_acmpne +15 -> 415
    //   403: aload_0
    //   404: getfield 202	com/google/android/exoplayer2/upstream/cache/CacheDataSource:readPosition	J
    //   407: ldc2_w 33
    //   410: ladd
    //   411: lstore_2
    //   412: goto +7 -> 419
    //   415: ldc2_w 270
    //   418: lstore_2
    //   419: aload_0
    //   420: lload_2
    //   421: putfield 273	com/google/android/exoplayer2/upstream/cache/CacheDataSource:checkCachePosition	J
    //   424: iload_1
    //   425: ifeq +51 -> 476
    //   428: aload_0
    //   429: invokespecial 275	com/google/android/exoplayer2/upstream/cache/CacheDataSource:isBypassingCache	()Z
    //   432: invokestatic 280	com/google/android/exoplayer2/util/Assertions:checkState	(Z)V
    //   435: aload 9
    //   437: aload_0
    //   438: getfield 110	com/google/android/exoplayer2/upstream/cache/CacheDataSource:upstreamDataSource	Lcom/google/android/exoplayer2/upstream/DataSource;
    //   441: if_acmpne +4 -> 445
    //   444: return
    //   445: aload_0
    //   446: invokespecial 282	com/google/android/exoplayer2/upstream/cache/CacheDataSource:closeCurrentSource	()V
    //   449: goto +27 -> 476
    //   452: astore 8
    //   454: aload 10
    //   456: invokevirtual 285	com/google/android/exoplayer2/upstream/cache/CacheSpan:isHoleSpan	()Z
    //   459: ifeq +14 -> 473
    //   462: aload_0
    //   463: getfield 93	com/google/android/exoplayer2/upstream/cache/CacheDataSource:cache	Lcom/google/android/exoplayer2/upstream/cache/Cache;
    //   466: aload 10
    //   468: invokeinterface 137 2 0
    //   473: aload 8
    //   475: athrow
    //   476: aload 10
    //   478: ifnull +17 -> 495
    //   481: aload 10
    //   483: invokevirtual 285	com/google/android/exoplayer2/upstream/cache/CacheSpan:isHoleSpan	()Z
    //   486: ifeq +9 -> 495
    //   489: aload_0
    //   490: aload 10
    //   492: putfield 131	com/google/android/exoplayer2/upstream/cache/CacheDataSource:currentHoleSpan	Lcom/google/android/exoplayer2/upstream/cache/CacheSpan;
    //   495: aload_0
    //   496: aload 9
    //   498: putfield 124	com/google/android/exoplayer2/upstream/cache/CacheDataSource:currentDataSource	Lcom/google/android/exoplayer2/upstream/DataSource;
    //   501: aload 8
    //   503: getfield 286	com/google/android/exoplayer2/upstream/DataSpec:length	J
    //   506: ldc2_w 256
    //   509: lcmp
    //   510: ifne +8 -> 518
    //   513: iconst_1
    //   514: istore_1
    //   515: goto +5 -> 520
    //   518: iconst_0
    //   519: istore_1
    //   520: aload_0
    //   521: iload_1
    //   522: putfield 129	com/google/android/exoplayer2/upstream/cache/CacheDataSource:currentDataSpecLengthUnset	Z
    //   525: aload 9
    //   527: aload 8
    //   529: invokeinterface 290 2 0
    //   534: lstore_2
    //   535: new 292	com/google/android/exoplayer2/upstream/cache/ContentMetadataMutations
    //   538: dup
    //   539: invokespecial 293	com/google/android/exoplayer2/upstream/cache/ContentMetadataMutations:<init>	()V
    //   542: astore 8
    //   544: aload_0
    //   545: getfield 129	com/google/android/exoplayer2/upstream/cache/CacheDataSource:currentDataSpecLengthUnset	Z
    //   548: ifeq +30 -> 578
    //   551: lload_2
    //   552: ldc2_w 256
    //   555: lcmp
    //   556: ifeq +22 -> 578
    //   559: aload_0
    //   560: lload_2
    //   561: putfield 229	com/google/android/exoplayer2/upstream/cache/CacheDataSource:bytesRemaining	J
    //   564: aload 8
    //   566: aload_0
    //   567: getfield 202	com/google/android/exoplayer2/upstream/cache/CacheDataSource:readPosition	J
    //   570: aload_0
    //   571: getfield 229	com/google/android/exoplayer2/upstream/cache/CacheDataSource:bytesRemaining	J
    //   574: ladd
    //   575: invokestatic 297	com/google/android/exoplayer2/upstream/cache/ContentMetadataInternal:setContentLength	(Lcom/google/android/exoplayer2/upstream/cache/ContentMetadataMutations;J)V
    //   578: aload_0
    //   579: invokespecial 299	com/google/android/exoplayer2/upstream/cache/CacheDataSource:isReadingFromUpstream	()Z
    //   582: ifeq +49 -> 631
    //   585: aload_0
    //   586: aload_0
    //   587: getfield 124	com/google/android/exoplayer2/upstream/cache/CacheDataSource:currentDataSource	Lcom/google/android/exoplayer2/upstream/DataSource;
    //   590: invokeinterface 303 1 0
    //   595: putfield 305	com/google/android/exoplayer2/upstream/cache/CacheDataSource:actualUri	Landroid/net/Uri;
    //   598: aload_0
    //   599: getfield 225	com/google/android/exoplayer2/upstream/cache/CacheDataSource:uri	Landroid/net/Uri;
    //   602: aload_0
    //   603: getfield 305	com/google/android/exoplayer2/upstream/cache/CacheDataSource:actualUri	Landroid/net/Uri;
    //   606: invokevirtual 309	android/net/Uri:equals	(Ljava/lang/Object;)Z
    //   609: iconst_1
    //   610: ixor
    //   611: ifeq +15 -> 626
    //   614: aload 8
    //   616: aload_0
    //   617: getfield 305	com/google/android/exoplayer2/upstream/cache/CacheDataSource:actualUri	Landroid/net/Uri;
    //   620: invokestatic 313	com/google/android/exoplayer2/upstream/cache/ContentMetadataInternal:setRedirectedUri	(Lcom/google/android/exoplayer2/upstream/cache/ContentMetadataMutations;Landroid/net/Uri;)V
    //   623: goto +8 -> 631
    //   626: aload 8
    //   628: invokestatic 317	com/google/android/exoplayer2/upstream/cache/ContentMetadataInternal:removeRedirectedUri	(Lcom/google/android/exoplayer2/upstream/cache/ContentMetadataMutations;)V
    //   631: aload_0
    //   632: invokespecial 319	com/google/android/exoplayer2/upstream/cache/CacheDataSource:isWritingToCache	()Z
    //   635: ifeq +18 -> 653
    //   638: aload_0
    //   639: getfield 93	com/google/android/exoplayer2/upstream/cache/CacheDataSource:cache	Lcom/google/android/exoplayer2/upstream/cache/Cache;
    //   642: aload_0
    //   643: getfield 200	com/google/android/exoplayer2/upstream/cache/CacheDataSource:key	Ljava/lang/String;
    //   646: aload 8
    //   648: invokeinterface 323 3 0
    //   653: return
    //   654: astore 8
    //   656: goto -614 -> 42
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	659	0	this	CacheDataSource
    //   0	659	1	paramBoolean	boolean
    //   177	384	2	l1	long
    //   173	107	4	l2	long
    //   163	47	6	l3	long
    //   8	367	8	localObject1	Object
    //   452	76	8	localThrowable	Throwable
    //   542	105	8	localContentMetadataMutations	ContentMetadataMutations
    //   654	1	8	localInterruptedException	InterruptedException
    //   84	442	9	localObject2	Object
    //   126	365	10	localObject3	Object
    //   122	262	11	localObject4	Object
    // Exception table:
    //   from	to	target	type
    //   445	449	452	java/lang/Throwable
    //   20	39	654	java/lang/InterruptedException
  }
  
  private void setNoBytesRemainingAndMaybeStoreLength()
    throws IOException
  {
    bytesRemaining = 0L;
    if (isWritingToCache()) {
      cache.setContentLength(key, readPosition);
    }
  }
  
  private int shouldIgnoreCacheForRequest(DataSpec paramDataSpec)
  {
    if ((ignoreCacheOnError) && (seenCacheError)) {
      return 0;
    }
    if ((ignoreCacheForUnsetLengthRequests) && (length == -1L)) {
      return 1;
    }
    return -1;
  }
  
  public void addTransferListener(TransferListener paramTransferListener)
  {
    cacheReadDataSource.addTransferListener(paramTransferListener);
    upstreamDataSource.addTransferListener(paramTransferListener);
  }
  
  public void close()
    throws IOException
  {
    uri = null;
    actualUri = null;
    httpMethod = 1;
    notifyBytesRead();
    try
    {
      closeCurrentSource();
      return;
    }
    catch (IOException localIOException)
    {
      handleBeforeThrow(localIOException);
      throw localIOException;
    }
  }
  
  public Map<String, List<String>> getResponseHeaders()
  {
    if (isReadingFromUpstream()) {
      return upstreamDataSource.getResponseHeaders();
    }
    return Collections.emptyMap();
  }
  
  @Nullable
  public Uri getUri()
  {
    return actualUri;
  }
  
  public long open(DataSpec paramDataSpec)
    throws IOException
  {
    for (;;)
    {
      try
      {
        key = cacheKeyFactory.buildCacheKey(paramDataSpec);
        uri = uri;
        actualUri = getRedirectedUriOrDefault(cache, key, uri);
        httpMethod = httpMethod;
        flags = flags;
        readPosition = position;
        int i = shouldIgnoreCacheForRequest(paramDataSpec);
        if (i != -1)
        {
          bool = true;
          currentRequestIgnoresCache = bool;
          if (currentRequestIgnoresCache) {
            notifyCacheIgnored(i);
          }
          if ((length == -1L) && (!currentRequestIgnoresCache))
          {
            bytesRemaining = cache.getContentLength(key);
            if (bytesRemaining != -1L)
            {
              bytesRemaining -= position;
              if (bytesRemaining <= 0L) {
                throw new DataSourceException(0);
              }
            }
          }
          else
          {
            bytesRemaining = length;
          }
          openNextSource(false);
          long l = bytesRemaining;
          return l;
        }
      }
      catch (IOException paramDataSpec)
      {
        handleBeforeThrow(paramDataSpec);
        throw paramDataSpec;
      }
      boolean bool = false;
    }
  }
  
  public int read(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
    throws IOException
  {
    if (paramInt2 == 0) {
      return 0;
    }
    if (bytesRemaining == 0L) {
      return -1;
    }
    int i;
    try
    {
      if (readPosition >= checkCachePosition) {
        openNextSource(true);
      }
      i = currentDataSource.read(paramArrayOfByte, paramInt1, paramInt2);
      if (i != -1)
      {
        if (isReadingFromCache()) {
          totalCachedBytesRead += i;
        }
        long l1 = readPosition;
        long l2 = i;
        readPosition = (l1 + l2);
        if (bytesRemaining != -1L)
        {
          bytesRemaining -= l2;
          return i;
        }
      }
      else
      {
        if (currentDataSpecLengthUnset)
        {
          setNoBytesRemainingAndMaybeStoreLength();
          return i;
        }
        if (bytesRemaining <= 0L) {
          if (bytesRemaining != -1L) {
            break label202;
          }
        }
        closeCurrentSource();
        openNextSource(false);
        paramInt1 = read(paramArrayOfByte, paramInt1, paramInt2);
        return paramInt1;
      }
    }
    catch (IOException paramArrayOfByte)
    {
      if ((currentDataSpecLengthUnset) && (isCausedByPositionOutOfRange(paramArrayOfByte)))
      {
        setNoBytesRemainingAndMaybeStoreLength();
        return -1;
      }
      handleBeforeThrow(paramArrayOfByte);
      throw paramArrayOfByte;
    }
    label202:
    return i;
  }
  
  @Documented
  @Retention(RetentionPolicy.SOURCE)
  public static @interface CacheIgnoredReason {}
  
  public static abstract interface EventListener
  {
    public abstract void onCacheIgnored(int paramInt);
    
    public abstract void onCachedBytesRead(long paramLong1, long paramLong2);
  }
  
  @Documented
  @Retention(RetentionPolicy.SOURCE)
  public static @interface Flags {}
}
