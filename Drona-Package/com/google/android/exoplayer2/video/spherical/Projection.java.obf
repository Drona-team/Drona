package com.google.android.exoplayer2.video.spherical;

import com.google.android.exoplayer2.util.Assertions;
import java.lang.annotation.Annotation;
import java.lang.annotation.Documented;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;

public final class Projection
{
  public static final int DRAW_MODE_TRIANGLES = 0;
  public static final int DRAW_MODE_TRIANGLES_FAN = 2;
  public static final int DRAW_MODE_TRIANGLES_STRIP = 1;
  public static final int POSITION_COORDS_PER_VERTEX = 3;
  public static final int TEXTURE_COORDS_PER_VERTEX = 2;
  public final Mesh leftMesh;
  public final Mesh rightMesh;
  public final boolean singleMesh;
  public final int stereoMode;
  
  public Projection(Mesh paramMesh, int paramInt)
  {
    this(paramMesh, paramMesh, paramInt);
  }
  
  public Projection(Mesh paramMesh1, Mesh paramMesh2, int paramInt)
  {
    leftMesh = paramMesh1;
    rightMesh = paramMesh2;
    stereoMode = paramInt;
    boolean bool;
    if (paramMesh1 == paramMesh2) {
      bool = true;
    } else {
      bool = false;
    }
    singleMesh = bool;
  }
  
  public static Projection createEquirectangular(float paramFloat1, int paramInt1, int paramInt2, float paramFloat2, float paramFloat3, int paramInt3)
  {
    int i = paramInt1;
    int i2 = paramInt2;
    boolean bool;
    if (paramFloat1 > 0.0F) {
      bool = true;
    } else {
      bool = false;
    }
    Assertions.checkArgument(bool);
    if (i >= 1) {
      bool = true;
    } else {
      bool = false;
    }
    Assertions.checkArgument(bool);
    if (i2 >= 1) {
      bool = true;
    } else {
      bool = false;
    }
    Assertions.checkArgument(bool);
    if ((paramFloat2 > 0.0F) && (paramFloat2 <= 180.0F)) {
      bool = true;
    } else {
      bool = false;
    }
    Assertions.checkArgument(bool);
    if ((paramFloat3 > 0.0F) && (paramFloat3 <= 360.0F)) {
      bool = true;
    } else {
      bool = false;
    }
    Assertions.checkArgument(bool);
    float f1 = (float)Math.toRadians(paramFloat2);
    float f3 = (float)Math.toRadians(paramFloat3);
    float f4 = f1 / i;
    paramFloat2 = f3 / i2;
    int i1 = i2 + 1;
    i = (i1 * 2 + 2) * i;
    float[] arrayOfFloat1 = new float[i * 3];
    float[] arrayOfFloat2 = new float[i * 2];
    int k = 0;
    i = 0;
    int j = 0;
    paramFloat3 = f1;
    while (k < paramInt1)
    {
      f1 = k;
      float f5 = paramFloat3 / 2.0F;
      f1 = f1 * f4 - f5;
      int m = k + 1;
      float f6 = m;
      int n = 0;
      int i4 = k;
      float f2 = paramFloat2;
      paramFloat2 = f1;
      f1 = paramFloat3;
      k = i2;
      while (n < i1)
      {
        i2 = i;
        int i3 = 0;
        i = j;
        j = i2;
        i2 = n;
        n = i4;
        paramFloat3 = f2;
        while (i3 < 2)
        {
          if (i3 == 0) {
            f2 = paramFloat2;
          } else {
            f2 = f6 * f4 - f5;
          }
          float f7 = i2 * paramFloat3;
          float f8 = f3 / 2.0F;
          k = j + 1;
          double d1 = paramFloat1;
          double d2 = f7 + 3.1415927F - f8;
          double d3 = Math.sin(d2);
          double d4 = f2;
          arrayOfFloat1[j] = (-(float)(d3 * d1 * Math.cos(d4)));
          i4 = k + 1;
          arrayOfFloat1[k] = ((float)(Math.sin(d4) * d1));
          j = i4 + 1;
          arrayOfFloat1[i4] = ((float)(d1 * Math.cos(d2) * Math.cos(d4)));
          i4 = i + 1;
          arrayOfFloat2[i] = (f7 / f3);
          k = i4 + 1;
          arrayOfFloat2[i4] = ((n + i3) * f4 / f1);
          if ((i2 == 0) && (i3 == 0)) {
            break label498;
          }
          if ((i2 == paramInt2) && (i3 == 1))
          {
            label498:
            System.arraycopy(arrayOfFloat1, j - 3, arrayOfFloat1, j, 3);
            i = j + 3;
            System.arraycopy(arrayOfFloat2, k - 2, arrayOfFloat2, k, 2);
            j = k + 2;
          }
          else
          {
            i = j;
            j = k;
          }
          i4 = j;
          i3 += 1;
          k = paramInt2;
          j = i;
          i = i4;
        }
        i3 = i2 + 1;
        i2 = i;
        f2 = paramFloat3;
        i4 = n;
        n = i3;
        i = j;
        j = i2;
      }
      i2 = k;
      paramFloat3 = f1;
      paramFloat2 = f2;
      k = m;
    }
    return new Projection(new Mesh(new SubMesh[] { new SubMesh(0, arrayOfFloat1, arrayOfFloat2, 1) }), paramInt3);
  }
  
  public static Projection createEquirectangular(int paramInt)
  {
    return createEquirectangular(50.0F, 36, 72, 180.0F, 360.0F, paramInt);
  }
  
  @Documented
  @Retention(RetentionPolicy.SOURCE)
  public static @interface DrawMode {}
  
  public static final class Mesh
  {
    private final Projection.SubMesh[] subMeshes;
    
    public Mesh(Projection.SubMesh... paramVarArgs)
    {
      subMeshes = paramVarArgs;
    }
    
    public Projection.SubMesh getSubMesh(int paramInt)
    {
      return subMeshes[paramInt];
    }
    
    public int getSubMeshCount()
    {
      return subMeshes.length;
    }
  }
  
  public static final class SubMesh
  {
    public static final int VIDEO_TEXTURE_ID = 0;
    public final int mode;
    public final float[] textureCoords;
    public final int textureId;
    public final float[] vertices;
    
    public SubMesh(int paramInt1, float[] paramArrayOfFloat1, float[] paramArrayOfFloat2, int paramInt2)
    {
      textureId = paramInt1;
      boolean bool;
      if (paramArrayOfFloat1.length * 2L == paramArrayOfFloat2.length * 3L) {
        bool = true;
      } else {
        bool = false;
      }
      Assertions.checkArgument(bool);
      vertices = paramArrayOfFloat1;
      textureCoords = paramArrayOfFloat2;
      mode = paramInt2;
    }
    
    public int getVertexCount()
    {
      return vertices.length / 3;
    }
  }
}
