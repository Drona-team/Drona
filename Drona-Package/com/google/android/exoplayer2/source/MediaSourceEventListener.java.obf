package com.google.android.exoplayer2.source;

import android.net.Uri;
import android.os.Handler;
import android.os.Looper;
import androidx.annotation.CheckResult;
import androidx.annotation.Nullable;
import com.google.android.exoplayer2.C;
import com.google.android.exoplayer2.Format;
import com.google.android.exoplayer2.upstream.DataSpec;
import com.google.android.exoplayer2.util.Assertions;
import java.io.IOException;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CopyOnWriteArrayList;

public abstract interface MediaSourceEventListener
{
  public abstract void onDownstreamFormatChanged(int paramInt, @Nullable MediaSource.MediaPeriodId paramMediaPeriodId, MediaLoadData paramMediaLoadData);
  
  public abstract void onLoadCanceled(int paramInt, @Nullable MediaSource.MediaPeriodId paramMediaPeriodId, LoadEventInfo paramLoadEventInfo, MediaLoadData paramMediaLoadData);
  
  public abstract void onLoadCompleted(int paramInt, @Nullable MediaSource.MediaPeriodId paramMediaPeriodId, LoadEventInfo paramLoadEventInfo, MediaLoadData paramMediaLoadData);
  
  public abstract void onLoadError(int paramInt, @Nullable MediaSource.MediaPeriodId paramMediaPeriodId, LoadEventInfo paramLoadEventInfo, MediaLoadData paramMediaLoadData, IOException paramIOException, boolean paramBoolean);
  
  public abstract void onLoadStarted(int paramInt, @Nullable MediaSource.MediaPeriodId paramMediaPeriodId, LoadEventInfo paramLoadEventInfo, MediaLoadData paramMediaLoadData);
  
  public abstract void onMediaPeriodCreated(int paramInt, MediaSource.MediaPeriodId paramMediaPeriodId);
  
  public abstract void onMediaPeriodReleased(int paramInt, MediaSource.MediaPeriodId paramMediaPeriodId);
  
  public abstract void onReadingStarted(int paramInt, MediaSource.MediaPeriodId paramMediaPeriodId);
  
  public abstract void onUpstreamDiscarded(int paramInt, MediaSource.MediaPeriodId paramMediaPeriodId, MediaLoadData paramMediaLoadData);
  
  public static final class EventDispatcher
  {
    private final CopyOnWriteArrayList<ListenerAndHandler> listenerAndHandlers;
    @Nullable
    public final MediaSource.MediaPeriodId mediaPeriodId;
    private final long mediaTimeOffsetMs;
    public final int windowIndex;
    
    public EventDispatcher()
    {
      this(new CopyOnWriteArrayList(), 0, null, 0L);
    }
    
    private EventDispatcher(CopyOnWriteArrayList<ListenerAndHandler> paramCopyOnWriteArrayList, int paramInt, @Nullable MediaSource.MediaPeriodId paramMediaPeriodId, long paramLong)
    {
      listenerAndHandlers = paramCopyOnWriteArrayList;
      windowIndex = paramInt;
      mediaPeriodId = paramMediaPeriodId;
      mediaTimeOffsetMs = paramLong;
    }
    
    private long adjustMediaTime(long paramLong)
    {
      paramLong = C.usToMs(paramLong);
      if (paramLong == -9223372036854775807L) {
        return -9223372036854775807L;
      }
      return mediaTimeOffsetMs + paramLong;
    }
    
    private void postOrRun(Handler paramHandler, Runnable paramRunnable)
    {
      if (paramHandler.getLooper() == Looper.myLooper())
      {
        paramRunnable.run();
        return;
      }
      paramHandler.post(paramRunnable);
    }
    
    public void addEventListener(Handler paramHandler, MediaSourceEventListener paramMediaSourceEventListener)
    {
      boolean bool;
      if ((paramHandler != null) && (paramMediaSourceEventListener != null)) {
        bool = true;
      } else {
        bool = false;
      }
      Assertions.checkArgument(bool);
      listenerAndHandlers.add(new ListenerAndHandler(paramHandler, paramMediaSourceEventListener));
    }
    
    public void downstreamFormatChanged(int paramInt1, @Nullable Format paramFormat, int paramInt2, @Nullable Object paramObject, long paramLong)
    {
      downstreamFormatChanged(new MediaSourceEventListener.MediaLoadData(1, paramInt1, paramFormat, paramInt2, paramObject, adjustMediaTime(paramLong), -9223372036854775807L));
    }
    
    public void downstreamFormatChanged(MediaSourceEventListener.MediaLoadData paramMediaLoadData)
    {
      Iterator localIterator = listenerAndHandlers.iterator();
      while (localIterator.hasNext())
      {
        ListenerAndHandler localListenerAndHandler = (ListenerAndHandler)localIterator.next();
        MediaSourceEventListener localMediaSourceEventListener = listener;
        postOrRun(handler, new -..Lambda.MediaSourceEventListener.EventDispatcher.ES4FdQzWtupQEe6zuV_1M9-f9xU(this, localMediaSourceEventListener, paramMediaLoadData));
      }
    }
    
    public void loadCanceled(MediaSourceEventListener.LoadEventInfo paramLoadEventInfo, MediaSourceEventListener.MediaLoadData paramMediaLoadData)
    {
      Iterator localIterator = listenerAndHandlers.iterator();
      while (localIterator.hasNext())
      {
        ListenerAndHandler localListenerAndHandler = (ListenerAndHandler)localIterator.next();
        MediaSourceEventListener localMediaSourceEventListener = listener;
        postOrRun(handler, new -..Lambda.MediaSourceEventListener.EventDispatcher.1-VoN1d1C8yHbFOrB_mXtUwAn3M(this, localMediaSourceEventListener, paramLoadEventInfo, paramMediaLoadData));
      }
    }
    
    public void loadCanceled(DataSpec paramDataSpec, Uri paramUri, Map<String, List<String>> paramMap, int paramInt1, int paramInt2, @Nullable Format paramFormat, int paramInt3, @Nullable Object paramObject, long paramLong1, long paramLong2, long paramLong3, long paramLong4, long paramLong5)
    {
      loadCanceled(new MediaSourceEventListener.LoadEventInfo(paramDataSpec, paramUri, paramMap, paramLong3, paramLong4, paramLong5), new MediaSourceEventListener.MediaLoadData(paramInt1, paramInt2, paramFormat, paramInt3, paramObject, adjustMediaTime(paramLong1), adjustMediaTime(paramLong2)));
    }
    
    public void loadCanceled(DataSpec paramDataSpec, Uri paramUri, Map<String, List<String>> paramMap, int paramInt, long paramLong1, long paramLong2, long paramLong3)
    {
      loadCanceled(paramDataSpec, paramUri, paramMap, paramInt, -1, null, 0, null, -9223372036854775807L, -9223372036854775807L, paramLong1, paramLong2, paramLong3);
    }
    
    public void loadCompleted(MediaSourceEventListener.LoadEventInfo paramLoadEventInfo, MediaSourceEventListener.MediaLoadData paramMediaLoadData)
    {
      Iterator localIterator = listenerAndHandlers.iterator();
      while (localIterator.hasNext())
      {
        ListenerAndHandler localListenerAndHandler = (ListenerAndHandler)localIterator.next();
        MediaSourceEventListener localMediaSourceEventListener = listener;
        postOrRun(handler, new -..Lambda.MediaSourceEventListener.EventDispatcher.IejPnkXyHgj2V1iyO1dqtBKfihI(this, localMediaSourceEventListener, paramLoadEventInfo, paramMediaLoadData));
      }
    }
    
    public void loadCompleted(DataSpec paramDataSpec, Uri paramUri, Map<String, List<String>> paramMap, int paramInt1, int paramInt2, @Nullable Format paramFormat, int paramInt3, @Nullable Object paramObject, long paramLong1, long paramLong2, long paramLong3, long paramLong4, long paramLong5)
    {
      loadCompleted(new MediaSourceEventListener.LoadEventInfo(paramDataSpec, paramUri, paramMap, paramLong3, paramLong4, paramLong5), new MediaSourceEventListener.MediaLoadData(paramInt1, paramInt2, paramFormat, paramInt3, paramObject, adjustMediaTime(paramLong1), adjustMediaTime(paramLong2)));
    }
    
    public void loadCompleted(DataSpec paramDataSpec, Uri paramUri, Map<String, List<String>> paramMap, int paramInt, long paramLong1, long paramLong2, long paramLong3)
    {
      loadCompleted(paramDataSpec, paramUri, paramMap, paramInt, -1, null, 0, null, -9223372036854775807L, -9223372036854775807L, paramLong1, paramLong2, paramLong3);
    }
    
    public void loadError(MediaSourceEventListener.LoadEventInfo paramLoadEventInfo, MediaSourceEventListener.MediaLoadData paramMediaLoadData, IOException paramIOException, boolean paramBoolean)
    {
      Iterator localIterator = listenerAndHandlers.iterator();
      while (localIterator.hasNext())
      {
        ListenerAndHandler localListenerAndHandler = (ListenerAndHandler)localIterator.next();
        MediaSourceEventListener localMediaSourceEventListener = listener;
        postOrRun(handler, new -..Lambda.MediaSourceEventListener.EventDispatcher.0X-TAsNqR4TUW1yA_ZD1_p3oT84(this, localMediaSourceEventListener, paramLoadEventInfo, paramMediaLoadData, paramIOException, paramBoolean));
      }
    }
    
    public void loadError(DataSpec paramDataSpec, Uri paramUri, Map<String, List<String>> paramMap, int paramInt1, int paramInt2, @Nullable Format paramFormat, int paramInt3, @Nullable Object paramObject, long paramLong1, long paramLong2, long paramLong3, long paramLong4, long paramLong5, IOException paramIOException, boolean paramBoolean)
    {
      loadError(new MediaSourceEventListener.LoadEventInfo(paramDataSpec, paramUri, paramMap, paramLong3, paramLong4, paramLong5), new MediaSourceEventListener.MediaLoadData(paramInt1, paramInt2, paramFormat, paramInt3, paramObject, adjustMediaTime(paramLong1), adjustMediaTime(paramLong2)), paramIOException, paramBoolean);
    }
    
    public void loadError(DataSpec paramDataSpec, Uri paramUri, Map<String, List<String>> paramMap, int paramInt, long paramLong1, long paramLong2, long paramLong3, IOException paramIOException, boolean paramBoolean)
    {
      loadError(paramDataSpec, paramUri, paramMap, paramInt, -1, null, 0, null, -9223372036854775807L, -9223372036854775807L, paramLong1, paramLong2, paramLong3, paramIOException, paramBoolean);
    }
    
    public void loadStarted(MediaSourceEventListener.LoadEventInfo paramLoadEventInfo, MediaSourceEventListener.MediaLoadData paramMediaLoadData)
    {
      Iterator localIterator = listenerAndHandlers.iterator();
      while (localIterator.hasNext())
      {
        ListenerAndHandler localListenerAndHandler = (ListenerAndHandler)localIterator.next();
        MediaSourceEventListener localMediaSourceEventListener = listener;
        postOrRun(handler, new -..Lambda.MediaSourceEventListener.EventDispatcher.WQKVpIh5ilpOizOGmbnyUThugMU(this, localMediaSourceEventListener, paramLoadEventInfo, paramMediaLoadData));
      }
    }
    
    public void loadStarted(DataSpec paramDataSpec, int paramInt1, int paramInt2, @Nullable Format paramFormat, int paramInt3, @Nullable Object paramObject, long paramLong1, long paramLong2, long paramLong3)
    {
      loadStarted(new MediaSourceEventListener.LoadEventInfo(paramDataSpec, uri, Collections.emptyMap(), paramLong3, 0L, 0L), new MediaSourceEventListener.MediaLoadData(paramInt1, paramInt2, paramFormat, paramInt3, paramObject, adjustMediaTime(paramLong1), adjustMediaTime(paramLong2)));
    }
    
    public void loadStarted(DataSpec paramDataSpec, int paramInt, long paramLong)
    {
      loadStarted(paramDataSpec, paramInt, -1, null, 0, null, -9223372036854775807L, -9223372036854775807L, paramLong);
    }
    
    public void mediaPeriodCreated()
    {
      MediaSource.MediaPeriodId localMediaPeriodId = (MediaSource.MediaPeriodId)Assertions.checkNotNull(mediaPeriodId);
      Iterator localIterator = listenerAndHandlers.iterator();
      while (localIterator.hasNext())
      {
        ListenerAndHandler localListenerAndHandler = (ListenerAndHandler)localIterator.next();
        MediaSourceEventListener localMediaSourceEventListener = listener;
        postOrRun(handler, new -..Lambda.MediaSourceEventListener.EventDispatcher.N-EOPAK5UK0--YMNjezq7UM3UNI(this, localMediaSourceEventListener, localMediaPeriodId));
      }
    }
    
    public void mediaPeriodReleased()
    {
      MediaSource.MediaPeriodId localMediaPeriodId = (MediaSource.MediaPeriodId)Assertions.checkNotNull(mediaPeriodId);
      Iterator localIterator = listenerAndHandlers.iterator();
      while (localIterator.hasNext())
      {
        ListenerAndHandler localListenerAndHandler = (ListenerAndHandler)localIterator.next();
        MediaSourceEventListener localMediaSourceEventListener = listener;
        postOrRun(handler, new -..Lambda.MediaSourceEventListener.EventDispatcher.zyck4ebRbqvR6eQIjdzRcIBkRbI(this, localMediaSourceEventListener, localMediaPeriodId));
      }
    }
    
    public void readingStarted()
    {
      MediaSource.MediaPeriodId localMediaPeriodId = (MediaSource.MediaPeriodId)Assertions.checkNotNull(mediaPeriodId);
      Iterator localIterator = listenerAndHandlers.iterator();
      while (localIterator.hasNext())
      {
        ListenerAndHandler localListenerAndHandler = (ListenerAndHandler)localIterator.next();
        MediaSourceEventListener localMediaSourceEventListener = listener;
        postOrRun(handler, new -..Lambda.MediaSourceEventListener.EventDispatcher.PV8wmqGm7vRMJNlt--V3zhXfxiE(this, localMediaSourceEventListener, localMediaPeriodId));
      }
    }
    
    public void removeEventListener(MediaSourceEventListener paramMediaSourceEventListener)
    {
      Iterator localIterator = listenerAndHandlers.iterator();
      while (localIterator.hasNext())
      {
        ListenerAndHandler localListenerAndHandler = (ListenerAndHandler)localIterator.next();
        if (listener == paramMediaSourceEventListener) {
          listenerAndHandlers.remove(localListenerAndHandler);
        }
      }
    }
    
    public void upstreamDiscarded(int paramInt, long paramLong1, long paramLong2)
    {
      upstreamDiscarded(new MediaSourceEventListener.MediaLoadData(1, paramInt, null, 3, null, adjustMediaTime(paramLong1), adjustMediaTime(paramLong2)));
    }
    
    public void upstreamDiscarded(MediaSourceEventListener.MediaLoadData paramMediaLoadData)
    {
      MediaSource.MediaPeriodId localMediaPeriodId = (MediaSource.MediaPeriodId)Assertions.checkNotNull(mediaPeriodId);
      Iterator localIterator = listenerAndHandlers.iterator();
      while (localIterator.hasNext())
      {
        ListenerAndHandler localListenerAndHandler = (ListenerAndHandler)localIterator.next();
        MediaSourceEventListener localMediaSourceEventListener = listener;
        postOrRun(handler, new -..Lambda.MediaSourceEventListener.EventDispatcher.BtPa14lQQTv1oUeMy_9QaCysWHY(this, localMediaSourceEventListener, localMediaPeriodId, paramMediaLoadData));
      }
    }
    
    @CheckResult
    public EventDispatcher withParameters(int paramInt, @Nullable MediaSource.MediaPeriodId paramMediaPeriodId, long paramLong)
    {
      return new EventDispatcher(listenerAndHandlers, paramInt, paramMediaPeriodId, paramLong);
    }
    
    private static final class ListenerAndHandler
    {
      public final Handler handler;
      public final MediaSourceEventListener listener;
      
      public ListenerAndHandler(Handler paramHandler, MediaSourceEventListener paramMediaSourceEventListener)
      {
        handler = paramHandler;
        listener = paramMediaSourceEventListener;
      }
    }
  }
  
  public static final class LoadEventInfo
  {
    public final long bytesLoaded;
    public final DataSpec dataSpec;
    public final long elapsedRealtimeMs;
    public final long loadDurationMs;
    public final Map<String, List<String>> responseHeaders;
    public final Uri uri;
    
    public LoadEventInfo(DataSpec paramDataSpec, Uri paramUri, Map<String, List<String>> paramMap, long paramLong1, long paramLong2, long paramLong3)
    {
      dataSpec = paramDataSpec;
      uri = paramUri;
      responseHeaders = paramMap;
      elapsedRealtimeMs = paramLong1;
      loadDurationMs = paramLong2;
      bytesLoaded = paramLong3;
    }
  }
  
  public static final class MediaLoadData
  {
    public final int dataType;
    public final long mediaEndTimeMs;
    public final long mediaStartTimeMs;
    @Nullable
    public final Format trackFormat;
    @Nullable
    public final Object trackSelectionData;
    public final int trackSelectionReason;
    public final int trackType;
    
    public MediaLoadData(int paramInt1, int paramInt2, @Nullable Format paramFormat, int paramInt3, @Nullable Object paramObject, long paramLong1, long paramLong2)
    {
      dataType = paramInt1;
      trackType = paramInt2;
      trackFormat = paramFormat;
      trackSelectionReason = paramInt3;
      trackSelectionData = paramObject;
      mediaStartTimeMs = paramLong1;
      mediaEndTimeMs = paramLong2;
    }
  }
}
