package com.google.android.exoplayer2.source.chunk;

import androidx.annotation.Nullable;
import com.google.android.exoplayer2.Format;
import com.google.android.exoplayer2.extractor.DefaultExtractorInput;
import com.google.android.exoplayer2.extractor.Extractor;
import com.google.android.exoplayer2.extractor.ExtractorInput;
import com.google.android.exoplayer2.extractor.PositionHolder;
import com.google.android.exoplayer2.upstream.DataSource;
import com.google.android.exoplayer2.upstream.DataSpec;
import com.google.android.exoplayer2.upstream.StatsDataSource;
import com.google.android.exoplayer2.util.Assertions;
import com.google.android.exoplayer2.util.Util;
import java.io.IOException;

public final class InitializationChunk
  extends Chunk
{
  private static final PositionHolder DUMMY_POSITION_HOLDER = new PositionHolder();
  private final ChunkExtractorWrapper extractorWrapper;
  private volatile boolean loadCanceled;
  private long nextLoadPosition;
  
  public InitializationChunk(DataSource paramDataSource, DataSpec paramDataSpec, Format paramFormat, int paramInt, @Nullable Object paramObject, ChunkExtractorWrapper paramChunkExtractorWrapper)
  {
    super(paramDataSource, paramDataSpec, 2, paramFormat, paramInt, paramObject, -9223372036854775807L, -9223372036854775807L);
    extractorWrapper = paramChunkExtractorWrapper;
  }
  
  public void cancelLoad()
  {
    loadCanceled = true;
  }
  
  public void load()
    throws IOException, InterruptedException
  {
    Object localObject1 = dataSpec.subrange(nextLoadPosition);
    for (;;)
    {
      int i;
      boolean bool;
      try
      {
        localObject1 = new DefaultExtractorInput(dataSource, absoluteStreamPosition, dataSource.open((DataSpec)localObject1));
        if (nextLoadPosition == 0L) {
          extractorWrapper.init(null, -9223372036854775807L, -9223372036854775807L);
        }
        try
        {
          Extractor localExtractor = extractorWrapper.extractor;
          i = 0;
          if ((i == 0) && (!loadCanceled))
          {
            i = localExtractor.read((ExtractorInput)localObject1, DUMMY_POSITION_HOLDER);
            continue;
            Assertions.checkState(bool);
            nextLoadPosition = (((ExtractorInput)localObject1).getPosition() - dataSpec.absoluteStreamPosition);
            return;
          }
        }
        finally
        {
          nextLoadPosition = (((ExtractorInput)localObject1).getPosition() - dataSpec.absoluteStreamPosition);
        }
        bool = true;
      }
      finally
      {
        Util.closeQuietly(dataSource);
      }
      if (i == 1) {
        bool = false;
      }
    }
  }
}
