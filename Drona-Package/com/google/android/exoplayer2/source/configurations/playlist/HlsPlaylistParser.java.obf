package com.google.android.exoplayer2.source.hls.playlist;

import android.net.Uri;
import android.util.Base64;
import androidx.annotation.Nullable;
import com.google.android.exoplayer2.C;
import com.google.android.exoplayer2.Format;
import com.google.android.exoplayer2.ParserException;
import com.google.android.exoplayer2.drm.DrmInitData;
import com.google.android.exoplayer2.drm.DrmInitData.SchemeData;
import com.google.android.exoplayer2.extractor.mp4.PsshAtomUtil;
import com.google.android.exoplayer2.source.UnrecognizedInputFormatException;
import com.google.android.exoplayer2.upstream.ParsingLoadable.Parser;
import com.google.android.exoplayer2.util.MimeTypes;
import com.google.android.exoplayer2.util.Util;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.TreeMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public final class HlsPlaylistParser
  implements ParsingLoadable.Parser<HlsPlaylist>
{
  private static final String ATTR_CLOSED_CAPTIONS_NONE = "CLOSED-CAPTIONS=NONE";
  private static final String BOOLEAN_FALSE = "NO";
  private static final String BOOLEAN_TRUE = "YES";
  private static final String KEYFORMAT_IDENTITY = "identity";
  private static final String KEYFORMAT_PLAYREADY = "com.microsoft.playready";
  private static final String KEYFORMAT_WIDEVINE_PSSH_BINARY = "urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed";
  private static final String KEYFORMAT_WIDEVINE_PSSH_JSON = "com.widevine";
  private static final String METHOD_AES_128 = "AES-128";
  private static final String METHOD_NONE = "NONE";
  private static final String METHOD_SAMPLE_AES = "SAMPLE-AES";
  private static final String METHOD_SAMPLE_AES_CENC = "SAMPLE-AES-CENC";
  private static final String METHOD_SAMPLE_AES_CTR = "SAMPLE-AES-CTR";
  private static final String PLAYLIST_HEADER = "#EXTM3U";
  private static final Pattern REGEX_ATTR_BYTERANGE;
  private static final Pattern REGEX_AUDIO;
  private static final Pattern REGEX_AUTOSELECT;
  private static final Pattern REGEX_AVERAGE_BANDWIDTH = Pattern.compile("AVERAGE-BANDWIDTH=(\\d+)\\b");
  private static final Pattern REGEX_BANDWIDTH;
  private static final Pattern REGEX_BYTERANGE;
  private static final Pattern REGEX_CODECS;
  private static final Pattern REGEX_DEFAULT;
  private static final Pattern REGEX_FORCED;
  private static final Pattern REGEX_FRAME_RATE;
  private static final Pattern REGEX_GROUP_ID;
  private static final Pattern REGEX_IMPORT = Pattern.compile("IMPORT=\"(.+?)\"");
  private static final Pattern REGEX_INSTREAM_ID;
  private static final Pattern REGEX_IV;
  private static final Pattern REGEX_KEYFORMAT;
  private static final Pattern REGEX_KEYFORMATVERSIONS;
  private static final Pattern REGEX_LANGUAGE;
  private static final Pattern REGEX_MEDIA_DURATION;
  private static final Pattern REGEX_MEDIA_SEQUENCE;
  private static final Pattern REGEX_MEDIA_TITLE;
  private static final Pattern REGEX_METHOD;
  private static final Pattern REGEX_NAME;
  private static final Pattern REGEX_PLAYLIST_TYPE;
  private static final Pattern REGEX_RESOLUTION;
  private static final Pattern REGEX_TARGET_DURATION;
  private static final Pattern REGEX_TIME_OFFSET;
  private static final Pattern REGEX_TYPE;
  private static final Pattern REGEX_URI;
  private static final Pattern REGEX_VALUE;
  private static final Pattern REGEX_VARIABLE_REFERENCE = Pattern.compile("\\{\\$([a-zA-Z0-9\\-_]+)\\}");
  private static final Pattern REGEX_VERSION;
  private static final String TAG_BYTERANGE = "#EXT-X-BYTERANGE";
  private static final String TAG_DEFINE = "#EXT-X-DEFINE";
  private static final String TAG_DISCONTINUITY = "#EXT-X-DISCONTINUITY";
  private static final String TAG_DISCONTINUITY_SEQUENCE = "#EXT-X-DISCONTINUITY-SEQUENCE";
  private static final String TAG_ENDLIST = "#EXT-X-ENDLIST";
  private static final String TAG_GAP = "#EXT-X-GAP";
  private static final String TAG_INDEPENDENT_SEGMENTS = "#EXT-X-INDEPENDENT-SEGMENTS";
  private static final String TAG_INIT_SEGMENT = "#EXT-X-MAP";
  private static final String TAG_KEY = "#EXT-X-KEY";
  private static final String TAG_MEDIA = "#EXT-X-MEDIA";
  private static final String TAG_MEDIA_DURATION = "#EXTINF";
  private static final String TAG_MEDIA_SEQUENCE = "#EXT-X-MEDIA-SEQUENCE";
  private static final String TAG_PLAYLIST_TYPE = "#EXT-X-PLAYLIST-TYPE";
  private static final String TAG_PREFIX = "#EXT";
  private static final String TAG_PROGRAM_DATE_TIME = "#EXT-X-PROGRAM-DATE-TIME";
  private static final String TAG_START = "#EXT-X-START";
  private static final String TAG_STREAM_INF = "#EXT-X-STREAM-INF";
  private static final String TAG_TARGET_DURATION = "#EXT-X-TARGETDURATION";
  private static final String TAG_VERSION = "#EXT-X-VERSION";
  private static final String TYPE_AUDIO = "AUDIO";
  private static final String TYPE_CLOSED_CAPTIONS = "CLOSED-CAPTIONS";
  private static final String TYPE_SUBTITLES = "SUBTITLES";
  private static final String TYPE_VIDEO = "VIDEO";
  private final HlsMasterPlaylist masterPlaylist;
  
  static
  {
    REGEX_AUDIO = Pattern.compile("AUDIO=\"(.+?)\"");
    REGEX_BANDWIDTH = Pattern.compile("[^-]BANDWIDTH=(\\d+)\\b");
    REGEX_CODECS = Pattern.compile("CODECS=\"(.+?)\"");
    REGEX_RESOLUTION = Pattern.compile("RESOLUTION=(\\d+x\\d+)");
    REGEX_FRAME_RATE = Pattern.compile("FRAME-RATE=([\\d\\.]+)\\b");
    REGEX_TARGET_DURATION = Pattern.compile("#EXT-X-TARGETDURATION:(\\d+)\\b");
    REGEX_VERSION = Pattern.compile("#EXT-X-VERSION:(\\d+)\\b");
    REGEX_PLAYLIST_TYPE = Pattern.compile("#EXT-X-PLAYLIST-TYPE:(.+)\\b");
    REGEX_MEDIA_SEQUENCE = Pattern.compile("#EXT-X-MEDIA-SEQUENCE:(\\d+)\\b");
    REGEX_MEDIA_DURATION = Pattern.compile("#EXTINF:([\\d\\.]+)\\b");
    REGEX_MEDIA_TITLE = Pattern.compile("#EXTINF:[\\d\\.]+\\b,(.+)");
    REGEX_TIME_OFFSET = Pattern.compile("TIME-OFFSET=(-?[\\d\\.]+)\\b");
    REGEX_BYTERANGE = Pattern.compile("#EXT-X-BYTERANGE:(\\d+(?:@\\d+)?)\\b");
    REGEX_ATTR_BYTERANGE = Pattern.compile("BYTERANGE=\"(\\d+(?:@\\d+)?)\\b\"");
    REGEX_METHOD = Pattern.compile("METHOD=(NONE|AES-128|SAMPLE-AES|SAMPLE-AES-CENC|SAMPLE-AES-CTR)\\s*(?:,|$)");
    REGEX_KEYFORMAT = Pattern.compile("KEYFORMAT=\"(.+?)\"");
    REGEX_KEYFORMATVERSIONS = Pattern.compile("KEYFORMATVERSIONS=\"(.+?)\"");
    REGEX_URI = Pattern.compile("URI=\"(.+?)\"");
    REGEX_IV = Pattern.compile("IV=([^,.*]+)");
    REGEX_TYPE = Pattern.compile("TYPE=(AUDIO|VIDEO|SUBTITLES|CLOSED-CAPTIONS)");
    REGEX_LANGUAGE = Pattern.compile("LANGUAGE=\"(.+?)\"");
    REGEX_NAME = Pattern.compile("NAME=\"(.+?)\"");
    REGEX_GROUP_ID = Pattern.compile("GROUP-ID=\"(.+?)\"");
    REGEX_INSTREAM_ID = Pattern.compile("INSTREAM-ID=\"((?:CC|SERVICE)\\d+)\"");
    REGEX_AUTOSELECT = compileBooleanAttrPattern("AUTOSELECT");
    REGEX_DEFAULT = compileBooleanAttrPattern("DEFAULT");
    REGEX_FORCED = compileBooleanAttrPattern("FORCED");
    REGEX_VALUE = Pattern.compile("VALUE=\"(.+?)\"");
  }
  
  public HlsPlaylistParser()
  {
    this(HlsMasterPlaylist.EMPTY);
  }
  
  public HlsPlaylistParser(HlsMasterPlaylist paramHlsMasterPlaylist)
  {
    masterPlaylist = paramHlsMasterPlaylist;
  }
  
  private static boolean checkPlaylistHeader(BufferedReader paramBufferedReader)
    throws IOException
  {
    int j = paramBufferedReader.read();
    int i = j;
    if (j == 239) {
      if (paramBufferedReader.read() == 187)
      {
        if (paramBufferedReader.read() != 191) {
          return false;
        }
        i = paramBufferedReader.read();
      }
      else
      {
        return false;
      }
    }
    j = skipIgnorableWhitespace(paramBufferedReader, true, i);
    int k = "#EXTM3U".length();
    i = 0;
    while (i < k)
    {
      if (j != "#EXTM3U".charAt(i)) {
        return false;
      }
      j = paramBufferedReader.read();
      i += 1;
    }
    return Util.isLinebreak(skipIgnorableWhitespace(paramBufferedReader, false, j));
  }
  
  private static Pattern compileBooleanAttrPattern(String paramString)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(paramString);
    localStringBuilder.append("=(");
    localStringBuilder.append("NO");
    localStringBuilder.append("|");
    localStringBuilder.append("YES");
    localStringBuilder.append(")");
    return Pattern.compile(localStringBuilder.toString());
  }
  
  private static double parseDoubleAttr(String paramString, Pattern paramPattern)
    throws ParserException
  {
    return Double.parseDouble(parseStringAttr(paramString, paramPattern, Collections.emptyMap()));
  }
  
  private static int parseIntAttr(String paramString, Pattern paramPattern)
    throws ParserException
  {
    return Integer.parseInt(parseStringAttr(paramString, paramPattern, Collections.emptyMap()));
  }
  
  private static long parseLongAttr(String paramString, Pattern paramPattern)
    throws ParserException
  {
    return Long.parseLong(parseStringAttr(paramString, paramPattern, Collections.emptyMap()));
  }
  
  private static HlsMasterPlaylist parseMasterPlaylist(LineIterator paramLineIterator, String paramString)
    throws IOException
  {
    Object localObject1 = new HashSet();
    HashMap localHashMap2 = new HashMap();
    HashMap localHashMap1 = new HashMap();
    ArrayList localArrayList1 = new ArrayList();
    ArrayList localArrayList3 = new ArrayList();
    ArrayList localArrayList4 = new ArrayList();
    ArrayList localArrayList2 = new ArrayList();
    ArrayList localArrayList5 = new ArrayList();
    int j = 0;
    boolean bool = false;
    String str1;
    Object localObject2;
    Object localObject3;
    int i;
    label317:
    int m;
    while (paramLineIterator.hasNext())
    {
      str1 = paramLineIterator.next();
      if (str1.startsWith("#EXT")) {
        localArrayList5.add(str1);
      }
      if (str1.startsWith("#EXT-X-DEFINE"))
      {
        localHashMap1.put(parseStringAttr(str1, REGEX_NAME, localHashMap1), parseStringAttr(str1, REGEX_VALUE, localHashMap1));
      }
      else if (str1.equals("#EXT-X-INDEPENDENT-SEGMENTS"))
      {
        bool = true;
      }
      else if (str1.startsWith("#EXT-X-MEDIA"))
      {
        localArrayList2.add(str1);
      }
      else if (str1.startsWith("#EXT-X-STREAM-INF"))
      {
        int n = j | str1.contains("CLOSED-CAPTIONS=NONE");
        k = parseIntAttr(str1, REGEX_BANDWIDTH);
        localObject2 = parseOptionalStringAttr(str1, REGEX_AVERAGE_BANDWIDTH, localHashMap1);
        if (localObject2 != null) {
          k = Integer.parseInt((String)localObject2);
        }
        localObject2 = parseOptionalStringAttr(str1, REGEX_CODECS, localHashMap1);
        localObject3 = parseOptionalStringAttr(str1, REGEX_RESOLUTION, localHashMap1);
        if (localObject3 != null)
        {
          localObject3 = ((String)localObject3).split("x");
          j = Integer.parseInt(localObject3[0]);
          i = Integer.parseInt(localObject3[1]);
          if ((j > 0) && (i > 0)) {
            break label317;
          }
          j = -1;
          i = -1;
          m = i;
          i = j;
        }
        else
        {
          i = -1;
          m = -1;
        }
        localObject3 = parseOptionalStringAttr(str1, REGEX_FRAME_RATE, localHashMap1);
        float f;
        if (localObject3 != null) {
          f = Float.parseFloat((String)localObject3);
        } else {
          f = -1.0F;
        }
        str1 = parseOptionalStringAttr(str1, REGEX_AUDIO, localHashMap1);
        if ((str1 != null) && (localObject2 != null)) {
          localHashMap2.put(str1, Util.getCodecsOfType((String)localObject2, 1));
        }
        str1 = replaceVariableReferences(paramLineIterator.next(), localHashMap1);
        j = n;
        if (((HashSet)localObject1).add(str1))
        {
          localArrayList1.add(new HlsMasterPlaylist.HlsUrl(str1, Format.createVideoContainerFormat(Integer.toString(localArrayList1.size()), null, "application/x-mpegURL", null, (String)localObject2, k, i, m, f, null, 0)));
          j = n;
        }
      }
    }
    int k = 0;
    localObject1 = null;
    paramLineIterator = null;
    while (k < localArrayList2.size())
    {
      localObject2 = (String)localArrayList2.get(k);
      m = parseSelectionFlags((String)localObject2);
      str1 = parseOptionalStringAttr((String)localObject2, REGEX_URI, localHashMap1);
      localObject3 = parseStringAttr((String)localObject2, REGEX_NAME, localHashMap1);
      String str2 = parseOptionalStringAttr((String)localObject2, REGEX_LANGUAGE, localHashMap1);
      String str3 = parseOptionalStringAttr((String)localObject2, REGEX_GROUP_ID, localHashMap1);
      Object localObject4 = new StringBuilder();
      ((StringBuilder)localObject4).append(str3);
      ((StringBuilder)localObject4).append(":");
      ((StringBuilder)localObject4).append((String)localObject3);
      localObject4 = ((StringBuilder)localObject4).toString();
      String str4 = parseStringAttr((String)localObject2, REGEX_TYPE, localHashMap1);
      i = str4.hashCode();
      if (i != -959297733)
      {
        if (i != -333210994)
        {
          if ((i == 62628790) && (str4.equals("AUDIO")))
          {
            i = 0;
            break label685;
          }
        }
        else if (str4.equals("CLOSED-CAPTIONS"))
        {
          i = 2;
          break label685;
        }
      }
      else if (str4.equals("SUBTITLES"))
      {
        i = 1;
        break label685;
      }
      i = -1;
      switch (i)
      {
      default: 
        break;
      case 2: 
        localObject2 = parseStringAttr((String)localObject2, REGEX_INSTREAM_ID, localHashMap1);
        if (((String)localObject2).startsWith("CC")) {
          str1 = "application/cea-608";
        }
        for (i = Integer.parseInt(((String)localObject2).substring(2));; i = Integer.parseInt(((String)localObject2).substring(7)))
        {
          break;
          str1 = "application/cea-708";
        }
        localObject2 = paramLineIterator;
        if (paramLineIterator == null) {
          localObject2 = new ArrayList();
        }
        ((List)localObject2).add(Format.createTextContainerFormat((String)localObject4, (String)localObject3, null, str1, null, -1, m, str2, i));
        paramLineIterator = (LineIterator)localObject2;
        break;
      case 1: 
        localArrayList4.add(new HlsMasterPlaylist.HlsUrl(str1, Format.createTextContainerFormat((String)localObject4, (String)localObject3, "application/x-mpegURL", "text/vtt", null, -1, m, str2)));
        break;
      case 0: 
        label685:
        str3 = (String)localHashMap2.get(str3);
        if (str3 != null) {
          localObject2 = MimeTypes.getMediaMimeType(str3);
        } else {
          localObject2 = null;
        }
        localObject2 = Format.createAudioContainerFormat((String)localObject4, (String)localObject3, "application/x-mpegURL", (String)localObject2, str3, -1, -1, -1, null, m, str2);
        if (str1 == null) {
          localObject1 = localObject2;
        } else {
          localArrayList3.add(new HlsMasterPlaylist.HlsUrl(str1, (Format)localObject2));
        }
        break;
      }
      k += 1;
    }
    if (j != 0) {
      paramLineIterator = Collections.emptyList();
    }
    return new HlsMasterPlaylist(paramString, localArrayList5, localArrayList1, localArrayList3, localArrayList4, (Format)localObject1, paramLineIterator, bool, localHashMap1);
  }
  
  private static HlsMediaPlaylist parseMediaPlaylist(HlsMasterPlaylist paramHlsMasterPlaylist, LineIterator paramLineIterator, String paramString)
    throws IOException
  {
    boolean bool3 = hasIndependentSegments;
    HashMap localHashMap = new HashMap();
    ArrayList localArrayList1 = new ArrayList();
    ArrayList localArrayList2 = new ArrayList();
    TreeMap localTreeMap = new TreeMap();
    long l10 = -9223372036854775807L;
    long l5 = -9223372036854775807L;
    int i = 0;
    Object localObject2 = null;
    long l9 = 0L;
    boolean bool4 = false;
    int m = 0;
    long l7 = 0L;
    int k = 1;
    boolean bool2 = false;
    Object localObject5 = null;
    long l1 = 0L;
    long l3 = 0L;
    DrmInitData localDrmInitData = null;
    int j = 0;
    long l4 = 0L;
    Object localObject3 = null;
    Object localObject1 = null;
    Object localObject6 = null;
    long l2 = -1L;
    boolean bool5 = false;
    String str1 = "";
    long l8 = 0L;
    long l6 = l3;
    label122:
    label682:
    label1262:
    for (;;)
    {
      if (!paramLineIterator.hasNext()) {
        break label1265;
      }
      String str2 = paramLineIterator.next();
      if (str2.startsWith("#EXT")) {
        localArrayList2.add(str2);
      }
      Object localObject4;
      if (str2.startsWith("#EXT-X-PLAYLIST-TYPE"))
      {
        localObject4 = parseStringAttr(str2, REGEX_PLAYLIST_TYPE, localHashMap);
        if ("VOD".equals(localObject4)) {
          i = 1;
        } else if ("EVENT".equals(localObject4)) {
          i = 2;
        }
      }
      else if (str2.startsWith("#EXT-X-START"))
      {
        l10 = (parseDoubleAttr(str2, REGEX_TIME_OFFSET) * 1000000.0D);
      }
      else if (str2.startsWith("#EXT-X-MAP"))
      {
        localObject4 = parseStringAttr(str2, REGEX_URI, localHashMap);
        localObject6 = parseOptionalStringAttr(str2, REGEX_ATTR_BYTERANGE, localHashMap);
        l3 = l1;
        if (localObject6 != null)
        {
          localObject6 = ((String)localObject6).split("@");
          long l11 = Long.parseLong(localObject6[0]);
          l3 = l1;
          l2 = l11;
          if (localObject6.length > 1)
          {
            l3 = Long.parseLong(localObject6[1]);
            l2 = l11;
          }
        }
        localObject6 = new HlsMediaPlaylist.Segment((String)localObject4, l3, l2);
        l1 = 0L;
        l2 = -1L;
      }
      else if (str2.startsWith("#EXT-X-TARGETDURATION"))
      {
        l5 = 1000000L * parseIntAttr(str2, REGEX_TARGET_DURATION);
      }
      else if (str2.startsWith("#EXT-X-MEDIA-SEQUENCE"))
      {
        l6 = parseLongAttr(str2, REGEX_MEDIA_SEQUENCE);
        l7 = l6;
      }
      else if (str2.startsWith("#EXT-X-VERSION"))
      {
        k = parseIntAttr(str2, REGEX_VERSION);
      }
      else
      {
        if (str2.startsWith("#EXT-X-DEFINE"))
        {
          localObject4 = parseOptionalStringAttr(str2, REGEX_IMPORT, localHashMap);
          if (localObject4 != null)
          {
            str2 = (String)variableDefinitions.get(localObject4);
            if (str2 != null) {
              localHashMap.put(localObject4, str2);
            }
          }
          else
          {
            localHashMap.put(parseStringAttr(str2, REGEX_NAME, localHashMap), parseStringAttr(str2, REGEX_VALUE, localHashMap));
          }
        }
        for (;;)
        {
          break label1262;
          if (str2.startsWith("#EXTINF"))
          {
            l8 = (parseDoubleAttr(str2, REGEX_MEDIA_DURATION) * 1000000.0D);
            str1 = parseOptionalStringAttr(str2, REGEX_MEDIA_TITLE, "", localHashMap);
            break label122;
          }
          Object localObject7;
          if (str2.startsWith("#EXT-X-KEY"))
          {
            String str3 = parseStringAttr(str2, REGEX_METHOD, localHashMap);
            localObject7 = parseOptionalStringAttr(str2, REGEX_KEYFORMAT, "identity", localHashMap);
            if ("NONE".equals(str3))
            {
              localTreeMap.clear();
              localDrmInitData = null;
              localObject3 = null;
              localObject1 = null;
              break label122;
            }
            localObject4 = parseOptionalStringAttr(str2, REGEX_IV, localHashMap);
            if ("identity".equals(localObject7))
            {
              localObject3 = localObject2;
              if ("AES-128".equals(str3))
              {
                localObject3 = parseStringAttr(str2, REGEX_URI, localHashMap);
                localObject1 = localObject4;
                break label122;
              }
              localObject1 = localObject3;
            }
            for (;;)
            {
              localObject3 = null;
              localObject2 = localObject1;
              localObject1 = localObject4;
              break;
              localObject1 = localObject2;
              if (localObject2 == null) {
                if ((!"SAMPLE-AES-CENC".equals(str3)) && (!"SAMPLE-AES-CTR".equals(str3))) {
                  localObject1 = "cbcs";
                } else {
                  localObject1 = "cenc";
                }
              }
              if ("com.microsoft.playready".equals(localObject7)) {
                localObject2 = parsePlayReadySchemeData(str2, localHashMap);
              } else {
                localObject2 = parseWidevineSchemeData(str2, (String)localObject7, localHashMap);
              }
              localObject3 = localObject1;
              if (localObject2 == null) {
                break label682;
              }
              localTreeMap.put(localObject7, localObject2);
              localDrmInitData = null;
            }
          }
          if (str2.startsWith("#EXT-X-BYTERANGE"))
          {
            localObject4 = parseStringAttr(str2, REGEX_BYTERANGE, localHashMap).split("@");
            l3 = Long.parseLong(localObject4[0]);
            l2 = l3;
            if (localObject4.length <= 1) {
              break label122;
            }
            l1 = Long.parseLong(localObject4[1]);
            l2 = l3;
            break label122;
          }
          if (str2.startsWith("#EXT-X-DISCONTINUITY-SEQUENCE"))
          {
            m = Integer.parseInt(str2.substring(str2.indexOf(':') + 1));
            bool4 = true;
            break label122;
          }
          if (str2.equals("#EXT-X-DISCONTINUITY"))
          {
            j += 1;
            break label122;
          }
          if (str2.startsWith("#EXT-X-PROGRAM-DATE-TIME"))
          {
            if (l9 != 0L) {
              continue;
            }
            l9 = C.msToUs(Util.parseXsDateTime(str2.substring(str2.indexOf(':') + 1))) - l4;
            break label122;
          }
          if (str2.equals("#EXT-X-GAP"))
          {
            bool5 = true;
            break label122;
          }
          if (str2.equals("#EXT-X-INDEPENDENT-SEGMENTS"))
          {
            bool3 = true;
            break label122;
          }
          if (str2.equals("#EXT-X-ENDLIST"))
          {
            bool2 = true;
            break label122;
          }
          if (!str2.startsWith("#"))
          {
            if (localObject3 == null) {
              localObject4 = null;
            } else if (localObject1 != null) {
              localObject4 = localObject1;
            } else {
              localObject4 = Long.toHexString(l6);
            }
            boolean bool1 = l2 < -1L;
            l3 = l1;
            if (!bool1) {
              l3 = 0L;
            }
            if ((localDrmInitData == null) && (!localTreeMap.isEmpty()))
            {
              localObject7 = (DrmInitData.SchemeData[])localTreeMap.values().toArray(new DrmInitData.SchemeData[0]);
              localDrmInitData = new DrmInitData((String)localObject2, (DrmInitData.SchemeData[])localObject7);
              if (localObject5 == null)
              {
                localObject5 = new DrmInitData.SchemeData[localObject7.length];
                int n = 0;
                while (n < localObject7.length)
                {
                  localObject5[n] = localObject7[n].copyWithData(null);
                  n += 1;
                }
                localObject5 = new DrmInitData((String)localObject2, (DrmInitData.SchemeData[])localObject5);
              }
              else {}
            }
            localArrayList1.add(new HlsMediaPlaylist.Segment(replaceVariableReferences(str2, localHashMap), (HlsMediaPlaylist.Segment)localObject6, str1, l8, j, l4, localDrmInitData, (String)localObject3, (String)localObject4, l3, l2, bool5));
            l4 += l8;
            l1 = l3;
            if (bool1) {
              l1 = l3 + l2;
            }
            l3 = l6 + 1L;
            break;
          }
        }
      }
    }
    label1265:
    if (l9 != 0L) {
      bool5 = true;
    } else {
      bool5 = false;
    }
    return new HlsMediaPlaylist(i, paramString, localArrayList2, l10, l9, bool4, m, l7, k, l5, bool3, bool2, bool5, (DrmInitData)localObject5, localArrayList1);
  }
  
  private static boolean parseOptionalBooleanAttribute(String paramString, Pattern paramPattern, boolean paramBoolean)
  {
    paramString = paramPattern.matcher(paramString);
    if (paramString.find()) {
      return paramString.group(1).equals("YES");
    }
    return paramBoolean;
  }
  
  private static String parseOptionalStringAttr(String paramString1, Pattern paramPattern, String paramString2, Map<String, String> paramMap)
  {
    paramString1 = paramPattern.matcher(paramString1);
    if (paramString1.find()) {
      paramString2 = paramString1.group(1);
    }
    paramString1 = paramString2;
    if (!paramMap.isEmpty())
    {
      if (paramString2 == null) {
        return paramString2;
      }
      paramString1 = replaceVariableReferences(paramString2, paramMap);
    }
    return paramString1;
  }
  
  @Nullable
  private static String parseOptionalStringAttr(String paramString, Pattern paramPattern, Map<String, String> paramMap)
  {
    return parseOptionalStringAttr(paramString, paramPattern, null, paramMap);
  }
  
  @Nullable
  private static DrmInitData.SchemeData parsePlayReadySchemeData(String paramString, Map<String, String> paramMap)
    throws ParserException
  {
    if (!"1".equals(parseOptionalStringAttr(paramString, REGEX_KEYFORMATVERSIONS, "1", paramMap))) {
      return null;
    }
    paramString = parseStringAttr(paramString, REGEX_URI, paramMap);
    paramString = Base64.decode(paramString.substring(paramString.indexOf(',')), 0);
    paramString = PsshAtomUtil.buildPsshAtom(C.PLAYREADY_UUID, paramString);
    return new DrmInitData.SchemeData(C.PLAYREADY_UUID, "video/mp4", paramString);
  }
  
  private static int parseSelectionFlags(String paramString)
  {
    if (parseOptionalBooleanAttribute(paramString, REGEX_DEFAULT, false)) {
      j = 1;
    } else {
      j = 0;
    }
    int i = j;
    if (parseOptionalBooleanAttribute(paramString, REGEX_FORCED, false)) {
      i = j | 0x2;
    }
    int j = i;
    if (parseOptionalBooleanAttribute(paramString, REGEX_AUTOSELECT, false)) {
      j = i | 0x4;
    }
    return j;
  }
  
  private static String parseStringAttr(String paramString, Pattern paramPattern, Map<String, String> paramMap)
    throws ParserException
  {
    paramMap = parseOptionalStringAttr(paramString, paramPattern, paramMap);
    if (paramMap != null) {
      return paramMap;
    }
    paramMap = new StringBuilder();
    paramMap.append("Couldn't match ");
    paramMap.append(paramPattern.pattern());
    paramMap.append(" in ");
    paramMap.append(paramString);
    throw new ParserException(paramMap.toString());
  }
  
  @Nullable
  private static DrmInitData.SchemeData parseWidevineSchemeData(String paramString1, String paramString2, Map<String, String> paramMap)
    throws ParserException
  {
    if ("urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed".equals(paramString2))
    {
      paramString1 = parseStringAttr(paramString1, REGEX_URI, paramMap);
      return new DrmInitData.SchemeData(C.WIDEVINE_UUID, "video/mp4", Base64.decode(paramString1.substring(paramString1.indexOf(',')), 0));
    }
    if ("com.widevine".equals(paramString2)) {
      try
      {
        paramString1 = new DrmInitData.SchemeData(C.WIDEVINE_UUID, "hls", paramString1.getBytes("UTF-8"));
        return paramString1;
      }
      catch (UnsupportedEncodingException paramString1)
      {
        throw new ParserException(paramString1);
      }
    }
    return null;
  }
  
  private static String replaceVariableReferences(String paramString, Map<String, String> paramMap)
  {
    paramString = REGEX_VARIABLE_REFERENCE.matcher(paramString);
    StringBuffer localStringBuffer = new StringBuffer();
    while (paramString.find())
    {
      String str = paramString.group(1);
      if (paramMap.containsKey(str)) {
        paramString.appendReplacement(localStringBuffer, Matcher.quoteReplacement((String)paramMap.get(str)));
      }
    }
    paramString.appendTail(localStringBuffer);
    return localStringBuffer.toString();
  }
  
  private static int skipIgnorableWhitespace(BufferedReader paramBufferedReader, boolean paramBoolean, int paramInt)
    throws IOException
  {
    while ((paramInt != -1) && (Character.isWhitespace(paramInt)) && ((paramBoolean) || (!Util.isLinebreak(paramInt)))) {
      paramInt = paramBufferedReader.read();
    }
    return paramInt;
  }
  
  public HlsPlaylist parse(Uri paramUri, InputStream paramInputStream)
    throws IOException
  {
    paramInputStream = new BufferedReader(new InputStreamReader(paramInputStream));
    ArrayDeque localArrayDeque = new ArrayDeque();
    try
    {
      if (checkPlaylistHeader(paramInputStream))
      {
        String str;
        for (;;)
        {
          str = paramInputStream.readLine();
          if (str == null) {
            break label233;
          }
          str = str.trim();
          if (!str.isEmpty())
          {
            if (str.startsWith("#EXT-X-STREAM-INF"))
            {
              localArrayDeque.add(str);
              paramUri = parseMasterPlaylist(new LineIterator(localArrayDeque, paramInputStream), paramUri.toString());
              return paramUri;
            }
            if ((str.startsWith("#EXT-X-TARGETDURATION")) || (str.startsWith("#EXT-X-MEDIA-SEQUENCE")) || (str.startsWith("#EXTINF")) || (str.startsWith("#EXT-X-KEY")) || (str.startsWith("#EXT-X-BYTERANGE")) || (str.equals("#EXT-X-DISCONTINUITY")) || (str.equals("#EXT-X-DISCONTINUITY-SEQUENCE")) || (str.equals("#EXT-X-ENDLIST"))) {
              break;
            }
            localArrayDeque.add(str);
          }
        }
        localArrayDeque.add(str);
        paramUri = parseMediaPlaylist(masterPlaylist, new LineIterator(localArrayDeque, paramInputStream), paramUri.toString());
        return paramUri;
        label233:
        throw new ParserException("Failed to parse the playlist, could not identify any tags.");
      }
      throw new UnrecognizedInputFormatException("Input does not start with the #EXTM3U header.", paramUri);
    }
    finally
    {
      Util.closeQuietly(paramInputStream);
    }
  }
  
  private static class LineIterator
  {
    private final Queue<String> extraLines;
    private String next;
    private final BufferedReader reader;
    
    public LineIterator(Queue<String> paramQueue, BufferedReader paramBufferedReader)
    {
      extraLines = paramQueue;
      reader = paramBufferedReader;
    }
    
    public boolean hasNext()
      throws IOException
    {
      if (next != null) {
        return true;
      }
      if (!extraLines.isEmpty())
      {
        next = ((String)extraLines.poll());
        return true;
      }
      do
      {
        String str = reader.readLine();
        next = str;
        if (str == null) {
          break;
        }
        next = next.trim();
      } while (next.isEmpty());
      return true;
      return false;
    }
    
    public String next()
      throws IOException
    {
      if (hasNext())
      {
        String str = next;
        next = null;
        return str;
      }
      return null;
    }
  }
}
