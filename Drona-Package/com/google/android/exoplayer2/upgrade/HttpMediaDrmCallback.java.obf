package com.google.android.exoplayer2.drm;

import android.annotation.TargetApi;
import android.text.TextUtils;
import com.google.android.exoplayer2.C;
import com.google.android.exoplayer2.upstream.HttpDataSource.Factory;
import com.google.android.exoplayer2.upstream.HttpDataSource.InvalidResponseCodeException;
import com.google.android.exoplayer2.util.Assertions;
import com.google.android.exoplayer2.util.Util;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

@TargetApi(18)
public final class HttpMediaDrmCallback
  implements MediaDrmCallback
{
  private static final int MAX_MANUAL_REDIRECTS = 5;
  private final HttpDataSource.Factory dataSourceFactory;
  private final String defaultLicenseUrl;
  private final boolean forceDefaultLicenseUrl;
  private final Map<String, String> keyRequestProperties;
  
  public HttpMediaDrmCallback(String paramString, HttpDataSource.Factory paramFactory)
  {
    this(paramString, false, paramFactory);
  }
  
  public HttpMediaDrmCallback(String paramString, boolean paramBoolean, HttpDataSource.Factory paramFactory)
  {
    dataSourceFactory = paramFactory;
    defaultLicenseUrl = paramString;
    forceDefaultLicenseUrl = paramBoolean;
    keyRequestProperties = new HashMap();
  }
  
  /* Error */
  private static byte[] executePost(HttpDataSource.Factory paramFactory, String paramString, byte[] paramArrayOfByte, Map<String, String> paramMap)
    throws IOException
  {
    // Byte code:
    //   0: aload_0
    //   1: invokeinterface 53 1 0
    //   6: astore 7
    //   8: aload_3
    //   9: ifnull +62 -> 71
    //   12: aload_3
    //   13: invokeinterface 59 1 0
    //   18: invokeinterface 65 1 0
    //   23: astore_0
    //   24: aload_0
    //   25: invokeinterface 71 1 0
    //   30: ifeq +41 -> 71
    //   33: aload_0
    //   34: invokeinterface 75 1 0
    //   39: checkcast 77	java/util/Map$Entry
    //   42: astore_3
    //   43: aload 7
    //   45: aload_3
    //   46: invokeinterface 80 1 0
    //   51: checkcast 82	java/lang/String
    //   54: aload_3
    //   55: invokeinterface 85 1 0
    //   60: checkcast 82	java/lang/String
    //   63: invokeinterface 91 3 0
    //   68: goto -44 -> 24
    //   71: iconst_0
    //   72: istore 5
    //   74: new 93	com/google/android/exoplayer2/upstream/DataSourceInputStream
    //   77: dup
    //   78: aload 7
    //   80: new 95	com/google/android/exoplayer2/upstream/DataSpec
    //   83: dup
    //   84: aload_1
    //   85: invokestatic 101	android/net/Uri:parse	(Ljava/lang/String;)Landroid/net/Uri;
    //   88: aload_2
    //   89: lconst_0
    //   90: lconst_0
    //   91: ldc2_w 102
    //   94: aconst_null
    //   95: iconst_1
    //   96: invokespecial 106	com/google/android/exoplayer2/upstream/DataSpec:<init>	(Landroid/net/Uri;[BJJJLjava/lang/String;I)V
    //   99: invokespecial 109	com/google/android/exoplayer2/upstream/DataSourceInputStream:<init>	(Lcom/google/android/exoplayer2/upstream/DataSource;Lcom/google/android/exoplayer2/upstream/DataSpec;)V
    //   102: astore_1
    //   103: aload_1
    //   104: invokestatic 115	com/google/android/exoplayer2/util/Util:toByteArray	(Ljava/io/InputStream;)[B
    //   107: astore_0
    //   108: aload_1
    //   109: invokestatic 119	com/google/android/exoplayer2/util/Util:closeQuietly	(Ljava/io/Closeable;)V
    //   112: aload_0
    //   113: areturn
    //   114: astore_0
    //   115: goto +61 -> 176
    //   118: astore_3
    //   119: aload_3
    //   120: getfield 122	com/google/android/exoplayer2/upstream/HttpDataSource$InvalidResponseCodeException:responseCode	I
    //   123: sipush 307
    //   126: if_icmpeq +63 -> 189
    //   129: aload_3
    //   130: getfield 122	com/google/android/exoplayer2/upstream/HttpDataSource$InvalidResponseCodeException:responseCode	I
    //   133: sipush 308
    //   136: if_icmpne +46 -> 182
    //   139: goto +50 -> 189
    //   142: iload 5
    //   144: ifeq +11 -> 155
    //   147: aload_3
    //   148: invokestatic 126	com/google/android/exoplayer2/drm/HttpMediaDrmCallback:getRedirectUrl	(Lcom/google/android/exoplayer2/upstream/HttpDataSource$InvalidResponseCodeException;)Ljava/lang/String;
    //   151: astore_0
    //   152: goto +5 -> 157
    //   155: aconst_null
    //   156: astore_0
    //   157: aload_0
    //   158: ifnull +16 -> 174
    //   161: aload_1
    //   162: invokestatic 119	com/google/android/exoplayer2/util/Util:closeQuietly	(Ljava/io/Closeable;)V
    //   165: aload_0
    //   166: astore_1
    //   167: iload 4
    //   169: istore 5
    //   171: goto -97 -> 74
    //   174: aload_3
    //   175: athrow
    //   176: aload_1
    //   177: invokestatic 119	com/google/android/exoplayer2/util/Util:closeQuietly	(Ljava/io/Closeable;)V
    //   180: aload_0
    //   181: athrow
    //   182: iload 5
    //   184: istore 4
    //   186: goto +29 -> 215
    //   189: iload 5
    //   191: iconst_1
    //   192: iadd
    //   193: istore 6
    //   195: iload 6
    //   197: istore 4
    //   199: iload 5
    //   201: iconst_5
    //   202: if_icmpge +13 -> 215
    //   205: iconst_1
    //   206: istore 5
    //   208: iload 6
    //   210: istore 4
    //   212: goto -70 -> 142
    //   215: iconst_0
    //   216: istore 5
    //   218: goto -76 -> 142
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	221	0	paramFactory	HttpDataSource.Factory
    //   0	221	1	paramString	String
    //   0	221	2	paramArrayOfByte	byte[]
    //   0	221	3	paramMap	Map<String, String>
    //   167	44	4	i	int
    //   72	145	5	j	int
    //   193	16	6	k	int
    //   6	73	7	localHttpDataSource	com.google.android.exoplayer2.upstream.HttpDataSource
    // Exception table:
    //   from	to	target	type
    //   103	108	114	finally
    //   119	139	114	finally
    //   147	152	114	finally
    //   174	176	114	finally
    //   103	108	118	com/google/android/exoplayer2/upstream/HttpDataSource$InvalidResponseCodeException
  }
  
  private static String getRedirectUrl(HttpDataSource.InvalidResponseCodeException paramInvalidResponseCodeException)
  {
    paramInvalidResponseCodeException = headerFields;
    if (paramInvalidResponseCodeException != null)
    {
      paramInvalidResponseCodeException = (List)paramInvalidResponseCodeException.get("Location");
      if ((paramInvalidResponseCodeException != null) && (!paramInvalidResponseCodeException.isEmpty())) {
        return (String)paramInvalidResponseCodeException.get(0);
      }
    }
    return null;
  }
  
  public void clearAllKeyRequestProperties()
  {
    synchronized (keyRequestProperties)
    {
      keyRequestProperties.clear();
      return;
    }
  }
  
  public void clearKeyRequestProperty(String paramString)
  {
    Assertions.checkNotNull(paramString);
    synchronized (keyRequestProperties)
    {
      keyRequestProperties.remove(paramString);
      return;
    }
  }
  
  public byte[] executeKeyRequest(UUID arg1, ExoMediaDrm.KeyRequest paramKeyRequest)
    throws Exception
  {
    String str1 = paramKeyRequest.getLicenseServerUrl();
    String str2;
    if (!forceDefaultLicenseUrl)
    {
      str2 = str1;
      if (!TextUtils.isEmpty(str1)) {}
    }
    else
    {
      str2 = defaultLicenseUrl;
    }
    HashMap localHashMap = new HashMap();
    if (C.PLAYREADY_UUID.equals(???)) {
      str1 = "text/xml";
    } else if (C.CLEARKEY_UUID.equals(???)) {
      str1 = "application/json";
    } else {
      str1 = "application/octet-stream";
    }
    localHashMap.put("Content-Type", str1);
    if (C.PLAYREADY_UUID.equals(???)) {
      localHashMap.put("SOAPAction", "http://schemas.microsoft.com/DRM/2007/03/protocols/AcquireLicense");
    }
    synchronized (keyRequestProperties)
    {
      localHashMap.putAll(keyRequestProperties);
      return executePost(dataSourceFactory, str2, paramKeyRequest.getData(), localHashMap);
    }
  }
  
  public byte[] executeProvisionRequest(UUID paramUUID, ExoMediaDrm.ProvisionRequest paramProvisionRequest)
    throws IOException
  {
    paramUUID = new StringBuilder();
    paramUUID.append(paramProvisionRequest.getDefaultUrl());
    paramUUID.append("&signedRequest=");
    paramUUID.append(Util.fromUtf8Bytes(paramProvisionRequest.getData()));
    paramUUID = paramUUID.toString();
    return executePost(dataSourceFactory, paramUUID, Util.EMPTY_BYTE_ARRAY, null);
  }
  
  public void setKeyRequestProperty(String paramString1, String paramString2)
  {
    Assertions.checkNotNull(paramString1);
    Assertions.checkNotNull(paramString2);
    synchronized (keyRequestProperties)
    {
      keyRequestProperties.put(paramString1, paramString2);
      return;
    }
  }
}
