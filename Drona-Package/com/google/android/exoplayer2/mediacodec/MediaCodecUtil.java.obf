package com.google.android.exoplayer2.mediacodec;

import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.media.MediaCodecInfo.CodecCapabilities;
import android.media.MediaCodecInfo.CodecProfileLevel;
import android.media.MediaCodecList;
import android.text.TextUtils;
import android.util.Pair;
import android.util.SparseIntArray;
import androidx.annotation.Nullable;
import com.google.android.exoplayer2.util.Log;
import com.google.android.exoplayer2.util.MimeTypes;
import com.google.android.exoplayer2.util.Util;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@SuppressLint({"InlinedApi"})
@TargetApi(16)
public final class MediaCodecUtil
{
  private static final SparseIntArray AVC_LEVEL_NUMBER_TO_CONST;
  private static final SparseIntArray AVC_PROFILE_NUMBER_TO_CONST;
  private static final String CODEC_ID_AVC1 = "avc1";
  private static final String CODEC_ID_AVC2 = "avc2";
  private static final String CODEC_ID_HEV1 = "hev1";
  private static final String CODEC_ID_HVC1 = "hvc1";
  private static final String CODEC_ID_MP4A = "mp4a";
  private static final Map<String, Integer> HEVC_CODEC_STRING_TO_PROFILE_LEVEL;
  private static final SparseIntArray MP4A_AUDIO_OBJECT_TYPE_TO_PROFILE;
  private static final Pattern PROFILE_PATTERN = Pattern.compile("^\\D?(\\d+)$");
  private static final RawAudioCodecComparator RAW_AUDIO_CODEC_COMPARATOR = new RawAudioCodecComparator(null);
  private static final String TAG = "MediaCodecUtil";
  private static final HashMap<CodecKey, List<MediaCodecInfo>> decoderInfosCache = new HashMap();
  private static int maxH264DecodableFrameSize = -1;
  
  static
  {
    AVC_PROFILE_NUMBER_TO_CONST = new SparseIntArray();
    AVC_PROFILE_NUMBER_TO_CONST.put(66, 1);
    AVC_PROFILE_NUMBER_TO_CONST.put(77, 2);
    AVC_PROFILE_NUMBER_TO_CONST.put(88, 4);
    AVC_PROFILE_NUMBER_TO_CONST.put(100, 8);
    AVC_PROFILE_NUMBER_TO_CONST.put(110, 16);
    AVC_PROFILE_NUMBER_TO_CONST.put(122, 32);
    AVC_PROFILE_NUMBER_TO_CONST.put(244, 64);
    AVC_LEVEL_NUMBER_TO_CONST = new SparseIntArray();
    AVC_LEVEL_NUMBER_TO_CONST.put(10, 1);
    AVC_LEVEL_NUMBER_TO_CONST.put(11, 4);
    AVC_LEVEL_NUMBER_TO_CONST.put(12, 8);
    AVC_LEVEL_NUMBER_TO_CONST.put(13, 16);
    AVC_LEVEL_NUMBER_TO_CONST.put(20, 32);
    AVC_LEVEL_NUMBER_TO_CONST.put(21, 64);
    AVC_LEVEL_NUMBER_TO_CONST.put(22, 128);
    AVC_LEVEL_NUMBER_TO_CONST.put(30, 256);
    AVC_LEVEL_NUMBER_TO_CONST.put(31, 512);
    AVC_LEVEL_NUMBER_TO_CONST.put(32, 1024);
    AVC_LEVEL_NUMBER_TO_CONST.put(40, 2048);
    AVC_LEVEL_NUMBER_TO_CONST.put(41, 4096);
    AVC_LEVEL_NUMBER_TO_CONST.put(42, 8192);
    AVC_LEVEL_NUMBER_TO_CONST.put(50, 16384);
    AVC_LEVEL_NUMBER_TO_CONST.put(51, 32768);
    AVC_LEVEL_NUMBER_TO_CONST.put(52, 65536);
    HEVC_CODEC_STRING_TO_PROFILE_LEVEL = new HashMap();
    HEVC_CODEC_STRING_TO_PROFILE_LEVEL.put("L30", Integer.valueOf(1));
    HEVC_CODEC_STRING_TO_PROFILE_LEVEL.put("L60", Integer.valueOf(4));
    HEVC_CODEC_STRING_TO_PROFILE_LEVEL.put("L63", Integer.valueOf(16));
    HEVC_CODEC_STRING_TO_PROFILE_LEVEL.put("L90", Integer.valueOf(64));
    HEVC_CODEC_STRING_TO_PROFILE_LEVEL.put("L93", Integer.valueOf(256));
    HEVC_CODEC_STRING_TO_PROFILE_LEVEL.put("L120", Integer.valueOf(1024));
    HEVC_CODEC_STRING_TO_PROFILE_LEVEL.put("L123", Integer.valueOf(4096));
    HEVC_CODEC_STRING_TO_PROFILE_LEVEL.put("L150", Integer.valueOf(16384));
    HEVC_CODEC_STRING_TO_PROFILE_LEVEL.put("L153", Integer.valueOf(65536));
    HEVC_CODEC_STRING_TO_PROFILE_LEVEL.put("L156", Integer.valueOf(262144));
    HEVC_CODEC_STRING_TO_PROFILE_LEVEL.put("L180", Integer.valueOf(1048576));
    HEVC_CODEC_STRING_TO_PROFILE_LEVEL.put("L183", Integer.valueOf(4194304));
    HEVC_CODEC_STRING_TO_PROFILE_LEVEL.put("L186", Integer.valueOf(16777216));
    HEVC_CODEC_STRING_TO_PROFILE_LEVEL.put("H30", Integer.valueOf(2));
    HEVC_CODEC_STRING_TO_PROFILE_LEVEL.put("H60", Integer.valueOf(8));
    HEVC_CODEC_STRING_TO_PROFILE_LEVEL.put("H63", Integer.valueOf(32));
    HEVC_CODEC_STRING_TO_PROFILE_LEVEL.put("H90", Integer.valueOf(128));
    HEVC_CODEC_STRING_TO_PROFILE_LEVEL.put("H93", Integer.valueOf(512));
    HEVC_CODEC_STRING_TO_PROFILE_LEVEL.put("H120", Integer.valueOf(2048));
    HEVC_CODEC_STRING_TO_PROFILE_LEVEL.put("H123", Integer.valueOf(8192));
    HEVC_CODEC_STRING_TO_PROFILE_LEVEL.put("H150", Integer.valueOf(32768));
    HEVC_CODEC_STRING_TO_PROFILE_LEVEL.put("H153", Integer.valueOf(131072));
    HEVC_CODEC_STRING_TO_PROFILE_LEVEL.put("H156", Integer.valueOf(524288));
    HEVC_CODEC_STRING_TO_PROFILE_LEVEL.put("H180", Integer.valueOf(2097152));
    HEVC_CODEC_STRING_TO_PROFILE_LEVEL.put("H183", Integer.valueOf(8388608));
    HEVC_CODEC_STRING_TO_PROFILE_LEVEL.put("H186", Integer.valueOf(33554432));
    MP4A_AUDIO_OBJECT_TYPE_TO_PROFILE = new SparseIntArray();
    MP4A_AUDIO_OBJECT_TYPE_TO_PROFILE.put(1, 1);
    MP4A_AUDIO_OBJECT_TYPE_TO_PROFILE.put(2, 2);
    MP4A_AUDIO_OBJECT_TYPE_TO_PROFILE.put(3, 3);
    MP4A_AUDIO_OBJECT_TYPE_TO_PROFILE.put(4, 4);
    MP4A_AUDIO_OBJECT_TYPE_TO_PROFILE.put(5, 5);
    MP4A_AUDIO_OBJECT_TYPE_TO_PROFILE.put(6, 6);
    MP4A_AUDIO_OBJECT_TYPE_TO_PROFILE.put(17, 17);
    MP4A_AUDIO_OBJECT_TYPE_TO_PROFILE.put(20, 20);
    MP4A_AUDIO_OBJECT_TYPE_TO_PROFILE.put(23, 23);
    MP4A_AUDIO_OBJECT_TYPE_TO_PROFILE.put(29, 29);
    MP4A_AUDIO_OBJECT_TYPE_TO_PROFILE.put(39, 39);
    MP4A_AUDIO_OBJECT_TYPE_TO_PROFILE.put(42, 42);
  }
  
  private MediaCodecUtil() {}
  
  private static void applyWorkarounds(String paramString, List<MediaCodecInfo> paramList)
  {
    if ("audio/raw".equals(paramString)) {
      Collections.sort(paramList, RAW_AUDIO_CODEC_COMPARATOR);
    }
  }
  
  private static int avcLevelToMaxFrameSize(int paramInt)
  {
    switch (paramInt)
    {
    default: 
      return -1;
    case 32768: 
    case 65536: 
      return 9437184;
    case 16384: 
      return 5652480;
    case 8192: 
      return 2228224;
    case 2048: 
    case 4096: 
      return 2097152;
    case 1024: 
      return 1310720;
    case 512: 
      return 921600;
    case 128: 
    case 256: 
      return 414720;
    case 64: 
      return 202752;
    case 8: 
    case 16: 
    case 32: 
      return 101376;
    }
    return 25344;
  }
  
  private static boolean codecNeedsDisableAdaptationWorkaround(String paramString)
  {
    return (Util.SDK_INT <= 22) && (("ODROID-XU3".equals(Util.MODEL)) || ("Nexus 10".equals(Util.MODEL))) && (("OMX.Exynos.AVC.Decoder".equals(paramString)) || ("OMX.Exynos.AVC.Decoder.secure".equals(paramString)));
  }
  
  @Nullable
  private static Pair<Integer, Integer> getAacCodecProfileAndLevel(String paramString, String[] paramArrayOfString)
  {
    if (paramArrayOfString.length != 3)
    {
      paramArrayOfString = new StringBuilder();
      paramArrayOfString.append("Ignoring malformed MP4A codec string: ");
      paramArrayOfString.append(paramString);
      Log.w("MediaCodecUtil", paramArrayOfString.toString());
      return null;
    }
    try
    {
      if (!"audio/mp4a-latm".equals(MimeTypes.getMimeTypeFromMp4ObjectType(Integer.parseInt(paramArrayOfString[1], 16)))) {
        break label126;
      }
      int i = Integer.parseInt(paramArrayOfString[2]);
      i = MP4A_AUDIO_OBJECT_TYPE_TO_PROFILE.get(i, -1);
      if (i == -1) {
        break label126;
      }
      paramArrayOfString = new Pair(Integer.valueOf(i), Integer.valueOf(0));
      return paramArrayOfString;
    }
    catch (NumberFormatException paramArrayOfString)
    {
      for (;;) {}
    }
    paramArrayOfString = new StringBuilder();
    paramArrayOfString.append("Ignoring malformed MP4A codec string: ");
    paramArrayOfString.append(paramString);
    Log.w("MediaCodecUtil", paramArrayOfString.toString());
    label126:
    return null;
  }
  
  private static Pair<Integer, Integer> getAvcProfileAndLevel(String paramString, String[] paramArrayOfString)
  {
    if (paramArrayOfString.length < 2)
    {
      paramArrayOfString = new StringBuilder();
      paramArrayOfString.append("Ignoring malformed AVC codec string: ");
      paramArrayOfString.append(paramString);
      Log.w("MediaCodecUtil", paramArrayOfString.toString());
      return null;
    }
    try
    {
      Integer localInteger;
      if (paramArrayOfString[1].length() == 6)
      {
        i = Integer.parseInt(paramArrayOfString[1].substring(0, 2), 16);
        paramArrayOfString = Integer.valueOf(Integer.parseInt(paramArrayOfString[1].substring(4), 16));
        localInteger = Integer.valueOf(i);
        paramString = localInteger;
      }
      else
      {
        if (paramArrayOfString.length < 3) {
          break label238;
        }
        localInteger = Integer.valueOf(Integer.parseInt(paramArrayOfString[1]));
        paramArrayOfString = Integer.valueOf(Integer.parseInt(paramArrayOfString[2]));
        paramString = localInteger;
      }
      int i = AVC_PROFILE_NUMBER_TO_CONST.get(paramString.intValue(), -1);
      if (i == -1)
      {
        paramArrayOfString = new StringBuilder();
        paramArrayOfString.append("Unknown AVC profile: ");
        paramArrayOfString.append(paramString);
        Log.w("MediaCodecUtil", paramArrayOfString.toString());
        return null;
      }
      int j = AVC_LEVEL_NUMBER_TO_CONST.get(paramArrayOfString.intValue(), -1);
      if (j == -1)
      {
        paramString = new StringBuilder();
        paramString.append("Unknown AVC level: ");
        paramString.append(paramArrayOfString);
        Log.w("MediaCodecUtil", paramString.toString());
        return null;
      }
      return new Pair(Integer.valueOf(i), Integer.valueOf(j));
      label238:
      paramArrayOfString = new StringBuilder();
      paramArrayOfString.append("Ignoring malformed AVC codec string: ");
      paramArrayOfString.append(paramString);
      Log.w("MediaCodecUtil", paramArrayOfString.toString());
      return null;
    }
    catch (NumberFormatException paramArrayOfString)
    {
      for (;;) {}
    }
    paramArrayOfString = new StringBuilder();
    paramArrayOfString.append("Ignoring malformed AVC codec string: ");
    paramArrayOfString.append(paramString);
    Log.w("MediaCodecUtil", paramArrayOfString.toString());
    return null;
  }
  
  @Nullable
  public static Pair<Integer, Integer> getCodecProfileAndLevel(String paramString)
  {
    if (paramString == null) {
      return null;
    }
    String[] arrayOfString = paramString.split("\\.");
    int i = 0;
    String str = arrayOfString[0];
    switch (str.hashCode())
    {
    default: 
      break;
    case 3356560: 
      if (str.equals("mp4a")) {
        i = 4;
      }
      break;
    case 3214780: 
      if (str.equals("hvc1")) {
        i = 1;
      }
      break;
    case 3199032: 
      if (!str.equals("hev1")) {
        break;
      }
      break;
    case 3006244: 
      if (str.equals("avc2")) {
        i = 3;
      }
      break;
    case 3006243: 
      if (str.equals("avc1")) {
        i = 2;
      }
      break;
    }
    i = -1;
    switch (i)
    {
    default: 
      return null;
    case 4: 
      return getAacCodecProfileAndLevel(paramString, arrayOfString);
    case 2: 
    case 3: 
      return getAvcProfileAndLevel(paramString, arrayOfString);
    }
    return getHevcProfileAndLevel(paramString, arrayOfString);
  }
  
  @Nullable
  public static MediaCodecInfo getDecoderInfo(String paramString, boolean paramBoolean)
    throws MediaCodecUtil.DecoderQueryException
  {
    paramString = getDecoderInfos(paramString, paramBoolean);
    if (paramString.isEmpty()) {
      return null;
    }
    return (MediaCodecInfo)paramString.get(0);
  }
  
  public static List<MediaCodecInfo> getDecoderInfos(String paramString, boolean paramBoolean)
    throws MediaCodecUtil.DecoderQueryException
  {
    try
    {
      CodecKey localCodecKey = new CodecKey(paramString, paramBoolean);
      Object localObject1 = (List)decoderInfosCache.get(localCodecKey);
      if (localObject1 != null) {
        return localObject1;
      }
      if (Util.SDK_INT >= 21) {
        localObject1 = new MediaCodecListCompatV21(paramBoolean);
      } else {
        localObject1 = new MediaCodecListCompatV16(null);
      }
      ArrayList localArrayList2 = getDecoderInfosInternal(localCodecKey, (MediaCodecListCompat)localObject1, paramString);
      Object localObject2 = localObject1;
      ArrayList localArrayList1 = localArrayList2;
      if (paramBoolean)
      {
        localObject2 = localObject1;
        localArrayList1 = localArrayList2;
        if (localArrayList2.isEmpty())
        {
          localObject2 = localObject1;
          localArrayList1 = localArrayList2;
          if (21 <= Util.SDK_INT)
          {
            localObject2 = localObject1;
            localArrayList1 = localArrayList2;
            if (Util.SDK_INT <= 23)
            {
              localObject1 = new MediaCodecListCompatV16(null);
              localArrayList2 = getDecoderInfosInternal(localCodecKey, (MediaCodecListCompat)localObject1, paramString);
              localObject2 = localObject1;
              localArrayList1 = localArrayList2;
              if (!localArrayList2.isEmpty())
              {
                localObject2 = new StringBuilder();
                ((StringBuilder)localObject2).append("MediaCodecList API didn't list secure decoder for: ");
                ((StringBuilder)localObject2).append(paramString);
                ((StringBuilder)localObject2).append(". Assuming: ");
                ((StringBuilder)localObject2).append(get0name);
                Log.w("MediaCodecUtil", ((StringBuilder)localObject2).toString());
                localArrayList1 = localArrayList2;
                localObject2 = localObject1;
              }
            }
          }
        }
      }
      if ("audio/eac3-joc".equals(paramString)) {
        localArrayList1.addAll(getDecoderInfosInternal(new CodecKey("audio/eac3", secure), (MediaCodecListCompat)localObject2, paramString));
      }
      applyWorkarounds(paramString, localArrayList1);
      paramString = Collections.unmodifiableList(localArrayList1);
      decoderInfosCache.put(localCodecKey, paramString);
      return paramString;
    }
    finally {}
  }
  
  private static ArrayList<MediaCodecInfo> getDecoderInfosInternal(CodecKey paramCodecKey, MediaCodecListCompat paramMediaCodecListCompat, String paramString)
    throws MediaCodecUtil.DecoderQueryException
  {
    label418:
    label426:
    for (;;)
    {
      try
      {
        ArrayList localArrayList = new ArrayList();
        String str2 = mimeType;
        int i = paramMediaCodecListCompat.getCodecCount();
        boolean bool1 = paramMediaCodecListCompat.secureDecodersExplicit();
        int k = 0;
        if (k < i)
        {
          android.media.MediaCodecInfo localMediaCodecInfo = paramMediaCodecListCompat.getCodecInfoAt(k);
          String str1 = localMediaCodecInfo.getName();
          int j = i;
          if (isCodecUsableDecoder(localMediaCodecInfo, str1, bool1, paramString))
          {
            String[] arrayOfString = localMediaCodecInfo.getSupportedTypes();
            int n = arrayOfString.length;
            int m = 0;
            j = i;
            if (m < n)
            {
              String str3 = arrayOfString[m];
              boolean bool2 = str3.equalsIgnoreCase(str2);
              if (bool2)
              {
                try
                {
                  MediaCodecInfo.CodecCapabilities localCodecCapabilities = localMediaCodecInfo.getCapabilitiesForType(str3);
                  bool2 = paramMediaCodecListCompat.isSecurePlaybackSupported(str2, localCodecCapabilities);
                  boolean bool3 = codecNeedsDisableAdaptationWorkaround(str1);
                  if (!bool1) {
                    break label426;
                  }
                  StringBuilder localStringBuilder2;
                  if (Util.SDK_INT > 23) {
                    continue;
                  }
                }
                catch (Exception localException1)
                {
                  try
                  {
                    if (secure == bool2) {
                      break label418;
                    }
                    if ((!bool1) && (!secure))
                    {
                      break label418;
                      localArrayList.add(MediaCodecInfo.newInstance(str1, str2, localCodecCapabilities, bool3, false));
                      continue;
                    }
                    if ((bool1) || (!bool2)) {
                      continue;
                    }
                    localStringBuilder2 = new StringBuilder();
                    localStringBuilder2.append(str1);
                    localStringBuilder2.append(".secure");
                    localArrayList.add(MediaCodecInfo.newInstance(localStringBuilder2.toString(), str2, localCodecCapabilities, bool3, true));
                    return localArrayList;
                  }
                  catch (Exception localException2)
                  {
                    StringBuilder localStringBuilder1;
                    continue;
                  }
                  localException1 = localException1;
                }
                if (!localArrayList.isEmpty())
                {
                  localStringBuilder1 = new StringBuilder();
                  localStringBuilder1.append("Skipping codec ");
                  localStringBuilder1.append(str1);
                  localStringBuilder1.append(" (failed to query capabilities)");
                  Log.e("MediaCodecUtil", localStringBuilder1.toString());
                }
                else
                {
                  paramCodecKey = new StringBuilder();
                  paramCodecKey.append("Failed to query codec ");
                  paramCodecKey.append(str1);
                  paramCodecKey.append(" (");
                  paramCodecKey.append(str3);
                  paramCodecKey.append(")");
                  Log.e("MediaCodecUtil", paramCodecKey.toString());
                  throw localStringBuilder1;
                }
              }
              m += 1;
              continue;
            }
          }
          k += 1;
          i = j;
          continue;
        }
        return localArrayList;
      }
      catch (Exception paramCodecKey)
      {
        throw new DecoderQueryException(paramCodecKey, null);
      }
    }
  }
  
  private static Pair<Integer, Integer> getHevcProfileAndLevel(String paramString, String[] paramArrayOfString)
  {
    if (paramArrayOfString.length < 4)
    {
      paramArrayOfString = new StringBuilder();
      paramArrayOfString.append("Ignoring malformed HEVC codec string: ");
      paramArrayOfString.append(paramString);
      Log.w("MediaCodecUtil", paramArrayOfString.toString());
      return null;
    }
    Matcher localMatcher = PROFILE_PATTERN.matcher(paramArrayOfString[1]);
    if (!localMatcher.matches())
    {
      paramArrayOfString = new StringBuilder();
      paramArrayOfString.append("Ignoring malformed HEVC codec string: ");
      paramArrayOfString.append(paramString);
      Log.w("MediaCodecUtil", paramArrayOfString.toString());
      return null;
    }
    paramString = localMatcher.group(1);
    int i;
    if ("1".equals(paramString))
    {
      i = 1;
    }
    else
    {
      if (!"2".equals(paramString)) {
        break label191;
      }
      i = 2;
    }
    paramString = (Integer)HEVC_CODEC_STRING_TO_PROFILE_LEVEL.get(paramArrayOfString[3]);
    if (paramString == null)
    {
      paramString = new StringBuilder();
      paramString.append("Unknown HEVC level string: ");
      paramString.append(localMatcher.group(1));
      Log.w("MediaCodecUtil", paramString.toString());
      return null;
    }
    return new Pair(Integer.valueOf(i), paramString);
    label191:
    paramArrayOfString = new StringBuilder();
    paramArrayOfString.append("Unknown HEVC profile string: ");
    paramArrayOfString.append(paramString);
    Log.w("MediaCodecUtil", paramArrayOfString.toString());
    return null;
  }
  
  @Nullable
  public static MediaCodecInfo getPassthroughDecoderInfo()
    throws MediaCodecUtil.DecoderQueryException
  {
    MediaCodecInfo localMediaCodecInfo = getDecoderInfo("audio/raw", false);
    if (localMediaCodecInfo == null) {
      return null;
    }
    return MediaCodecInfo.newPassthroughInstance(name);
  }
  
  private static boolean isCodecUsableDecoder(android.media.MediaCodecInfo paramMediaCodecInfo, String paramString1, boolean paramBoolean, String paramString2)
  {
    if (!paramMediaCodecInfo.isEncoder())
    {
      if ((!paramBoolean) && (paramString1.endsWith(".secure"))) {
        return false;
      }
      if ((Util.SDK_INT < 21) && (("CIPAACDecoder".equals(paramString1)) || ("CIPMP3Decoder".equals(paramString1)) || ("CIPVorbisDecoder".equals(paramString1)) || ("CIPAMRNBDecoder".equals(paramString1)) || ("AACDecoder".equals(paramString1)) || ("MP3Decoder".equals(paramString1)))) {
        return false;
      }
      if ((Util.SDK_INT < 18) && ("OMX.SEC.MP3.Decoder".equals(paramString1))) {
        return false;
      }
      if (("OMX.SEC.mp3.dec".equals(paramString1)) && ("SM-T530".equals(Util.MODEL))) {
        return false;
      }
      if ((Util.SDK_INT < 18) && ("OMX.MTK.AUDIO.DECODER.AAC".equals(paramString1)) && (("a70".equals(Util.DEVICE)) || (("Xiaomi".equals(Util.MANUFACTURER)) && (Util.DEVICE.startsWith("HM"))))) {
        return false;
      }
      if ((Util.SDK_INT == 16) && ("OMX.qcom.audio.decoder.mp3".equals(paramString1)) && (("dlxu".equals(Util.DEVICE)) || ("protou".equals(Util.DEVICE)) || ("ville".equals(Util.DEVICE)) || ("villeplus".equals(Util.DEVICE)) || ("villec2".equals(Util.DEVICE)) || (Util.DEVICE.startsWith("gee")) || ("C6602".equals(Util.DEVICE)) || ("C6603".equals(Util.DEVICE)) || ("C6606".equals(Util.DEVICE)) || ("C6616".equals(Util.DEVICE)) || ("L36h".equals(Util.DEVICE)) || ("SO-02E".equals(Util.DEVICE)))) {
        return false;
      }
      if ((Util.SDK_INT == 16) && ("OMX.qcom.audio.decoder.aac".equals(paramString1)) && (("C1504".equals(Util.DEVICE)) || ("C1505".equals(Util.DEVICE)) || ("C1604".equals(Util.DEVICE)) || ("C1605".equals(Util.DEVICE)))) {
        return false;
      }
      if ((Util.SDK_INT < 24) && (("OMX.SEC.aac.dec".equals(paramString1)) || ("OMX.Exynos.AAC.Decoder".equals(paramString1))) && ("samsung".equals(Util.MANUFACTURER)) && ((Util.DEVICE.startsWith("zeroflte")) || (Util.DEVICE.startsWith("zerolte")) || (Util.DEVICE.startsWith("zenlte")) || ("SC-05G".equals(Util.DEVICE)) || ("marinelteatt".equals(Util.DEVICE)) || ("404SC".equals(Util.DEVICE)) || ("SC-04G".equals(Util.DEVICE)) || ("SCV31".equals(Util.DEVICE)))) {
        return false;
      }
      if ((Util.SDK_INT <= 19) && ("OMX.SEC.vp8.dec".equals(paramString1)) && ("samsung".equals(Util.MANUFACTURER)) && ((Util.DEVICE.startsWith("d2")) || (Util.DEVICE.startsWith("serrano")) || (Util.DEVICE.startsWith("jflte")) || (Util.DEVICE.startsWith("santos")) || (Util.DEVICE.startsWith("t0")))) {
        return false;
      }
      if ((Util.SDK_INT <= 19) && (Util.DEVICE.startsWith("jflte")) && ("OMX.qcom.video.decoder.vp8".equals(paramString1))) {
        return false;
      }
      return (!"audio/eac3-joc".equals(paramString2)) || (!"OMX.MTK.AUDIO.DECODER.DSPAC3".equals(paramString1));
    }
    return false;
  }
  
  public static int maxH264DecodableFrameSize()
    throws MediaCodecUtil.DecoderQueryException
  {
    if (maxH264DecodableFrameSize == -1)
    {
      int i = 0;
      int j = 0;
      Object localObject = getDecoderInfo("video/avc", false);
      if (localObject != null)
      {
        localObject = ((MediaCodecInfo)localObject).getProfileLevels();
        int k = localObject.length;
        i = 0;
        while (j < k)
        {
          i = Math.max(avcLevelToMaxFrameSize(level), i);
          j += 1;
        }
        if (Util.SDK_INT >= 21) {
          j = 345600;
        } else {
          j = 172800;
        }
        i = Math.max(i, j);
      }
      maxH264DecodableFrameSize = i;
    }
    return maxH264DecodableFrameSize;
  }
  
  public static void warmDecoderInfoCache(String paramString, boolean paramBoolean)
  {
    try
    {
      getDecoderInfos(paramString, paramBoolean);
      return;
    }
    catch (DecoderQueryException paramString)
    {
      Log.e("MediaCodecUtil", "Codec warming failed", paramString);
    }
  }
  
  private static final class CodecKey
  {
    public final String mimeType;
    public final boolean secure;
    
    public CodecKey(String paramString, boolean paramBoolean)
    {
      mimeType = paramString;
      secure = paramBoolean;
    }
    
    public boolean equals(@Nullable Object paramObject)
    {
      if (this == paramObject) {
        return true;
      }
      if (paramObject != null)
      {
        if (paramObject.getClass() != CodecKey.class) {
          return false;
        }
        paramObject = (CodecKey)paramObject;
        return (TextUtils.equals(mimeType, mimeType)) && (secure == secure);
      }
      return false;
    }
    
    public int hashCode()
    {
      int i;
      if (mimeType == null) {
        i = 0;
      } else {
        i = mimeType.hashCode();
      }
      int j;
      if (secure) {
        j = 1231;
      } else {
        j = 1237;
      }
      return (i + 31) * 31 + j;
    }
  }
  
  public static class DecoderQueryException
    extends Exception
  {
    private DecoderQueryException(Throwable paramThrowable)
    {
      super(paramThrowable);
    }
  }
  
  private static abstract interface MediaCodecListCompat
  {
    public abstract int getCodecCount();
    
    public abstract android.media.MediaCodecInfo getCodecInfoAt(int paramInt);
    
    public abstract boolean isSecurePlaybackSupported(String paramString, MediaCodecInfo.CodecCapabilities paramCodecCapabilities);
    
    public abstract boolean secureDecodersExplicit();
  }
  
  private static final class MediaCodecListCompatV16
    implements MediaCodecUtil.MediaCodecListCompat
  {
    private MediaCodecListCompatV16() {}
    
    public int getCodecCount()
    {
      return MediaCodecList.getCodecCount();
    }
    
    public android.media.MediaCodecInfo getCodecInfoAt(int paramInt)
    {
      return MediaCodecList.getCodecInfoAt(paramInt);
    }
    
    public boolean isSecurePlaybackSupported(String paramString, MediaCodecInfo.CodecCapabilities paramCodecCapabilities)
    {
      return "video/avc".equals(paramString);
    }
    
    public boolean secureDecodersExplicit()
    {
      return false;
    }
  }
  
  @TargetApi(21)
  private static final class MediaCodecListCompatV21
    implements MediaCodecUtil.MediaCodecListCompat
  {
    private final int codecKind;
    private android.media.MediaCodecInfo[] mediaCodecInfos;
    
    public MediaCodecListCompatV21(boolean paramBoolean) {}
    
    private void ensureMediaCodecInfosInitialized()
    {
      if (mediaCodecInfos == null) {
        mediaCodecInfos = new MediaCodecList(codecKind).getCodecInfos();
      }
    }
    
    public int getCodecCount()
    {
      ensureMediaCodecInfosInitialized();
      return mediaCodecInfos.length;
    }
    
    public android.media.MediaCodecInfo getCodecInfoAt(int paramInt)
    {
      ensureMediaCodecInfosInitialized();
      return mediaCodecInfos[paramInt];
    }
    
    public boolean isSecurePlaybackSupported(String paramString, MediaCodecInfo.CodecCapabilities paramCodecCapabilities)
    {
      return paramCodecCapabilities.isFeatureSupported("secure-playback");
    }
    
    public boolean secureDecodersExplicit()
    {
      return true;
    }
  }
  
  private static final class RawAudioCodecComparator
    implements Comparator<MediaCodecInfo>
  {
    private RawAudioCodecComparator() {}
    
    private static int scoreMediaCodecInfo(MediaCodecInfo paramMediaCodecInfo)
    {
      paramMediaCodecInfo = name;
      if ((!paramMediaCodecInfo.startsWith("OMX.google")) && (!paramMediaCodecInfo.startsWith("c2.android")))
      {
        if ((Util.SDK_INT < 26) && (paramMediaCodecInfo.equals("OMX.MTK.AUDIO.DECODER.RAW"))) {
          return 1;
        }
        return 0;
      }
      return -1;
    }
    
    public int compare(MediaCodecInfo paramMediaCodecInfo1, MediaCodecInfo paramMediaCodecInfo2)
    {
      return scoreMediaCodecInfo(paramMediaCodecInfo1) - scoreMediaCodecInfo(paramMediaCodecInfo2);
    }
  }
}
