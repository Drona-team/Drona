package com.google.android.gms.iid;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.util.Log;
import androidx.annotation.GuardedBy;
import androidx.annotation.Nullable;
import androidx.collection.ArrayMap;
import androidx.core.content.ContextCompat;
import com.google.android.gms.common.util.VisibleForTesting;
import java.io.File;
import java.io.IOException;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public final class zzak
{
  private SharedPreferences zzde;
  private final zzn zzdf;
  @GuardedBy("this")
  private final Map<String, zzo> zzdg = new ArrayMap();
  private Context zzl;
  
  public zzak(Context paramContext)
  {
    this(paramContext, new zzn());
  }
  
  @VisibleForTesting
  private zzak(Context paramContext, zzn paramZzn)
  {
    zzl = paramContext;
    zzde = paramContext.getSharedPreferences("com.google.android.gms.appid", 0);
    zzdf = paramZzn;
    paramContext = new File(ContextCompat.getNoBackupFilesDir(zzl), "com.google.android.gms.appid-no-backup");
    if (!paramContext.exists()) {
      try
      {
        if ((paramContext.createNewFile()) && (!isEmpty()))
        {
          Log.i("InstanceID/Store", "App restored, clearing state");
          InstanceIDListenerService.zzd(zzl, this);
        }
        return;
      }
      catch (IOException paramContext)
      {
        if (Log.isLoggable("InstanceID/Store", 3))
        {
          paramContext = String.valueOf(paramContext.getMessage());
          if (paramContext.length() != 0) {
            paramContext = "Error creating file in no backup dir: ".concat(paramContext);
          } else {
            paramContext = new String("Error creating file in no backup dir: ");
          }
          Log.d("InstanceID/Store", paramContext);
        }
      }
    }
  }
  
  private static String zzd(String paramString1, String paramString2, String paramString3)
  {
    StringBuilder localStringBuilder = new StringBuilder(String.valueOf(paramString1).length() + 4 + String.valueOf(paramString2).length() + String.valueOf(paramString3).length());
    localStringBuilder.append(paramString1);
    localStringBuilder.append("|T|");
    localStringBuilder.append(paramString2);
    localStringBuilder.append("|");
    localStringBuilder.append(paramString3);
    return localStringBuilder.toString();
  }
  
  private static String zze(String paramString1, String paramString2, String paramString3)
  {
    StringBuilder localStringBuilder = new StringBuilder(String.valueOf(paramString1).length() + 14 + String.valueOf(paramString2).length() + String.valueOf(paramString3).length());
    localStringBuilder.append(paramString1);
    localStringBuilder.append("|T-timestamp|");
    localStringBuilder.append(paramString2);
    localStringBuilder.append("|");
    localStringBuilder.append(paramString3);
    return localStringBuilder.toString();
  }
  
  static String zzh(String paramString1, String paramString2)
  {
    StringBuilder localStringBuilder = new StringBuilder(String.valueOf(paramString1).length() + 3 + String.valueOf(paramString2).length());
    localStringBuilder.append(paramString1);
    localStringBuilder.append("|S|");
    localStringBuilder.append(paramString2);
    return localStringBuilder.toString();
  }
  
  @Nullable
  final String get(String paramString)
  {
    try
    {
      paramString = zzde.getString(paramString, null);
      return paramString;
    }
    finally
    {
      paramString = finally;
      throw paramString;
    }
  }
  
  public final boolean isEmpty()
  {
    return zzde.getAll().isEmpty();
  }
  
  public final void zzd(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5)
  {
    try
    {
      String str = zzd(paramString1, paramString2, paramString3);
      paramString1 = zze(paramString1, paramString2, paramString3);
      paramString2 = zzde.edit();
      paramString2.putString(str, paramString4);
      paramString2.putLong(paramString1, System.currentTimeMillis());
      paramString2.putString("appVersion", paramString5);
      paramString2.commit();
      return;
    }
    finally
    {
      paramString1 = finally;
      throw paramString1;
    }
  }
  
  @Nullable
  public final String zzf(String paramString1, String paramString2, String paramString3)
  {
    try
    {
      paramString1 = zzd(paramString1, paramString2, paramString3);
      paramString1 = zzde.getString(paramString1, null);
      return paramString1;
    }
    finally
    {
      paramString1 = finally;
      throw paramString1;
    }
  }
  
  final long zzg(String paramString1, String paramString2, String paramString3)
  {
    try
    {
      paramString1 = zze(paramString1, paramString2, paramString3);
      long l = zzde.getLong(paramString1, -1L);
      return l;
    }
    finally
    {
      paramString1 = finally;
      throw paramString1;
    }
  }
  
  public final void zzh(String paramString1, String paramString2, String paramString3)
  {
    try
    {
      SharedPreferences.Editor localEditor = zzde.edit();
      localEditor.remove(zzd(paramString1, paramString2, paramString3));
      localEditor.remove(zze(paramString1, paramString2, paramString3));
      localEditor.commit();
      return;
    }
    finally
    {
      paramString1 = finally;
      throw paramString1;
    }
  }
  
  public final void zzi(String paramString)
  {
    try
    {
      SharedPreferences.Editor localEditor = zzde.edit();
      Iterator localIterator = zzde.getAll().keySet().iterator();
      while (localIterator.hasNext())
      {
        String str = (String)localIterator.next();
        if (str.startsWith(paramString)) {
          localEditor.remove(str);
        }
      }
      localEditor.commit();
      return;
    }
    finally {}
  }
  
  public final zzo zzj(String paramString)
  {
    for (;;)
    {
      zzo localZzo;
      try
      {
        localZzo = (zzo)zzdg.get(paramString);
        if (localZzo != null) {
          return localZzo;
        }
      }
      finally {}
      try
      {
        localZzo = zzdf.zze(zzl, paramString);
      }
      catch (zzp localZzp) {}
    }
    Log.w("InstanceID/Store", "Stored data is corrupt, generating new identity");
    InstanceIDListenerService.zzd(zzl, this);
    localZzo = zzdf.zzf(zzl, paramString);
    zzdg.put(paramString, localZzo);
    return localZzo;
  }
  
  final void zzk(String paramString)
  {
    try
    {
      zzdg.remove(paramString);
      zzn.zzg(zzl, paramString);
      zzi(String.valueOf(paramString).concat("|"));
      return;
    }
    finally {}
  }
  
  public final void zzz()
  {
    try
    {
      zzdg.clear();
      zzn.zzi(zzl);
      zzde.edit().clear().commit();
      return;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
}
