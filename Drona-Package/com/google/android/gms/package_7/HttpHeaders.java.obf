package com.google.android.gms.iid;

import android.content.ComponentName;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.Bundle;
import android.os.Looper;
import android.os.Message;
import android.os.Messenger;
import android.util.Log;
import android.util.SparseArray;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.stats.ConnectionTracker;
import com.google.android.gms.internal.gcm.zzj;
import java.util.ArrayDeque;
import java.util.Iterator;
import java.util.Queue;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.annotation.concurrent.GuardedBy;

final class zzt
  implements ServiceConnection
{
  @GuardedBy("this")
  int state = 0;
  final Messenger zzch = new Messenger(new zzj(Looper.getMainLooper(), new zzu(this)));
  zzy zzci;
  @GuardedBy("this")
  final Queue<zzz<?>> zzcj = new ArrayDeque();
  @GuardedBy("this")
  final SparseArray<zzz<?>> zzck = new SparseArray();
  
  private zzt(zzr paramZzr) {}
  
  private final void zzt()
  {
    zzr.zze(zzcl).execute(new zzw(this));
  }
  
  /* Error */
  public final void onServiceConnected(ComponentName paramComponentName, android.os.IBinder paramIBinder)
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: ldc 91
    //   4: iconst_2
    //   5: invokestatic 97	android/util/Log:isLoggable	(Ljava/lang/String;I)Z
    //   8: ifeq +11 -> 19
    //   11: ldc 91
    //   13: ldc 99
    //   15: invokestatic 103	android/util/Log:v	(Ljava/lang/String;Ljava/lang/String;)I
    //   18: pop
    //   19: aload_2
    //   20: ifnonnull +13 -> 33
    //   23: aload_0
    //   24: iconst_0
    //   25: ldc 105
    //   27: invokevirtual 109	com/google/android/gms/iid/zzt:zzd	(ILjava/lang/String;)V
    //   30: aload_0
    //   31: monitorexit
    //   32: return
    //   33: aload_0
    //   34: new 111	com/google/android/gms/iid/zzy
    //   37: dup
    //   38: aload_2
    //   39: invokespecial 114	com/google/android/gms/iid/zzy:<init>	(Landroid/os/IBinder;)V
    //   42: putfield 116	com/google/android/gms/iid/zzt:zzci	Lcom/google/android/gms/iid/zzy;
    //   45: aload_0
    //   46: iconst_2
    //   47: putfield 32	com/google/android/gms/iid/zzt:state	I
    //   50: aload_0
    //   51: invokespecial 118	com/google/android/gms/iid/zzt:zzt	()V
    //   54: aload_0
    //   55: monitorexit
    //   56: return
    //   57: astore_1
    //   58: aload_0
    //   59: iconst_0
    //   60: aload_1
    //   61: invokevirtual 122	android/os/RemoteException:getMessage	()Ljava/lang/String;
    //   64: invokevirtual 109	com/google/android/gms/iid/zzt:zzd	(ILjava/lang/String;)V
    //   67: aload_0
    //   68: monitorexit
    //   69: return
    //   70: astore_1
    //   71: aload_0
    //   72: monitorexit
    //   73: aload_1
    //   74: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	75	0	this	zzt
    //   0	75	1	paramComponentName	ComponentName
    //   0	75	2	paramIBinder	android.os.IBinder
    // Exception table:
    //   from	to	target	type
    //   33	45	57	android/os/RemoteException
    //   2	19	70	finally
    //   23	30	70	finally
    //   33	45	70	finally
    //   45	54	70	finally
    //   58	67	70	finally
  }
  
  public final void onServiceDisconnected(ComponentName paramComponentName)
  {
    try
    {
      if (Log.isLoggable("MessengerIpcClient", 2)) {
        Log.v("MessengerIpcClient", "Service disconnected");
      }
      zzd(2, "Service disconnected");
      return;
    }
    finally {}
  }
  
  final void zzd(int paramInt, String paramString)
  {
    for (;;)
    {
      try
      {
        Object localObject;
        if (Log.isLoggable("MessengerIpcClient", 3))
        {
          localObject = String.valueOf(paramString);
          if (((String)localObject).length() != 0) {
            localObject = "Disconnected: ".concat((String)localObject);
          } else {
            localObject = new String("Disconnected: ");
          }
          Log.d("MessengerIpcClient", (String)localObject);
        }
        switch (state)
        {
        case 4: 
          continue;
          return;
        case 3: 
          state = 4;
          return;
        case 1: 
        case 2: 
          if (Log.isLoggable("MessengerIpcClient", 2)) {
            Log.v("MessengerIpcClient", "Unbinding service");
          }
          state = 4;
          ConnectionTracker.getInstance().unbindService(zzr.zzd(zzcl), this);
          paramString = new zzaa(paramInt, paramString);
          localObject = zzcj.iterator();
          if (((Iterator)localObject).hasNext())
          {
            ((zzz)((Iterator)localObject).next()).zzd(paramString);
          }
          else
          {
            zzcj.clear();
            paramInt = 0;
            if (paramInt < zzck.size())
            {
              ((zzz)zzck.valueAt(paramInt)).zzd(paramString);
              paramInt += 1;
            }
            else
            {
              zzck.clear();
              return;
            }
          }
          break;
        case 0: 
          throw new IllegalStateException();
          paramInt = state;
          paramString = new StringBuilder(26);
          paramString.append("Unknown state: ");
          paramString.append(paramInt);
          throw new IllegalStateException(paramString.toString());
        }
      }
      finally {}
    }
  }
  
  final boolean zzd(Message paramMessage)
  {
    int i = arg1;
    Object localObject;
    if (Log.isLoggable("MessengerIpcClient", 3))
    {
      localObject = new StringBuilder(41);
      ((StringBuilder)localObject).append("Received response to request: ");
      ((StringBuilder)localObject).append(i);
      Log.d("MessengerIpcClient", ((StringBuilder)localObject).toString());
    }
    try
    {
      localObject = (zzz)zzck.get(i);
      if (localObject == null)
      {
        paramMessage = new StringBuilder(50);
        paramMessage.append("Received response for unknown request: ");
        paramMessage.append(i);
        Log.w("MessengerIpcClient", paramMessage.toString());
        return true;
      }
      zzck.remove(i);
      zzu();
      paramMessage = paramMessage.getData();
      if (paramMessage.getBoolean("unsupported", false))
      {
        ((zzz)localObject).zzd(new zzaa(4, "Not supported by GmsCore"));
        return true;
      }
      ((zzz)localObject).zzh(paramMessage);
      return true;
    }
    finally {}
  }
  
  final boolean zze(zzz paramZzz)
  {
    for (;;)
    {
      try
      {
        switch (state)
        {
        case 3: 
          break;
        case 4: 
          return false;
        case 2: 
          zzcj.add(paramZzz);
          zzt();
          return true;
        case 1: 
          zzcj.add(paramZzz);
          return true;
        case 0: 
          zzcj.add(paramZzz);
          if (state != 0) {
            break label259;
          }
          bool = true;
          Preconditions.checkState(bool);
          if (Log.isLoggable("MessengerIpcClient", 2)) {
            Log.v("MessengerIpcClient", "Starting bind to GmsCore");
          }
          state = 1;
          paramZzz = new Intent("com.google.android.c2dm.intent.REGISTER");
          paramZzz.setPackage("com.google.android.gms");
          if (!ConnectionTracker.getInstance().bindService(zzr.zzd(zzcl), paramZzz, this, 1)) {
            zzd(0, "Unable to bind to service");
          } else {
            zzr.zze(zzcl).schedule(new zzv(this), 30L, TimeUnit.SECONDS);
          }
          return true;
          int i = state;
          paramZzz = new StringBuilder(26);
          paramZzz.append("Unknown state: ");
          paramZzz.append(i);
          throw new IllegalStateException(paramZzz.toString());
        }
      }
      finally {}
      continue;
      label259:
      boolean bool = false;
    }
  }
  
  final void zzg(int paramInt)
  {
    try
    {
      zzz localZzz = (zzz)zzck.get(paramInt);
      if (localZzz != null)
      {
        StringBuilder localStringBuilder = new StringBuilder(31);
        localStringBuilder.append("Timing out request: ");
        localStringBuilder.append(paramInt);
        Log.w("MessengerIpcClient", localStringBuilder.toString());
        zzck.remove(paramInt);
        localZzz.zzd(new zzaa(3, "Timed out waiting for response"));
        zzu();
      }
      return;
    }
    finally {}
  }
  
  final void zzu()
  {
    try
    {
      if ((state == 2) && (zzcj.isEmpty()) && (zzck.size() == 0))
      {
        if (Log.isLoggable("MessengerIpcClient", 2)) {
          Log.v("MessengerIpcClient", "Finished handling requests, unbinding");
        }
        state = 3;
        ConnectionTracker.getInstance().unbindService(zzr.zzd(zzcl), this);
      }
      return;
    }
    finally {}
  }
  
  final void zzv()
  {
    try
    {
      if (state == 1) {
        zzd(1, "Timed out while binding");
      }
      return;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
}
