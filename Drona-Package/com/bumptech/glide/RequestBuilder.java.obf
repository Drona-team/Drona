package com.bumptech.glide;

import android.annotation.SuppressLint;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.widget.ImageView;
import androidx.annotation.CheckResult;
import androidx.annotation.DrawableRes;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.RawRes;
import com.bumptech.glide.load.engine.DiskCacheStrategy;
import com.bumptech.glide.request.BaseRequestOptions;
import com.bumptech.glide.request.ErrorRequestCoordinator;
import com.bumptech.glide.request.FutureTarget;
import com.bumptech.glide.request.Request;
import com.bumptech.glide.request.RequestCoordinator;
import com.bumptech.glide.request.RequestFutureTarget;
import com.bumptech.glide.request.RequestListener;
import com.bumptech.glide.request.RequestOptions;
import com.bumptech.glide.request.SingleRequest;
import com.bumptech.glide.request.ThumbnailRequestCoordinator;
import com.bumptech.glide.request.target.PreloadTarget;
import com.bumptech.glide.request.target.Target;
import com.bumptech.glide.request.target.ViewTarget;
import com.bumptech.glide.signature.ApplicationVersionSignature;
import com.bumptech.glide.util.Executors;
import com.bumptech.glide.util.Preconditions;
import com.bumptech.glide.util.Util;
import java.io.File;
import java.net.URL;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.Executor;

public class RequestBuilder<TranscodeType>
  extends BaseRequestOptions<RequestBuilder<TranscodeType>>
  implements Cloneable, ModelTypes<RequestBuilder<TranscodeType>>
{
  protected static final RequestOptions DOWNLOAD_ONLY_OPTIONS = (RequestOptions)((RequestOptions)((RequestOptions)new RequestOptions().diskCacheStrategy(DiskCacheStrategy.DATA)).priority(Priority.LOW)).skipMemoryCache(true);
  private final Context context;
  @Nullable
  private RequestBuilder<TranscodeType> errorBuilder;
  private final Glide glide;
  private final GlideContext glideContext;
  private boolean isDefaultTransitionOptionsSet = true;
  private boolean isModelSet;
  private boolean isThumbnailBuilt;
  @Nullable
  private Object model;
  @Nullable
  private List<RequestListener<TranscodeType>> requestListeners;
  private final RequestManager requestManager;
  @Nullable
  private Float thumbSizeMultiplier;
  @Nullable
  private RequestBuilder<TranscodeType> thumbnailBuilder;
  private final Class<TranscodeType> transcodeClass;
  @NonNull
  private TransitionOptions<?, ? super TranscodeType> transitionOptions;
  
  @SuppressLint({"CheckResult"})
  protected RequestBuilder(@NonNull Glide paramGlide, RequestManager paramRequestManager, Class<TranscodeType> paramClass, Context paramContext)
  {
    glide = paramGlide;
    requestManager = paramRequestManager;
    transcodeClass = paramClass;
    context = paramContext;
    transitionOptions = paramRequestManager.getDefaultTransitionOptions(paramClass);
    glideContext = paramGlide.getGlideContext();
    initRequestListeners(paramRequestManager.getDefaultRequestListeners());
    apply(paramRequestManager.getDefaultRequestOptions());
  }
  
  @SuppressLint({"CheckResult"})
  protected RequestBuilder(Class<TranscodeType> paramClass, RequestBuilder<?> paramRequestBuilder)
  {
    this(glide, requestManager, paramClass, context);
    model = model;
    isModelSet = isModelSet;
    apply(paramRequestBuilder);
  }
  
  private Request buildRequest(Target<TranscodeType> paramTarget, @Nullable RequestListener<TranscodeType> paramRequestListener, BaseRequestOptions<?> paramBaseRequestOptions, Executor paramExecutor)
  {
    return buildRequestRecursive(paramTarget, paramRequestListener, null, transitionOptions, paramBaseRequestOptions.getPriority(), paramBaseRequestOptions.getOverrideWidth(), paramBaseRequestOptions.getOverrideHeight(), paramBaseRequestOptions, paramExecutor);
  }
  
  private Request buildRequestRecursive(Target<TranscodeType> paramTarget, @Nullable RequestListener<TranscodeType> paramRequestListener, @Nullable RequestCoordinator paramRequestCoordinator, TransitionOptions<?, ? super TranscodeType> paramTransitionOptions, Priority paramPriority, int paramInt1, int paramInt2, BaseRequestOptions<?> paramBaseRequestOptions, Executor paramExecutor)
  {
    Object localObject1;
    if (errorBuilder != null)
    {
      localObject1 = new ErrorRequestCoordinator(paramRequestCoordinator);
      paramRequestCoordinator = (RequestCoordinator)localObject1;
    }
    else
    {
      Object localObject2 = null;
      localObject1 = paramRequestCoordinator;
      paramRequestCoordinator = localObject2;
    }
    paramTransitionOptions = buildThumbnailRequestRecursive(paramTarget, paramRequestListener, (RequestCoordinator)localObject1, paramTransitionOptions, paramPriority, paramInt1, paramInt2, paramBaseRequestOptions, paramExecutor);
    if (paramRequestCoordinator == null) {
      return paramTransitionOptions;
    }
    int k = errorBuilder.getOverrideWidth();
    int m = errorBuilder.getOverrideHeight();
    int j = k;
    int i = m;
    if (Util.isValidDimensions(paramInt1, paramInt2))
    {
      j = k;
      i = m;
      if (!errorBuilder.isValidOverride())
      {
        j = paramBaseRequestOptions.getOverrideWidth();
        i = paramBaseRequestOptions.getOverrideHeight();
      }
    }
    paramRequestCoordinator.setRequests(paramTransitionOptions, errorBuilder.buildRequestRecursive(paramTarget, paramRequestListener, paramRequestCoordinator, errorBuilder.transitionOptions, errorBuilder.getPriority(), j, i, errorBuilder, paramExecutor));
    return paramRequestCoordinator;
  }
  
  private Request buildThumbnailRequestRecursive(Target<TranscodeType> paramTarget, RequestListener<TranscodeType> paramRequestListener, @Nullable RequestCoordinator paramRequestCoordinator, TransitionOptions<?, ? super TranscodeType> paramTransitionOptions, Priority paramPriority, int paramInt1, int paramInt2, BaseRequestOptions<?> paramBaseRequestOptions, Executor paramExecutor)
  {
    if (thumbnailBuilder != null)
    {
      if (!isThumbnailBuilt)
      {
        Object localObject = thumbnailBuilder.transitionOptions;
        if (thumbnailBuilder.isDefaultTransitionOptionsSet) {
          localObject = paramTransitionOptions;
        }
        if (thumbnailBuilder.isPrioritySet()) {}
        for (Priority localPriority = thumbnailBuilder.getPriority();; localPriority = getThumbnailPriority(paramPriority)) {
          break;
        }
        int k = thumbnailBuilder.getOverrideWidth();
        int m = thumbnailBuilder.getOverrideHeight();
        int j = k;
        int i = m;
        if (Util.isValidDimensions(paramInt1, paramInt2))
        {
          j = k;
          i = m;
          if (!thumbnailBuilder.isValidOverride())
          {
            j = paramBaseRequestOptions.getOverrideWidth();
            i = paramBaseRequestOptions.getOverrideHeight();
          }
        }
        paramRequestCoordinator = new ThumbnailRequestCoordinator(paramRequestCoordinator);
        paramTransitionOptions = obtainRequest(paramTarget, paramRequestListener, paramBaseRequestOptions, paramRequestCoordinator, paramTransitionOptions, paramPriority, paramInt1, paramInt2, paramExecutor);
        isThumbnailBuilt = true;
        paramTarget = thumbnailBuilder.buildRequestRecursive(paramTarget, paramRequestListener, paramRequestCoordinator, (TransitionOptions)localObject, localPriority, j, i, thumbnailBuilder, paramExecutor);
        isThumbnailBuilt = false;
        paramRequestCoordinator.setRequests(paramTransitionOptions, paramTarget);
        return paramRequestCoordinator;
      }
      throw new IllegalStateException("You cannot use a request as both the main request and a thumbnail, consider using clone() on the request(s) passed to thumbnail()");
    }
    if (thumbSizeMultiplier != null)
    {
      paramRequestCoordinator = new ThumbnailRequestCoordinator(paramRequestCoordinator);
      paramRequestCoordinator.setRequests(obtainRequest(paramTarget, paramRequestListener, paramBaseRequestOptions, paramRequestCoordinator, paramTransitionOptions, paramPriority, paramInt1, paramInt2, paramExecutor), obtainRequest(paramTarget, paramRequestListener, paramBaseRequestOptions.clone().sizeMultiplier(thumbSizeMultiplier.floatValue()), paramRequestCoordinator, paramTransitionOptions, getThumbnailPriority(paramPriority), paramInt1, paramInt2, paramExecutor));
      return paramRequestCoordinator;
    }
    return obtainRequest(paramTarget, paramRequestListener, paramBaseRequestOptions, paramRequestCoordinator, paramTransitionOptions, paramPriority, paramInt1, paramInt2, paramExecutor);
  }
  
  @NonNull
  private Priority getThumbnailPriority(@NonNull Priority paramPriority)
  {
    switch (1.$SwitchMap$com$bumptech$glide$Priority[paramPriority.ordinal()])
    {
    default: 
      paramPriority = new StringBuilder();
      paramPriority.append("unknown priority: ");
      paramPriority.append(getPriority());
      throw new IllegalArgumentException(paramPriority.toString());
    case 3: 
    case 4: 
      return Priority.IMMEDIATE;
    case 2: 
      return Priority.HIGH;
    }
    return Priority.NORMAL;
  }
  
  @SuppressLint({"CheckResult"})
  private void initRequestListeners(List<RequestListener<Object>> paramList)
  {
    paramList = paramList.iterator();
    while (paramList.hasNext()) {
      addListener((RequestListener)paramList.next());
    }
  }
  
  private <Y extends Target<TranscodeType>> Y into(@NonNull Y paramY, @Nullable RequestListener<TranscodeType> paramRequestListener, BaseRequestOptions<?> paramBaseRequestOptions, Executor paramExecutor)
  {
    Preconditions.checkNotNull(paramY);
    if (isModelSet)
    {
      paramRequestListener = buildRequest(paramY, paramRequestListener, paramBaseRequestOptions, paramExecutor);
      paramExecutor = paramY.getRequest();
      if ((paramRequestListener.isEquivalentTo(paramExecutor)) && (!isSkipMemoryCacheWithCompletePreviousRequest(paramBaseRequestOptions, paramExecutor)))
      {
        paramRequestListener.recycle();
        if (!((Request)Preconditions.checkNotNull(paramExecutor)).isRunning()) {
          paramExecutor.begin();
        }
        return paramY;
      }
      requestManager.clear(paramY);
      paramY.setRequest(paramRequestListener);
      requestManager.track(paramY, paramRequestListener);
      return paramY;
    }
    throw new IllegalArgumentException("You must call #load() before calling #into()");
  }
  
  private boolean isSkipMemoryCacheWithCompletePreviousRequest(BaseRequestOptions<?> paramBaseRequestOptions, Request paramRequest)
  {
    return (!paramBaseRequestOptions.isMemoryCacheable()) && (paramRequest.isComplete());
  }
  
  @NonNull
  private RequestBuilder<TranscodeType> loadGeneric(@Nullable Object paramObject)
  {
    model = paramObject;
    isModelSet = true;
    return this;
  }
  
  private Request obtainRequest(Target<TranscodeType> paramTarget, RequestListener<TranscodeType> paramRequestListener, BaseRequestOptions<?> paramBaseRequestOptions, RequestCoordinator paramRequestCoordinator, TransitionOptions<?, ? super TranscodeType> paramTransitionOptions, Priority paramPriority, int paramInt1, int paramInt2, Executor paramExecutor)
  {
    return SingleRequest.obtain(context, glideContext, model, transcodeClass, paramBaseRequestOptions, paramInt1, paramInt2, paramPriority, paramTarget, paramRequestListener, requestListeners, paramRequestCoordinator, glideContext.getEngine(), paramTransitionOptions.getTransitionFactory(), paramExecutor);
  }
  
  @CheckResult
  @NonNull
  public RequestBuilder<TranscodeType> addListener(@Nullable RequestListener<TranscodeType> paramRequestListener)
  {
    if (paramRequestListener != null)
    {
      if (requestListeners == null) {
        requestListeners = new ArrayList();
      }
      requestListeners.add(paramRequestListener);
    }
    return this;
  }
  
  @CheckResult
  @NonNull
  public RequestBuilder<TranscodeType> apply(@NonNull BaseRequestOptions<?> paramBaseRequestOptions)
  {
    Preconditions.checkNotNull(paramBaseRequestOptions);
    return (RequestBuilder)super.apply(paramBaseRequestOptions);
  }
  
  @CheckResult
  public RequestBuilder<TranscodeType> clone()
  {
    RequestBuilder localRequestBuilder = (RequestBuilder)super.clone();
    transitionOptions = transitionOptions.clone();
    return localRequestBuilder;
  }
  
  @Deprecated
  @CheckResult
  public FutureTarget<File> downloadOnly(int paramInt1, int paramInt2)
  {
    return getDownloadOnlyRequest().submit(paramInt1, paramInt2);
  }
  
  @Deprecated
  @CheckResult
  public <Y extends Target<File>> Y downloadOnly(@NonNull Y paramY)
  {
    return getDownloadOnlyRequest().into(paramY);
  }
  
  @NonNull
  public RequestBuilder<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> paramRequestBuilder)
  {
    errorBuilder = paramRequestBuilder;
    return this;
  }
  
  @CheckResult
  @NonNull
  protected RequestBuilder<File> getDownloadOnlyRequest()
  {
    return new RequestBuilder(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
  }
  
  @Deprecated
  public FutureTarget<TranscodeType> into(int paramInt1, int paramInt2)
  {
    return submit(paramInt1, paramInt2);
  }
  
  @NonNull
  public <Y extends Target<TranscodeType>> Y into(@NonNull Y paramY)
  {
    return into(paramY, null, Executors.mainThreadExecutor());
  }
  
  @NonNull
  <Y extends Target<TranscodeType>> Y into(@NonNull Y paramY, @Nullable RequestListener<TranscodeType> paramRequestListener, Executor paramExecutor)
  {
    return into(paramY, paramRequestListener, this, paramExecutor);
  }
  
  @NonNull
  public ViewTarget<ImageView, TranscodeType> into(@NonNull ImageView paramImageView)
  {
    Util.assertMainThread();
    Preconditions.checkNotNull(paramImageView);
    if ((!isTransformationSet()) && (isTransformationAllowed()) && (paramImageView.getScaleType() != null)) {
      switch (1.$SwitchMap$android$widget$ImageView$ScaleType[paramImageView.getScaleType().ordinal()])
      {
      default: 
        break;
      case 6: 
        localObject = clone().optionalCenterInside();
        break;
      case 3: 
      case 4: 
      case 5: 
        localObject = clone().optionalFitCenter();
        break;
      case 2: 
        localObject = clone().optionalCenterInside();
        break;
      case 1: 
        localObject = clone().optionalCenterCrop();
        break;
      }
    }
    Object localObject = this;
    return (ViewTarget)into(glideContext.buildImageViewTarget(paramImageView, transcodeClass), null, (BaseRequestOptions)localObject, Executors.mainThreadExecutor());
  }
  
  @CheckResult
  @NonNull
  public RequestBuilder<TranscodeType> listener(@Nullable RequestListener<TranscodeType> paramRequestListener)
  {
    requestListeners = null;
    return addListener(paramRequestListener);
  }
  
  @CheckResult
  @NonNull
  public RequestBuilder<TranscodeType> load(@Nullable Bitmap paramBitmap)
  {
    return loadGeneric(paramBitmap).apply(RequestOptions.diskCacheStrategyOf(DiskCacheStrategy.NONE));
  }
  
  @CheckResult
  @NonNull
  public RequestBuilder<TranscodeType> load(@Nullable Drawable paramDrawable)
  {
    return loadGeneric(paramDrawable).apply(RequestOptions.diskCacheStrategyOf(DiskCacheStrategy.NONE));
  }
  
  @CheckResult
  @NonNull
  public RequestBuilder<TranscodeType> load(@Nullable Uri paramUri)
  {
    return loadGeneric(paramUri);
  }
  
  @CheckResult
  @NonNull
  public RequestBuilder<TranscodeType> load(@Nullable File paramFile)
  {
    return loadGeneric(paramFile);
  }
  
  @CheckResult
  @NonNull
  public RequestBuilder<TranscodeType> load(@DrawableRes @Nullable @RawRes Integer paramInteger)
  {
    return loadGeneric(paramInteger).apply(RequestOptions.signatureOf(ApplicationVersionSignature.obtain(context)));
  }
  
  @CheckResult
  @NonNull
  public RequestBuilder<TranscodeType> load(@Nullable Object paramObject)
  {
    return loadGeneric(paramObject);
  }
  
  @CheckResult
  @NonNull
  public RequestBuilder<TranscodeType> load(@Nullable String paramString)
  {
    return loadGeneric(paramString);
  }
  
  @Deprecated
  @CheckResult
  public RequestBuilder<TranscodeType> load(@Nullable URL paramURL)
  {
    return loadGeneric(paramURL);
  }
  
  @CheckResult
  @NonNull
  public RequestBuilder<TranscodeType> load(@Nullable byte[] paramArrayOfByte)
  {
    Object localObject = loadGeneric(paramArrayOfByte);
    paramArrayOfByte = (byte[])localObject;
    if (!((RequestBuilder)localObject).isDiskCacheStrategySet()) {
      paramArrayOfByte = ((RequestBuilder)localObject).apply(RequestOptions.diskCacheStrategyOf(DiskCacheStrategy.NONE));
    }
    localObject = paramArrayOfByte;
    if (!paramArrayOfByte.isSkipMemoryCacheSet()) {
      localObject = paramArrayOfByte.apply(RequestOptions.skipMemoryCacheOf(true));
    }
    return localObject;
  }
  
  @NonNull
  public Target<TranscodeType> preload()
  {
    return preload(Integer.MIN_VALUE, Integer.MIN_VALUE);
  }
  
  @NonNull
  public Target<TranscodeType> preload(int paramInt1, int paramInt2)
  {
    return into(PreloadTarget.obtain(requestManager, paramInt1, paramInt2));
  }
  
  @NonNull
  public FutureTarget<TranscodeType> submit()
  {
    return submit(Integer.MIN_VALUE, Integer.MIN_VALUE);
  }
  
  @NonNull
  public FutureTarget<TranscodeType> submit(int paramInt1, int paramInt2)
  {
    RequestFutureTarget localRequestFutureTarget = new RequestFutureTarget(paramInt1, paramInt2);
    return (FutureTarget)into(localRequestFutureTarget, localRequestFutureTarget, Executors.directExecutor());
  }
  
  @CheckResult
  @NonNull
  public RequestBuilder<TranscodeType> thumbnail(float paramFloat)
  {
    if ((paramFloat >= 0.0F) && (paramFloat <= 1.0F))
    {
      thumbSizeMultiplier = Float.valueOf(paramFloat);
      return this;
    }
    throw new IllegalArgumentException("sizeMultiplier must be between 0 and 1");
  }
  
  @CheckResult
  @NonNull
  public RequestBuilder<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> paramRequestBuilder)
  {
    thumbnailBuilder = paramRequestBuilder;
    return this;
  }
  
  @CheckResult
  @NonNull
  public RequestBuilder<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... paramVarArgs)
  {
    Object localObject = null;
    if ((paramVarArgs != null) && (paramVarArgs.length != 0))
    {
      int i = paramVarArgs.length - 1;
      while (i >= 0)
      {
        RequestBuilder<TranscodeType> localRequestBuilder = paramVarArgs[i];
        if (localRequestBuilder != null) {
          if (localObject == null) {
            localObject = localRequestBuilder;
          } else {
            localObject = localRequestBuilder.thumbnail((RequestBuilder)localObject);
          }
        }
        i -= 1;
      }
      return thumbnail((RequestBuilder)localObject);
    }
    return thumbnail((RequestBuilder)null);
  }
  
  @CheckResult
  @NonNull
  public RequestBuilder<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> paramTransitionOptions)
  {
    transitionOptions = ((TransitionOptions)Preconditions.checkNotNull(paramTransitionOptions));
    isDefaultTransitionOptionsSet = false;
    return this;
  }
}
