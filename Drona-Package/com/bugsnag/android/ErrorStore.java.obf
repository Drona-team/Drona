package com.bugsnag.android;

import android.content.Context;
import androidx.annotation.NonNull;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.RejectedExecutionException;
import java.util.concurrent.Semaphore;

class ErrorStore
  extends FileStore<Error>
{
  static final Comparator<File> ERROR_REPORT_COMPARATOR = new Comparator()
  {
    public int compare(File paramAnonymousFile1, File paramAnonymousFile2)
    {
      if ((paramAnonymousFile1 == null) && (paramAnonymousFile2 == null)) {
        return 0;
      }
      if (paramAnonymousFile1 == null) {
        return 1;
      }
      if (paramAnonymousFile2 == null) {
        return -1;
      }
      return paramAnonymousFile1.getName().replaceAll("_startupcrash", "").compareTo(paramAnonymousFile2.getName().replaceAll("_startupcrash", ""));
    }
  };
  private static final int LAUNCH_CRASH_POLL_MS = 50;
  private static final long LAUNCH_CRASH_TIMEOUT_MS = 2000L;
  private static final String STARTUP_CRASH = "_startupcrash";
  volatile boolean flushOnLaunchCompleted = false;
  private final Semaphore semaphore = new Semaphore(1);
  
  ErrorStore(@NonNull Configuration paramConfiguration, @NonNull Context paramContext, FileStore.Delegate paramDelegate)
  {
    super(paramConfiguration, paramContext, "/bugsnag-errors/", 128, ERROR_REPORT_COMPARATOR, paramDelegate);
  }
  
  private List<File> findLaunchCrashReports(Collection<File> paramCollection)
  {
    ArrayList localArrayList = new ArrayList();
    paramCollection = paramCollection.iterator();
    while (paramCollection.hasNext())
    {
      File localFile = (File)paramCollection.next();
      if (isLaunchCrashReport(localFile)) {
        localArrayList.add(localFile);
      }
    }
    return localArrayList;
  }
  
  private void flushErrorReport(File paramFile)
  {
    label270:
    for (;;)
    {
      try
      {
        if (config.getBeforeSendTasks().isEmpty())
        {
          localObject1 = new Report(config.getApiKey(), paramFile);
        }
        else
        {
          localObject1 = ErrorReader.readError(config, paramFile);
          localObject1 = new Report(config.getApiKey(), (Error)localObject1);
          Iterator localIterator = config.getBeforeSendTasks().iterator();
          if (!localIterator.hasNext()) {
            break label270;
          }
          Object localObject2 = (BeforeSend)localIterator.next();
          try
          {
            if (((BeforeSend)localObject2).run((Report)localObject1)) {
              continue;
            }
            deleteStoredFiles(Collections.singleton(paramFile));
            localObject2 = new StringBuilder();
            ((StringBuilder)localObject2).append("Deleting cancelled error file ");
            ((StringBuilder)localObject2).append(paramFile.getName());
            Logger.info(((StringBuilder)localObject2).toString());
            return;
          }
          catch (Throwable localThrowable)
          {
            Logger.warn("BeforeSend threw an Exception", localThrowable);
          }
          continue;
        }
        config.getDelivery().deliver((Report)localObject1, config);
        deleteStoredFiles(Collections.singleton(paramFile));
        Object localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append("Deleting sent error file ");
        ((StringBuilder)localObject1).append(paramFile.getName());
        Logger.info(((StringBuilder)localObject1).toString());
        return;
      }
      catch (Exception localException)
      {
        if (delegate != null) {
          delegate.onErrorIOFailure(localException, paramFile, "Crash Report Deserialization");
        }
        deleteStoredFiles(Collections.singleton(paramFile));
        return;
      }
      catch (FileNotFoundException paramFile)
      {
        Logger.warn("Ignoring empty file - oldest report on disk was deleted", paramFile);
        return;
      }
      catch (DeliveryFailureException localDeliveryFailureException)
      {
        cancelQueuedFiles(Collections.singleton(paramFile));
        Logger.warn("Could not send previously saved error(s) to Bugsnag, will try again later", localDeliveryFailureException);
        return;
      }
    }
  }
  
  void flushAsync()
  {
    if (storeDirectory == null) {
      return;
    }
    try
    {
      Async.run(new Runnable()
      {
        public void run()
        {
          flushReports(findStoredFiles());
        }
      });
      return;
    }
    catch (RejectedExecutionException localRejectedExecutionException)
    {
      for (;;) {}
    }
    Logger.warn("Failed to flush all on-disk errors, retaining unsent errors for later.");
  }
  
  void flushOnLaunch()
  {
    long l2 = config.getLaunchCrashThresholdMs();
    long l1 = 0L;
    if (l2 != 0L)
    {
      List localList1 = findStoredFiles();
      final List localList2 = findLaunchCrashReports(localList1);
      localList1.removeAll(localList2);
      cancelQueuedFiles(localList1);
      if (!localList2.isEmpty())
      {
        flushOnLaunchCompleted = false;
        Logger.info("Attempting to send launch crash reports");
        try
        {
          Async.run(new Runnable()
          {
            public void run()
            {
              flushReports(localList2);
              flushOnLaunchCompleted = true;
            }
          });
        }
        catch (RejectedExecutionException localRejectedExecutionException)
        {
          Logger.warn("Failed to flush launch crash reports", localRejectedExecutionException);
          flushOnLaunchCompleted = true;
        }
        while ((!flushOnLaunchCompleted) && (l1 < 2000L))
        {
          try
          {
            Thread.sleep(50L);
            l1 += 50L;
          }
          catch (InterruptedException localInterruptedException)
          {
            for (;;) {}
          }
          Logger.warn("Interrupted while waiting for launch crash report request");
        }
        Logger.info("Continuing with Bugsnag initialisation");
      }
    }
    flushAsync();
  }
  
  void flushReports(Collection<File> paramCollection)
  {
    if ((!paramCollection.isEmpty()) && (semaphore.tryAcquire(1))) {
      try
      {
        Logger.info(String.format(Locale.US, "Sending %d saved error(s) to Bugsnag", new Object[] { Integer.valueOf(paramCollection.size()) }));
        paramCollection = paramCollection.iterator();
        while (paramCollection.hasNext()) {
          flushErrorReport((File)paramCollection.next());
        }
        return;
      }
      finally
      {
        semaphore.release(1);
      }
    }
  }
  
  @NonNull
  String getFilename(Object paramObject)
  {
    String str = "";
    if ((paramObject instanceof Error))
    {
      Map localMap = ((Error)paramObject).getAppData();
      paramObject = str;
      if ((localMap instanceof Map))
      {
        paramObject = str;
        if ((localMap.get("duration") instanceof Number))
        {
          paramObject = str;
          if (isStartupCrash(((Number)localMap.get("duration")).longValue())) {
            paramObject = "_startupcrash";
          }
        }
      }
    }
    else
    {
      paramObject = "not-jvm";
    }
    str = UUID.randomUUID().toString();
    long l = System.currentTimeMillis();
    return String.format(Locale.US, "%s%d_%s%s.json", new Object[] { storeDirectory, Long.valueOf(l), str, paramObject });
  }
  
  boolean isLaunchCrashReport(File paramFile)
  {
    return paramFile.getName().endsWith("_startupcrash.json");
  }
  
  boolean isStartupCrash(long paramLong)
  {
    return paramLong < config.getLaunchCrashThresholdMs();
  }
}
