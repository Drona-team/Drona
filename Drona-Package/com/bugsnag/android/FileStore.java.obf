package com.bugsnag.android;

import android.content.Context;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.ConcurrentSkipListSet;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

abstract class FileStore<T extends JsonStream.Streamable>
{
  private final Comparator<File> comparator;
  @NonNull
  protected final Configuration config;
  protected final Delegate delegate;
  final Lock lock = new ReentrantLock();
  private final int maxStoreCount;
  final Collection<File> queuedFiles = new ConcurrentSkipListSet();
  @Nullable
  final String storeDirectory;
  
  FileStore(@NonNull Configuration paramConfiguration, @NonNull Context paramContext, String paramString, int paramInt, Comparator<File> paramComparator, Delegate paramDelegate)
  {
    config = paramConfiguration;
    maxStoreCount = paramInt;
    comparator = paramComparator;
    delegate = paramDelegate;
    paramConfiguration = null;
    try
    {
      paramComparator = new StringBuilder();
      paramComparator.append(paramContext.getCacheDir().getAbsolutePath());
      paramComparator.append(paramString);
      paramContext = paramComparator.toString();
      paramString = new File(paramContext);
      paramString.mkdirs();
      if (!paramString.exists()) {
        Logger.warn("Could not prepare file storage directory");
      } else {
        paramConfiguration = paramContext;
      }
    }
    catch (Exception paramContext)
    {
      Logger.warn("Could not prepare file storage directory", paramContext);
    }
    storeDirectory = paramConfiguration;
  }
  
  void cancelQueuedFiles(Collection<File> paramCollection)
  {
    lock.lock();
    if (paramCollection != null) {}
    try
    {
      queuedFiles.removeAll(paramCollection);
    }
    finally
    {
      lock.unlock();
    }
  }
  
  void deleteStoredFiles(Collection<File> paramCollection)
  {
    lock.lock();
    if (paramCollection != null) {
      try
      {
        queuedFiles.removeAll(paramCollection);
        paramCollection = paramCollection.iterator();
        while (paramCollection.hasNext())
        {
          File localFile = (File)paramCollection.next();
          if (!localFile.delete()) {
            localFile.deleteOnExit();
          }
        }
      }
      finally
      {
        lock.unlock();
      }
    }
  }
  
  void discardOldestFileIfNeeded()
  {
    Object localObject1 = new File(storeDirectory);
    if (((File)localObject1).isDirectory())
    {
      localObject1 = ((File)localObject1).listFiles();
      if ((localObject1 != null) && (localObject1.length >= maxStoreCount))
      {
        Arrays.sort((Object[])localObject1, comparator);
        int i = 0;
        while ((i < localObject1.length) && (localObject1.length >= maxStoreCount))
        {
          Object localObject2 = localObject1[i];
          if (!queuedFiles.contains(localObject2))
          {
            Logger.warn(String.format("Discarding oldest error as stored error limit reached (%s)", new Object[] { localObject2.getPath() }));
            deleteStoredFiles(Collections.singleton(localObject2));
          }
          i += 1;
        }
      }
    }
  }
  
  /* Error */
  void enqueueContentForDelivery(String paramString)
  {
    // Byte code:
    //   0: aload_0
    //   1: getfield 95	com/bugsnag/android/FileStore:storeDirectory	Ljava/lang/String;
    //   4: ifnonnull +4 -> 8
    //   7: return
    //   8: aload_0
    //   9: aload_1
    //   10: invokevirtual 177	com/bugsnag/android/FileStore:getFilename	(Ljava/lang/Object;)Ljava/lang/String;
    //   13: astore 5
    //   15: aload_0
    //   16: invokevirtual 179	com/bugsnag/android/FileStore:discardOldestFileIfNeeded	()V
    //   19: aload_0
    //   20: getfield 38	com/bugsnag/android/FileStore:lock	Ljava/util/concurrent/locks/Lock;
    //   23: invokeinterface 105 1 0
    //   28: aconst_null
    //   29: astore 4
    //   31: aconst_null
    //   32: astore_2
    //   33: new 181	java/io/BufferedWriter
    //   36: dup
    //   37: new 183	java/io/OutputStreamWriter
    //   40: dup
    //   41: new 185	java/io/FileOutputStream
    //   44: dup
    //   45: aload 5
    //   47: invokespecial 186	java/io/FileOutputStream:<init>	(Ljava/lang/String;)V
    //   50: ldc -68
    //   52: invokespecial 191	java/io/OutputStreamWriter:<init>	(Ljava/io/OutputStream;Ljava/lang/String;)V
    //   55: invokespecial 194	java/io/BufferedWriter:<init>	(Ljava/io/Writer;)V
    //   58: astore_3
    //   59: aload_3
    //   60: aload_1
    //   61: invokevirtual 199	java/io/Writer:write	(Ljava/lang/String;)V
    //   64: aload_3
    //   65: invokevirtual 202	java/io/Writer:close	()V
    //   68: goto +116 -> 184
    //   71: astore_2
    //   72: iconst_1
    //   73: anewarray 5	java/lang/Object
    //   76: astore_1
    //   77: aload_1
    //   78: iconst_0
    //   79: aload 5
    //   81: aastore
    //   82: goto +92 -> 174
    //   85: astore_1
    //   86: aload_3
    //   87: astore_2
    //   88: goto +106 -> 194
    //   91: astore_2
    //   92: aload_3
    //   93: astore_1
    //   94: aload_2
    //   95: astore_3
    //   96: goto +11 -> 107
    //   99: astore_1
    //   100: goto +94 -> 194
    //   103: astore_3
    //   104: aload 4
    //   106: astore_1
    //   107: aload_1
    //   108: astore_2
    //   109: new 62	java/io/File
    //   112: dup
    //   113: aload 5
    //   115: invokespecial 76	java/io/File:<init>	(Ljava/lang/String;)V
    //   118: astore 4
    //   120: aload_1
    //   121: astore_2
    //   122: aload_0
    //   123: getfield 51	com/bugsnag/android/FileStore:delegate	Lcom/bugsnag/android/FileStore$Delegate;
    //   126: ifnull +19 -> 145
    //   129: aload_1
    //   130: astore_2
    //   131: aload_0
    //   132: getfield 51	com/bugsnag/android/FileStore:delegate	Lcom/bugsnag/android/FileStore$Delegate;
    //   135: aload_3
    //   136: aload 4
    //   138: ldc -52
    //   140: invokeinterface 208 4 0
    //   145: aload_1
    //   146: astore_2
    //   147: aload 4
    //   149: invokestatic 214	com/bugsnag/android/IOUtils:deleteFile	(Ljava/io/File;)V
    //   152: aload_1
    //   153: ifnull +31 -> 184
    //   156: aload_1
    //   157: invokevirtual 202	java/io/Writer:close	()V
    //   160: goto +24 -> 184
    //   163: astore_2
    //   164: iconst_1
    //   165: anewarray 5	java/lang/Object
    //   168: astore_1
    //   169: aload_1
    //   170: iconst_0
    //   171: aload 5
    //   173: aastore
    //   174: ldc -40
    //   176: aload_1
    //   177: invokestatic 164	java/lang/String:format	(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
    //   180: aload_2
    //   181: invokestatic 93	com/bugsnag/android/Logger:warn	(Ljava/lang/String;Ljava/lang/Throwable;)V
    //   184: aload_0
    //   185: getfield 38	com/bugsnag/android/FileStore:lock	Ljava/util/concurrent/locks/Lock;
    //   188: invokeinterface 114 1 0
    //   193: return
    //   194: aload_2
    //   195: ifnull +29 -> 224
    //   198: aload_2
    //   199: invokevirtual 202	java/io/Writer:close	()V
    //   202: goto +22 -> 224
    //   205: astore_2
    //   206: ldc -40
    //   208: iconst_1
    //   209: anewarray 5	java/lang/Object
    //   212: dup
    //   213: iconst_0
    //   214: aload 5
    //   216: aastore
    //   217: invokestatic 164	java/lang/String:format	(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
    //   220: aload_2
    //   221: invokestatic 93	com/bugsnag/android/Logger:warn	(Ljava/lang/String;Ljava/lang/Throwable;)V
    //   224: aload_0
    //   225: getfield 38	com/bugsnag/android/FileStore:lock	Ljava/util/concurrent/locks/Lock;
    //   228: invokeinterface 114 1 0
    //   233: aload_1
    //   234: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	235	0	this	FileStore
    //   0	235	1	paramString	String
    //   32	1	2	localObject1	Object
    //   71	1	2	localException1	Exception
    //   87	1	2	localObject2	Object
    //   91	4	2	localException2	Exception
    //   108	39	2	str1	String
    //   163	36	2	localException3	Exception
    //   205	16	2	localException4	Exception
    //   58	38	3	localObject3	Object
    //   103	33	3	localException5	Exception
    //   29	119	4	localFile	File
    //   13	202	5	str2	String
    // Exception table:
    //   from	to	target	type
    //   64	68	71	java/lang/Exception
    //   59	64	85	finally
    //   59	64	91	java/lang/Exception
    //   33	59	99	finally
    //   109	120	99	finally
    //   122	129	99	finally
    //   131	145	99	finally
    //   147	152	99	finally
    //   33	59	103	java/lang/Exception
    //   156	160	163	java/lang/Exception
    //   198	202	205	java/lang/Exception
  }
  
  List<File> findStoredFiles()
  {
    lock.lock();
    for (;;)
    {
      int i;
      try
      {
        ArrayList localArrayList = new ArrayList();
        if (storeDirectory != null)
        {
          Object localObject2 = new File(storeDirectory);
          if ((((File)localObject2).exists()) && (((File)localObject2).isDirectory()))
          {
            localObject2 = ((File)localObject2).listFiles();
            if (localObject2 != null)
            {
              int j = localObject2.length;
              i = 0;
              if (i < j)
              {
                Object localObject3 = localObject2[i];
                if (localObject3.length() == 0L)
                {
                  if (localObject3.delete()) {
                    break label176;
                  }
                  localObject3.deleteOnExit();
                  break label176;
                }
                if ((!localObject3.isFile()) || (queuedFiles.contains(localObject3))) {
                  break label176;
                }
                localArrayList.add(localObject3);
                break label176;
              }
            }
          }
        }
        queuedFiles.addAll(localArrayList);
        return localArrayList;
      }
      finally
      {
        lock.unlock();
      }
      label176:
      i += 1;
    }
  }
  
  @NonNull
  abstract String getFilename(Object paramObject);
  
  /* Error */
  @Nullable
  String write(@NonNull JsonStream.Streamable paramStreamable)
  {
    // Byte code:
    //   0: aload_0
    //   1: getfield 95	com/bugsnag/android/FileStore:storeDirectory	Ljava/lang/String;
    //   4: ifnonnull +5 -> 9
    //   7: aconst_null
    //   8: areturn
    //   9: aload_0
    //   10: invokevirtual 179	com/bugsnag/android/FileStore:discardOldestFileIfNeeded	()V
    //   13: aload_0
    //   14: aload_1
    //   15: invokevirtual 177	com/bugsnag/android/FileStore:getFilename	(Ljava/lang/Object;)Ljava/lang/String;
    //   18: astore 4
    //   20: aload_0
    //   21: getfield 38	com/bugsnag/android/FileStore:lock	Ljava/util/concurrent/locks/Lock;
    //   24: invokeinterface 105 1 0
    //   29: new 242	com/bugsnag/android/JsonStream
    //   32: dup
    //   33: new 181	java/io/BufferedWriter
    //   36: dup
    //   37: new 183	java/io/OutputStreamWriter
    //   40: dup
    //   41: new 185	java/io/FileOutputStream
    //   44: dup
    //   45: aload 4
    //   47: invokespecial 186	java/io/FileOutputStream:<init>	(Ljava/lang/String;)V
    //   50: ldc -68
    //   52: invokespecial 191	java/io/OutputStreamWriter:<init>	(Ljava/io/OutputStream;Ljava/lang/String;)V
    //   55: invokespecial 194	java/io/BufferedWriter:<init>	(Ljava/io/Writer;)V
    //   58: invokespecial 243	com/bugsnag/android/JsonStream:<init>	(Ljava/io/Writer;)V
    //   61: astore_3
    //   62: aload_3
    //   63: astore_2
    //   64: aload_3
    //   65: aload_1
    //   66: invokevirtual 247	com/bugsnag/android/JsonStream:value	(Lcom/bugsnag/android/JsonStream$Streamable;)V
    //   69: aload_3
    //   70: astore_2
    //   71: ldc -7
    //   73: iconst_1
    //   74: anewarray 5	java/lang/Object
    //   77: dup
    //   78: iconst_0
    //   79: aload 4
    //   81: aastore
    //   82: invokestatic 164	java/lang/String:format	(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
    //   85: invokestatic 252	com/bugsnag/android/Logger:info	(Ljava/lang/String;)V
    //   88: aload_3
    //   89: invokestatic 256	com/bugsnag/android/IOUtils:closeQuietly	(Ljava/io/Closeable;)V
    //   92: aload_0
    //   93: getfield 38	com/bugsnag/android/FileStore:lock	Ljava/util/concurrent/locks/Lock;
    //   96: invokeinterface 114 1 0
    //   101: aload 4
    //   103: areturn
    //   104: astore_2
    //   105: aload_3
    //   106: astore_1
    //   107: aload_2
    //   108: astore_3
    //   109: goto +20 -> 129
    //   112: astore_2
    //   113: aload_3
    //   114: astore_1
    //   115: aload_2
    //   116: astore_3
    //   117: goto +61 -> 178
    //   120: astore_1
    //   121: aconst_null
    //   122: astore_2
    //   123: goto +80 -> 203
    //   126: astore_3
    //   127: aconst_null
    //   128: astore_1
    //   129: aload_1
    //   130: astore_2
    //   131: new 62	java/io/File
    //   134: dup
    //   135: aload 4
    //   137: invokespecial 76	java/io/File:<init>	(Ljava/lang/String;)V
    //   140: astore 4
    //   142: aload_1
    //   143: astore_2
    //   144: aload_0
    //   145: getfield 51	com/bugsnag/android/FileStore:delegate	Lcom/bugsnag/android/FileStore$Delegate;
    //   148: ifnull +20 -> 168
    //   151: aload_1
    //   152: astore_2
    //   153: aload_0
    //   154: getfield 51	com/bugsnag/android/FileStore:delegate	Lcom/bugsnag/android/FileStore$Delegate;
    //   157: aload_3
    //   158: aload 4
    //   160: ldc_w 258
    //   163: invokeinterface 208 4 0
    //   168: aload_1
    //   169: astore_2
    //   170: aload 4
    //   172: invokestatic 214	com/bugsnag/android/IOUtils:deleteFile	(Ljava/io/File;)V
    //   175: goto +12 -> 187
    //   178: aload_1
    //   179: astore_2
    //   180: ldc_w 260
    //   183: aload_3
    //   184: invokestatic 93	com/bugsnag/android/Logger:warn	(Ljava/lang/String;Ljava/lang/Throwable;)V
    //   187: aload_1
    //   188: invokestatic 256	com/bugsnag/android/IOUtils:closeQuietly	(Ljava/io/Closeable;)V
    //   191: aload_0
    //   192: getfield 38	com/bugsnag/android/FileStore:lock	Ljava/util/concurrent/locks/Lock;
    //   195: invokeinterface 114 1 0
    //   200: aconst_null
    //   201: areturn
    //   202: astore_1
    //   203: aload_2
    //   204: invokestatic 256	com/bugsnag/android/IOUtils:closeQuietly	(Ljava/io/Closeable;)V
    //   207: aload_0
    //   208: getfield 38	com/bugsnag/android/FileStore:lock	Ljava/util/concurrent/locks/Lock;
    //   211: invokeinterface 114 1 0
    //   216: aload_1
    //   217: athrow
    //   218: astore_3
    //   219: aconst_null
    //   220: astore_1
    //   221: goto -43 -> 178
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	224	0	this	FileStore
    //   0	224	1	paramStreamable	JsonStream.Streamable
    //   63	8	2	localObject1	Object
    //   104	4	2	localException1	Exception
    //   112	4	2	localFileNotFoundException1	java.io.FileNotFoundException
    //   122	82	2	localStreamable	JsonStream.Streamable
    //   61	56	3	localObject2	Object
    //   126	58	3	localException2	Exception
    //   218	1	3	localFileNotFoundException2	java.io.FileNotFoundException
    //   18	153	4	localObject3	Object
    // Exception table:
    //   from	to	target	type
    //   64	69	104	java/lang/Exception
    //   71	88	104	java/lang/Exception
    //   64	69	112	java/io/FileNotFoundException
    //   71	88	112	java/io/FileNotFoundException
    //   29	62	120	finally
    //   29	62	126	java/lang/Exception
    //   64	69	202	finally
    //   71	88	202	finally
    //   131	142	202	finally
    //   144	151	202	finally
    //   153	168	202	finally
    //   170	175	202	finally
    //   180	187	202	finally
    //   29	62	218	java/io/FileNotFoundException
  }
  
  static abstract interface Delegate
  {
    public abstract void onErrorIOFailure(Exception paramException, File paramFile, String paramString);
  }
}
