package com.bugsnag.android;

import android.util.JsonReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

class ErrorReader
{
  ErrorReader() {}
  
  private static <T> T coerceSerializableFromJSON(JsonReader paramJsonReader)
    throws IOException
  {
    switch (1.$SwitchMap$android$util$JsonToken[paramJsonReader.peek().ordinal()])
    {
    default: 
      return null;
    case 5: 
      return jsonArrayToList(paramJsonReader);
    case 4: 
      return Boolean.valueOf(paramJsonReader.nextBoolean());
    case 3: 
      return jsonObjectToMap(paramJsonReader);
    case 2: 
      return deserializeNumber(paramJsonReader);
    }
    return paramJsonReader.nextString();
  }
  
  private static <T> T deserializeNumber(JsonReader paramJsonReader)
    throws IOException
  {
    try
    {
      int i = paramJsonReader.nextInt();
      return Integer.valueOf(i);
    }
    catch (NumberFormatException localNumberFormatException1)
    {
      long l;
      label20:
      for (;;) {}
    }
    try
    {
      l = paramJsonReader.nextLong();
      return Long.valueOf(l);
    }
    catch (NumberFormatException localNumberFormatException2)
    {
      break label20;
    }
    return Double.valueOf(paramJsonReader.nextDouble());
  }
  
  private static <T> List<T> jsonArrayToList(JsonReader paramJsonReader)
    throws IOException
  {
    ArrayList localArrayList = new ArrayList();
    paramJsonReader.beginArray();
    while (paramJsonReader.hasNext())
    {
      Object localObject = coerceSerializableFromJSON(paramJsonReader);
      if (localObject != null) {
        localArrayList.add(localObject);
      }
    }
    paramJsonReader.endArray();
    return localArrayList;
  }
  
  private static Map<String, Object> jsonObjectToMap(JsonReader paramJsonReader)
    throws IOException
  {
    HashMap localHashMap = new HashMap();
    paramJsonReader.beginObject();
    while (paramJsonReader.hasNext())
    {
      String str = paramJsonReader.nextName();
      Object localObject = coerceSerializableFromJSON(paramJsonReader);
      if (localObject != null) {
        localHashMap.put(str, localObject);
      }
    }
    paramJsonReader.endObject();
    return localHashMap;
  }
  
  private static Breadcrumb readBreadcrumb(JsonReader paramJsonReader)
    throws IOException
  {
    HashMap localHashMap = new HashMap();
    paramJsonReader.beginObject();
    String str1 = null;
    Object localObject1 = str1;
    Object localObject2 = localObject1;
    while (paramJsonReader.hasNext())
    {
      String str2 = paramJsonReader.nextName();
      int i = -1;
      int j = str2.hashCode();
      if (j != -450957489)
      {
        if (j != 3373707)
        {
          if (j != 3575610)
          {
            if ((j == 55126294) && (str2.equals("timestamp"))) {
              i = 1;
            }
          }
          else if (str2.equals("type")) {
            i = 2;
          }
        }
        else if (str2.equals("name")) {
          i = 0;
        }
      }
      else if (str2.equals("metaData")) {
        i = 3;
      }
      switch (i)
      {
      default: 
        paramJsonReader.skipValue();
        break;
      case 3: 
        paramJsonReader.beginObject();
        while (paramJsonReader.hasNext()) {
          localHashMap.put(paramJsonReader.nextName(), paramJsonReader.nextString());
        }
        paramJsonReader.endObject();
        break;
      case 2: 
        localObject2 = paramJsonReader.nextString().toUpperCase(Locale.US);
        break;
      case 1: 
        try
        {
          localObject1 = DateUtils.fromIso8601(paramJsonReader.nextString());
        }
        catch (Exception paramJsonReader)
        {
          throw new IOException("Failed to parse breadcrumb timestamp: ", paramJsonReader);
        }
      case 0: 
        str1 = paramJsonReader.nextString();
      }
    }
    paramJsonReader.endObject();
    if ((str1 != null) && (localObject1 != null) && (localObject2 != null)) {
      return new Breadcrumb(str1, BreadcrumbType.valueOf((String)localObject2), (Date)localObject1, localHashMap);
    }
    return null;
  }
  
  private static Breadcrumbs readBreadcrumbs(Configuration paramConfiguration, JsonReader paramJsonReader)
    throws IOException
  {
    paramConfiguration = new Breadcrumbs(paramConfiguration);
    paramJsonReader.beginArray();
    while (paramJsonReader.hasNext())
    {
      Breadcrumb localBreadcrumb = readBreadcrumb(paramJsonReader);
      if (localBreadcrumb != null) {
        paramConfiguration.add(localBreadcrumb);
      }
    }
    paramJsonReader.endArray();
    return paramConfiguration;
  }
  
  /* Error */
  static Error readError(@androidx.annotation.NonNull Configuration paramConfiguration, @androidx.annotation.NonNull java.io.File paramFile)
    throws IOException
  {
    // Byte code:
    //   0: getstatic 206	com/bugsnag/android/Severity:ERROR	Lcom/bugsnag/android/Severity;
    //   3: astore 16
    //   5: invokestatic 212	java/util/Collections:emptyList	()Ljava/util/List;
    //   8: astore 11
    //   10: new 21	android/util/JsonReader
    //   13: dup
    //   14: new 214	java/io/BufferedReader
    //   17: dup
    //   18: new 216	java/io/FileReader
    //   21: dup
    //   22: aload_1
    //   23: invokespecial 219	java/io/FileReader:<init>	(Ljava/io/File;)V
    //   26: invokespecial 222	java/io/BufferedReader:<init>	(Ljava/io/Reader;)V
    //   29: invokespecial 223	android/util/JsonReader:<init>	(Ljava/io/Reader;)V
    //   32: astore_1
    //   33: aload_1
    //   34: invokevirtual 114	android/util/JsonReader:beginObject	()V
    //   37: aconst_null
    //   38: astore 17
    //   40: iconst_0
    //   41: istore_3
    //   42: aconst_null
    //   43: astore 15
    //   45: aconst_null
    //   46: astore 14
    //   48: aconst_null
    //   49: astore 13
    //   51: aconst_null
    //   52: astore 12
    //   54: aconst_null
    //   55: astore 10
    //   57: aconst_null
    //   58: astore 9
    //   60: aconst_null
    //   61: astore 7
    //   63: aconst_null
    //   64: astore 8
    //   66: aconst_null
    //   67: astore 6
    //   69: aconst_null
    //   70: astore 5
    //   72: aload_1
    //   73: invokevirtual 96	android/util/JsonReader:hasNext	()Z
    //   76: istore 4
    //   78: iload 4
    //   80: ifeq +502 -> 582
    //   83: aload_1
    //   84: invokevirtual 117	android/util/JsonReader:nextName	()Ljava/lang/String;
    //   87: astore 18
    //   89: aload 18
    //   91: invokevirtual 136	java/lang/String:hashCode	()I
    //   94: lookupswitch	default:+696->790, -1890362749:+324->418, -1337936983:+308->402, -1335157162:+293->387, -1314244092:+278->372, -450957489:+262->356, -68904783:+246->340, -51457840:+231->325, 96801:+216->310, 3599307:+200->294, 358603558:+185->279, 398106529:+169->263, 951530927:+154->248, 1478300413:+138->232, 1984987798:+122->216
    //   216: aload 18
    //   218: ldc -31
    //   220: invokevirtual 145	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   223: ifeq +567 -> 790
    //   226: bipush 8
    //   228: istore_2
    //   229: goto +563 -> 792
    //   232: aload 18
    //   234: ldc -29
    //   236: invokevirtual 145	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   239: ifeq +551 -> 790
    //   242: bipush 9
    //   244: istore_2
    //   245: goto +547 -> 792
    //   248: aload 18
    //   250: ldc -27
    //   252: invokevirtual 145	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   255: ifeq +535 -> 790
    //   258: iconst_2
    //   259: istore_2
    //   260: goto +532 -> 792
    //   263: aload 18
    //   265: ldc -25
    //   267: invokevirtual 145	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   270: ifeq +520 -> 790
    //   273: bipush 10
    //   275: istore_2
    //   276: goto +516 -> 792
    //   279: aload 18
    //   281: ldc -23
    //   283: invokevirtual 145	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   286: ifeq +504 -> 790
    //   289: iconst_4
    //   290: istore_2
    //   291: goto +501 -> 792
    //   294: aload 18
    //   296: ldc -21
    //   298: invokevirtual 145	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   301: ifeq +489 -> 790
    //   304: bipush 13
    //   306: istore_2
    //   307: goto +485 -> 792
    //   310: aload 18
    //   312: ldc -19
    //   314: invokevirtual 145	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   317: ifeq +473 -> 790
    //   320: iconst_0
    //   321: istore_2
    //   322: goto +470 -> 792
    //   325: aload 18
    //   327: ldc -17
    //   329: invokevirtual 145	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   332: ifeq +458 -> 790
    //   335: iconst_1
    //   336: istore_2
    //   337: goto +455 -> 792
    //   340: aload 18
    //   342: ldc -15
    //   344: invokevirtual 145	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   347: ifeq +443 -> 790
    //   350: bipush 6
    //   352: istore_2
    //   353: goto +439 -> 792
    //   356: aload 18
    //   358: ldc -105
    //   360: invokevirtual 145	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   363: ifeq +427 -> 790
    //   366: bipush 7
    //   368: istore_2
    //   369: goto +423 -> 792
    //   372: aload 18
    //   374: ldc -13
    //   376: invokevirtual 145	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   379: ifeq +411 -> 790
    //   382: iconst_5
    //   383: istore_2
    //   384: goto +408 -> 792
    //   387: aload 18
    //   389: ldc -11
    //   391: invokevirtual 145	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   394: ifeq +396 -> 790
    //   397: iconst_3
    //   398: istore_2
    //   399: goto +393 -> 792
    //   402: aload 18
    //   404: ldc -9
    //   406: invokevirtual 145	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   409: ifeq +381 -> 790
    //   412: bipush 11
    //   414: istore_2
    //   415: goto +377 -> 792
    //   418: aload 18
    //   420: ldc -7
    //   422: invokevirtual 145	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   425: ifeq +365 -> 790
    //   428: bipush 12
    //   430: istore_2
    //   431: goto +361 -> 792
    //   434: aload_1
    //   435: invokevirtual 154	android/util/JsonReader:skipValue	()V
    //   438: goto -366 -> 72
    //   441: aload_1
    //   442: invokestatic 253	com/bugsnag/android/ErrorReader:readUser	(Landroid/util/JsonReader;)Lcom/bugsnag/android/User;
    //   445: astore 10
    //   447: goto -375 -> 72
    //   450: aload_1
    //   451: invokevirtual 39	android/util/JsonReader:nextBoolean	()Z
    //   454: istore_3
    //   455: goto -383 -> 72
    //   458: aload_1
    //   459: invokestatic 257	com/bugsnag/android/ErrorReader:readThreadState	(Landroid/util/JsonReader;)Lcom/bugsnag/android/ThreadState;
    //   462: astore 13
    //   464: goto -392 -> 72
    //   467: aload_1
    //   468: invokestatic 261	com/bugsnag/android/ErrorReader:readSeverityReason	(Landroid/util/JsonReader;)Ljava/util/ArrayList;
    //   471: astore 17
    //   473: goto -401 -> 72
    //   476: aload_1
    //   477: invokevirtual 56	android/util/JsonReader:nextString	()Ljava/lang/String;
    //   480: invokestatic 265	com/bugsnag/android/Severity:fromString	(Ljava/lang/String;)Lcom/bugsnag/android/Severity;
    //   483: astore 16
    //   485: goto -413 -> 72
    //   488: aload_1
    //   489: invokestatic 269	com/bugsnag/android/ErrorReader:readSession	(Landroid/util/JsonReader;)Lcom/bugsnag/android/Session;
    //   492: astore 14
    //   494: goto -422 -> 72
    //   497: new 271	com/bugsnag/android/MetaData
    //   500: dup
    //   501: aload_1
    //   502: invokestatic 49	com/bugsnag/android/ErrorReader:jsonObjectToMap	(Landroid/util/JsonReader;)Ljava/util/Map;
    //   505: invokespecial 274	com/bugsnag/android/MetaData:<init>	(Ljava/util/Map;)V
    //   508: astore 15
    //   510: goto -438 -> 72
    //   513: aload_1
    //   514: invokevirtual 56	android/util/JsonReader:nextString	()Ljava/lang/String;
    //   517: astore 7
    //   519: goto -447 -> 72
    //   522: aload_0
    //   523: aload_1
    //   524: invokestatic 278	com/bugsnag/android/ErrorReader:readExceptions	(Lcom/bugsnag/android/Configuration;Landroid/util/JsonReader;)Lcom/bugsnag/android/Exceptions;
    //   527: astore 12
    //   529: goto -457 -> 72
    //   532: aload_1
    //   533: invokestatic 35	com/bugsnag/android/ErrorReader:jsonArrayToList	(Landroid/util/JsonReader;)Ljava/util/List;
    //   536: astore 11
    //   538: goto -466 -> 72
    //   541: aload_1
    //   542: invokestatic 49	com/bugsnag/android/ErrorReader:jsonObjectToMap	(Landroid/util/JsonReader;)Ljava/util/Map;
    //   545: astore 6
    //   547: goto -475 -> 72
    //   550: aload_1
    //   551: invokevirtual 56	android/util/JsonReader:nextString	()Ljava/lang/String;
    //   554: astore 9
    //   556: goto -484 -> 72
    //   559: aload_0
    //   560: aload_1
    //   561: invokestatic 280	com/bugsnag/android/ErrorReader:readBreadcrumbs	(Lcom/bugsnag/android/Configuration;Landroid/util/JsonReader;)Lcom/bugsnag/android/Breadcrumbs;
    //   564: astore 5
    //   566: goto -494 -> 72
    //   569: aload_1
    //   570: invokestatic 49	com/bugsnag/android/ErrorReader:jsonObjectToMap	(Landroid/util/JsonReader;)Ljava/util/Map;
    //   573: astore 8
    //   575: goto -503 -> 72
    //   578: astore_0
    //   579: goto +194 -> 773
    //   582: aload_1
    //   583: invokevirtual 126	android/util/JsonReader:endObject	()V
    //   586: aload 17
    //   588: ifnull +163 -> 751
    //   591: aload 12
    //   593: ifnull +158 -> 751
    //   596: aload 17
    //   598: invokevirtual 283	java/util/ArrayList:size	()I
    //   601: istore_2
    //   602: iload_2
    //   603: iconst_1
    //   604: if_icmple +17 -> 621
    //   607: aload 17
    //   609: iconst_1
    //   610: invokevirtual 287	java/util/ArrayList:get	(I)Ljava/lang/Object;
    //   613: checkcast 133	java/lang/String
    //   616: astore 18
    //   618: goto +6 -> 624
    //   621: aconst_null
    //   622: astore 18
    //   624: new 289	com/bugsnag/android/HandledState
    //   627: dup
    //   628: aload 17
    //   630: iconst_0
    //   631: invokevirtual 287	java/util/ArrayList:get	(I)Ljava/lang/Object;
    //   634: checkcast 133	java/lang/String
    //   637: aload 16
    //   639: iload_3
    //   640: aload 18
    //   642: invokespecial 292	com/bugsnag/android/HandledState:<init>	(Ljava/lang/String;Lcom/bugsnag/android/Severity;ZLjava/lang/String;)V
    //   645: astore 17
    //   647: aload 12
    //   649: invokevirtual 298	com/bugsnag/android/Exceptions:getException	()Lcom/bugsnag/android/BugsnagException;
    //   652: astore 18
    //   654: new 300	com/bugsnag/android/Error
    //   657: dup
    //   658: aload_0
    //   659: aload 18
    //   661: aload 17
    //   663: aload 16
    //   665: aload 14
    //   667: aload 13
    //   669: invokespecial 303	com/bugsnag/android/Error:<init>	(Lcom/bugsnag/android/Configuration;Ljava/lang/Throwable;Lcom/bugsnag/android/HandledState;Lcom/bugsnag/android/Severity;Lcom/bugsnag/android/Session;Lcom/bugsnag/android/ThreadState;)V
    //   672: astore_0
    //   673: aload_0
    //   674: invokevirtual 307	com/bugsnag/android/Error:getExceptions	()Lcom/bugsnag/android/Exceptions;
    //   677: aload 12
    //   679: invokevirtual 310	com/bugsnag/android/Exceptions:getExceptionType	()Ljava/lang/String;
    //   682: invokevirtual 314	com/bugsnag/android/Exceptions:setExceptionType	(Ljava/lang/String;)V
    //   685: aload_0
    //   686: aload 11
    //   688: iconst_0
    //   689: anewarray 133	java/lang/String
    //   692: invokeinterface 318 2 0
    //   697: checkcast 320	[Ljava/lang/String;
    //   700: invokevirtual 324	com/bugsnag/android/Error:setProjectPackages	([Ljava/lang/String;)V
    //   703: aload_0
    //   704: aload 10
    //   706: invokevirtual 328	com/bugsnag/android/Error:setUser	(Lcom/bugsnag/android/User;)V
    //   709: aload_0
    //   710: aload 9
    //   712: invokevirtual 331	com/bugsnag/android/Error:setContext	(Ljava/lang/String;)V
    //   715: aload_0
    //   716: aload 7
    //   718: invokevirtual 334	com/bugsnag/android/Error:setGroupingHash	(Ljava/lang/String;)V
    //   721: aload_0
    //   722: aload 8
    //   724: invokevirtual 337	com/bugsnag/android/Error:setAppData	(Ljava/util/Map;)V
    //   727: aload_0
    //   728: aload 15
    //   730: invokevirtual 341	com/bugsnag/android/Error:setMetaData	(Lcom/bugsnag/android/MetaData;)V
    //   733: aload_0
    //   734: aload 6
    //   736: invokevirtual 344	com/bugsnag/android/Error:setDeviceData	(Ljava/util/Map;)V
    //   739: aload_0
    //   740: aload 5
    //   742: invokevirtual 348	com/bugsnag/android/Error:setBreadcrumbs	(Lcom/bugsnag/android/Breadcrumbs;)V
    //   745: aload_1
    //   746: invokevirtual 351	android/util/JsonReader:close	()V
    //   749: aload_0
    //   750: areturn
    //   751: new 15	java/io/IOException
    //   754: dup
    //   755: ldc_w 353
    //   758: invokespecial 355	java/io/IOException:<init>	(Ljava/lang/String;)V
    //   761: athrow
    //   762: astore_0
    //   763: goto +10 -> 773
    //   766: astore_0
    //   767: goto +6 -> 773
    //   770: astore_0
    //   771: aconst_null
    //   772: astore_1
    //   773: aload_1
    //   774: ifnull +7 -> 781
    //   777: aload_1
    //   778: invokevirtual 351	android/util/JsonReader:close	()V
    //   781: aload_0
    //   782: athrow
    //   783: astore_1
    //   784: aload_0
    //   785: areturn
    //   786: astore_1
    //   787: goto -6 -> 781
    //   790: iconst_m1
    //   791: istore_2
    //   792: iload_2
    //   793: tableswitch	default:+71->864, 0:+-224->569, 1:+-234->559, 2:+-243->550, 3:+-252->541, 4:+-261->532, 5:+-271->522, 6:+-280->513, 7:+-296->497, 8:+-305->488, 9:+-317->476, 10:+-326->467, 11:+-335->458, 12:+-343->450, 13:+-352->441
    //   864: goto -430 -> 434
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	867	0	paramConfiguration	Configuration
    //   0	867	1	paramFile	java.io.File
    //   228	565	2	i	int
    //   41	599	3	bool1	boolean
    //   76	3	4	bool2	boolean
    //   70	671	5	localBreadcrumbs	Breadcrumbs
    //   67	668	6	localMap1	Map
    //   61	656	7	str1	String
    //   64	659	8	localMap2	Map
    //   58	653	9	str2	String
    //   55	650	10	localUser	User
    //   8	679	11	localList	List
    //   52	626	12	localExceptions	Exceptions
    //   49	619	13	localThreadState	ThreadState
    //   46	620	14	localSession	Session
    //   43	686	15	localMetaData	MetaData
    //   3	661	16	localSeverity	Severity
    //   38	624	17	localObject1	Object
    //   87	573	18	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   83	216	578	finally
    //   216	226	578	finally
    //   232	242	578	finally
    //   248	258	578	finally
    //   263	273	578	finally
    //   279	289	578	finally
    //   294	304	578	finally
    //   310	320	578	finally
    //   325	335	578	finally
    //   340	350	578	finally
    //   356	366	578	finally
    //   372	382	578	finally
    //   387	397	578	finally
    //   402	412	578	finally
    //   418	428	578	finally
    //   434	438	578	finally
    //   441	447	578	finally
    //   450	455	578	finally
    //   458	464	578	finally
    //   467	473	578	finally
    //   476	485	578	finally
    //   488	494	578	finally
    //   497	510	578	finally
    //   513	519	578	finally
    //   522	529	578	finally
    //   532	538	578	finally
    //   541	547	578	finally
    //   550	556	578	finally
    //   559	566	578	finally
    //   569	575	578	finally
    //   607	618	578	finally
    //   654	745	762	finally
    //   751	762	762	finally
    //   33	37	766	finally
    //   72	78	766	finally
    //   582	586	766	finally
    //   596	602	766	finally
    //   624	654	766	finally
    //   0	33	770	finally
    //   745	749	783	java/lang/Exception
    //   777	781	786	java/lang/Exception
  }
  
  private static BugsnagException readException(JsonReader paramJsonReader)
    throws IOException
  {
    paramJsonReader.beginObject();
    Object localObject = new ArrayList();
    String str2 = null;
    String str1 = "android";
    String str3 = null;
    while (paramJsonReader.hasNext())
    {
      String str4 = paramJsonReader.nextName();
      int i = -1;
      int j = str4.hashCode();
      if (j != 3575610)
      {
        if (j != 954925063)
        {
          if (j != 1610083408)
          {
            if ((j == 2055832509) && (str4.equals("stacktrace"))) {
              i = 2;
            }
          }
          else if (str4.equals("errorClass")) {
            i = 0;
          }
        }
        else if (str4.equals("message")) {
          i = 1;
        }
      }
      else if (str4.equals("type")) {
        i = 3;
      }
      switch (i)
      {
      default: 
        paramJsonReader.skipValue();
        break;
      case 3: 
        str1 = paramJsonReader.nextString();
        break;
      case 2: 
        localObject = readStackFrames(paramJsonReader);
        break;
      case 1: 
        str3 = paramJsonReader.nextString();
        break;
      case 0: 
        str2 = paramJsonReader.nextString();
      }
    }
    paramJsonReader.endObject();
    paramJsonReader = new BugsnagException(str2, str3, (List)localObject);
    paramJsonReader.setType(str1);
    return paramJsonReader;
  }
  
  private static Exceptions readExceptions(Configuration paramConfiguration, JsonReader paramJsonReader)
    throws IOException
  {
    paramJsonReader.beginArray();
    BugsnagException localBugsnagException1 = readException(paramJsonReader);
    BugsnagException localBugsnagException2;
    for (Object localObject = localBugsnagException1; paramJsonReader.hasNext(); localObject = localBugsnagException2)
    {
      localBugsnagException2 = readException(paramJsonReader);
      ((Throwable)localObject).initCause(localBugsnagException2);
    }
    paramJsonReader.endArray();
    paramConfiguration = new Exceptions(paramConfiguration, localBugsnagException1);
    if (localBugsnagException1 != null) {
      paramConfiguration.setExceptionType(localBugsnagException1.getType());
    }
    return paramConfiguration;
  }
  
  private static Session readSession(JsonReader paramJsonReader)
    throws IOException
  {
    paramJsonReader.beginObject();
    String str2 = null;
    String str1 = str2;
    Object localObject1 = str1;
    int j = 0;
    int k = 0;
    Object localObject2 = str1;
    str1 = str2;
    while (paramJsonReader.hasNext())
    {
      str2 = paramJsonReader.nextName();
      int i = str2.hashCode();
      if (i != -2128794476)
      {
        if (i != -1291329255)
        {
          if (i != 3355)
          {
            if ((i == 3599307) && (str2.equals("user")))
            {
              i = 3;
              break label142;
            }
          }
          else if (str2.equals("id"))
          {
            i = 0;
            break label142;
          }
        }
        else if (str2.equals("events"))
        {
          i = 2;
          break label142;
        }
      }
      else if (str2.equals("startedAt"))
      {
        i = 1;
        break label142;
      }
      i = -1;
      switch (i)
      {
      default: 
        paramJsonReader.skipValue();
        break;
      case 3: 
        localObject1 = readUser(paramJsonReader);
        break;
      case 2: 
        paramJsonReader.beginObject();
        while (paramJsonReader.hasNext())
        {
          str2 = paramJsonReader.nextName();
          i = str2.hashCode();
          if (i != -1890362749)
          {
            if ((i == 692803388) && (str2.equals("handled")))
            {
              i = 1;
              break label261;
            }
          }
          else if (str2.equals("unhandled"))
          {
            i = 0;
            break label261;
          }
          i = -1;
          switch (i)
          {
          default: 
            paramJsonReader.skipValue();
            break;
          case 1: 
            k = paramJsonReader.nextInt();
            break;
          case 0: 
            j = paramJsonReader.nextInt();
          }
        }
        paramJsonReader.endObject();
        break;
      case 1: 
        try
        {
          localObject2 = DateUtils.fromIso8601(paramJsonReader.nextString());
        }
        catch (Exception paramJsonReader)
        {
          throw new IOException("Unable to parse session startedAt: ", paramJsonReader);
        }
      case 0: 
        label142:
        label261:
        str1 = paramJsonReader.nextString();
      }
    }
    paramJsonReader.endObject();
    if ((str1 != null) && (localObject2 != null)) {
      return new Session(str1, (Date)localObject2, (User)localObject1, j, k);
    }
    throw new IOException("Session data missing required fields");
  }
  
  private static ArrayList<String> readSeverityReason(JsonReader paramJsonReader)
    throws IOException
  {
    paramJsonReader.beginObject();
    String str2 = null;
    String str1 = null;
    while (paramJsonReader.hasNext())
    {
      String str3 = paramJsonReader.nextName();
      int i = -1;
      int j = str3.hashCode();
      if (j != 3575610)
      {
        if ((j == 405645655) && (str3.equals("attributes"))) {
          i = 1;
        }
      }
      else if (str3.equals("type")) {
        i = 0;
      }
      switch (i)
      {
      default: 
        paramJsonReader.skipValue();
        break;
      case 1: 
        paramJsonReader.beginObject();
        paramJsonReader.nextName();
        str1 = paramJsonReader.nextString();
        paramJsonReader.endObject();
        break;
      case 0: 
        str2 = paramJsonReader.nextString();
      }
    }
    paramJsonReader.endObject();
    paramJsonReader = new ArrayList();
    if (str2 != null)
    {
      paramJsonReader.add(str2);
      if (str1 != null) {
        paramJsonReader.add(str1);
      }
      return paramJsonReader;
    }
    throw new IOException("Severity Reason type is required");
  }
  
  private static Map<String, Object> readStackFrame(JsonReader paramJsonReader)
    throws IOException
  {
    HashMap localHashMap = new HashMap();
    paramJsonReader.beginObject();
    try
    {
      String str;
      if (paramJsonReader.hasNext())
      {
        str = paramJsonReader.nextName();
        switch (1.$SwitchMap$android$util$JsonToken[paramJsonReader.peek().ordinal()])
        {
        }
      }
      for (;;)
      {
        paramJsonReader.skipValue();
        break;
        localHashMap.put(str, deserializeNumber(paramJsonReader));
        break;
        localHashMap.put(str, paramJsonReader.nextString());
        break;
      }
    }
    catch (IllegalStateException localIllegalStateException)
    {
      Logger.warn("Failed to read stackframe", localIllegalStateException);
      paramJsonReader.endObject();
      return localHashMap;
    }
  }
  
  private static List<Map<String, Object>> readStackFrames(JsonReader paramJsonReader)
    throws IOException
  {
    ArrayList localArrayList = new ArrayList();
    paramJsonReader.beginArray();
    while (paramJsonReader.hasNext()) {
      localArrayList.add(readStackFrame(paramJsonReader));
    }
    paramJsonReader.endArray();
    return localArrayList;
  }
  
  private static CachedThread readThread(JsonReader paramJsonReader)
    throws IOException
  {
    paramJsonReader.beginObject();
    String str2 = null;
    String str1 = str2;
    Object localObject = str1;
    long l = 0L;
    boolean bool = false;
    while (paramJsonReader.hasNext())
    {
      String str3 = paramJsonReader.nextName();
      int i = str3.hashCode();
      if (i != -767067472)
      {
        if (i != 3355)
        {
          if (i != 3373707)
          {
            if (i != 3575610)
            {
              if ((i == 2055832509) && (str3.equals("stacktrace")))
              {
                i = 3;
                break label155;
              }
            }
            else if (str3.equals("type"))
            {
              i = 2;
              break label155;
            }
          }
          else if (str3.equals("name"))
          {
            i = 1;
            break label155;
          }
        }
        else if (str3.equals("id"))
        {
          i = 0;
          break label155;
        }
      }
      else if (str3.equals("errorReportingThread"))
      {
        i = 4;
        break label155;
      }
      i = -1;
      switch (i)
      {
      default: 
        paramJsonReader.skipValue();
        break;
      case 4: 
        bool = paramJsonReader.nextBoolean();
        break;
      case 3: 
        localObject = readStackFrames(paramJsonReader);
        break;
      case 2: 
        str1 = paramJsonReader.nextString();
        break;
      case 1: 
        str2 = paramJsonReader.nextString();
        break;
      case 0: 
        label155:
        l = paramJsonReader.nextLong();
      }
    }
    paramJsonReader.endObject();
    if ((str1 != null) && (localObject != null)) {
      return new CachedThread(l, str2, str1, bool, (List)localObject);
    }
    return null;
  }
  
  private static ThreadState readThreadState(JsonReader paramJsonReader)
    throws IOException
  {
    ArrayList localArrayList = new ArrayList();
    paramJsonReader.beginArray();
    while (paramJsonReader.hasNext())
    {
      CachedThread localCachedThread = readThread(paramJsonReader);
      if (localCachedThread != null) {
        localArrayList.add(localCachedThread);
      }
    }
    paramJsonReader.endArray();
    return new ThreadState((CachedThread[])localArrayList.toArray(new CachedThread[0]));
  }
  
  private static User readUser(JsonReader paramJsonReader)
    throws IOException
  {
    User localUser = new User();
    paramJsonReader.beginObject();
    while (paramJsonReader.hasNext())
    {
      String str = paramJsonReader.nextName();
      int i = -1;
      int j = str.hashCode();
      if (j != 3355)
      {
        if (j != 3373707)
        {
          if ((j == 96619420) && (str.equals("email"))) {
            i = 2;
          }
        }
        else if (str.equals("name")) {
          i = 0;
        }
      }
      else if (str.equals("id")) {
        i = 1;
      }
      switch (i)
      {
      default: 
        paramJsonReader.skipValue();
        break;
      case 2: 
        localUser.setEmail(paramJsonReader.nextString());
        break;
      case 1: 
        localUser.setId(paramJsonReader.nextString());
        break;
      case 0: 
        localUser.setName(paramJsonReader.nextString());
      }
    }
    paramJsonReader.endObject();
    return localUser;
  }
}
