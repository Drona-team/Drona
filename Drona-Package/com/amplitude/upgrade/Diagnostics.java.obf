package com.amplitude.api;

import android.util.Log;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import okhttp3.Call;
import okhttp3.FormBody.Builder;
import okhttp3.OkHttpClient;
import okhttp3.Request.Builder;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class Diagnostics
{
  public static final int DIAGNOSTIC_EVENT_API_VERSION = 1;
  public static final String DIAGNOSTIC_EVENT_ENDPOINT = "https://api.amplitude.com/diagnostic";
  public static final int DIAGNOSTIC_EVENT_MAX_COUNT = 50;
  public static final int DIAGNOSTIC_EVENT_MIN_COUNT = 5;
  protected static Diagnostics instance;
  private volatile String apiKey;
  private volatile String deviceId;
  int diagnosticEventMaxCount = 50;
  WorkerThread diagnosticThread = new WorkerThread("diagnosticThread");
  volatile boolean enabled = false;
  private volatile OkHttpClient httpClient;
  List<String> unsentErrorStrings = new ArrayList(diagnosticEventMaxCount);
  Map<String, JSONObject> unsentErrors = new HashMap(diagnosticEventMaxCount);
  String url = "https://api.amplitude.com/diagnostic";
  
  private Diagnostics()
  {
    diagnosticThread.start();
  }
  
  static Diagnostics getLogger()
  {
    try
    {
      if (instance == null) {
        instance = new Diagnostics();
      }
      Diagnostics localDiagnostics = instance;
      return localDiagnostics;
    }
    finally {}
  }
  
  Diagnostics disableLogging()
  {
    enabled = false;
    return this;
  }
  
  Diagnostics enableLogging(OkHttpClient paramOkHttpClient, String paramString1, String paramString2)
  {
    enabled = true;
    apiKey = paramString1;
    httpClient = paramOkHttpClient;
    deviceId = paramString2;
    return this;
  }
  
  Diagnostics flushEvents()
  {
    if ((enabled) && (!Utils.isEmptyString(apiKey)) && (httpClient != null))
    {
      if (Utils.isEmptyString(deviceId)) {
        return this;
      }
      runOnBgThread(new Runnable()
      {
        public void run()
        {
          if (unsentErrorStrings.isEmpty()) {
            return;
          }
          Object localObject = new ArrayList(unsentErrorStrings.size());
          Iterator localIterator = unsentErrorStrings.iterator();
          while (localIterator.hasNext())
          {
            String str = (String)localIterator.next();
            ((List)localObject).add(unsentErrors.get(str));
          }
          localObject = new JSONArray((Collection)localObject).toString();
          if (!Utils.isEmptyString((String)localObject)) {
            makeEventUploadPostRequest((String)localObject);
          }
        }
      });
      return this;
    }
    return this;
  }
  
  Diagnostics logError(String paramString)
  {
    return logError(paramString, null);
  }
  
  Diagnostics logError(final String paramString, final Throwable paramThrowable)
  {
    if ((enabled) && (!Utils.isEmptyString(paramString)))
    {
      if (Utils.isEmptyString(deviceId)) {
        return this;
      }
      runOnBgThread(new Runnable()
      {
        public void run()
        {
          JSONObject localJSONObject = (JSONObject)unsentErrors.get(paramString);
          if (localJSONObject == null) {
            localJSONObject = new JSONObject();
          }
          try
          {
            localJSONObject.put("error", AmplitudeClient.truncate(paramString));
            localJSONObject.put("timestamp", System.currentTimeMillis());
            localJSONObject.put("device_id", deviceId);
            localJSONObject.put("count", 1);
            String str;
            if (paramThrowable != null)
            {
              str = Log.getStackTraceString(paramThrowable);
              if (!Utils.isEmptyString(str)) {
                localJSONObject.put("stack_trace", AmplitudeClient.truncate(str));
              }
            }
            if (unsentErrorStrings.size() >= diagnosticEventMaxCount)
            {
              i = 0;
              while (i < 5)
              {
                str = (String)unsentErrorStrings.remove(0);
                unsentErrors.remove(str);
                i += 1;
              }
            }
            unsentErrors.put(paramString, localJSONObject);
            unsentErrorStrings.add(paramString);
            return;
          }
          catch (JSONException localJSONException) {}
          int i = localJSONObject.optInt("count", 0);
          localJSONObject.put("count", i + 1);
          return;
        }
      });
      return this;
    }
    return this;
  }
  
  protected void makeEventUploadPostRequest(String paramString)
  {
    paramString = new FormBody.Builder().add("v", "1").add("client", apiKey).add("e", paramString);
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("");
    localStringBuilder.append(System.currentTimeMillis());
    paramString = paramString.add("upload_time", localStringBuilder.toString()).build();
    paramString = new Request.Builder().url(url).post(paramString).build();
    try
    {
      if (httpClient.newCall(paramString).execute().body().string().equals("success"))
      {
        unsentErrors.clear();
        unsentErrorStrings.clear();
      }
      return;
    }
    catch (IOException|AssertionError|Exception paramString) {}
  }
  
  protected void runOnBgThread(Runnable paramRunnable)
  {
    if (Thread.currentThread() != diagnosticThread)
    {
      diagnosticThread.post(paramRunnable);
      return;
    }
    paramRunnable.run();
  }
  
  Diagnostics setDiagnosticEventMaxCount(final int paramInt)
  {
    runOnBgThread(new Runnable()
    {
      public void run()
      {
        jdField_thisdiagnosticEventMaxCount = Math.max(paramInt, 5);
        jdField_thisdiagnosticEventMaxCount = Math.min(jdField_thisdiagnosticEventMaxCount, 50);
        if (jdField_thisdiagnosticEventMaxCount < jdField_thisunsentErrorStrings.size())
        {
          int i = 0;
          while (i < unsentErrorStrings.size() - jdField_thisdiagnosticEventMaxCount)
          {
            String str = (String)unsentErrorStrings.remove(0);
            unsentErrors.remove(str);
            i += 1;
          }
        }
      }
    });
    return this;
  }
}
