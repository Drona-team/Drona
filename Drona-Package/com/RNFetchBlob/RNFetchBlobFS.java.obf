package com.RNFetchBlob;

import android.content.ContentResolver;
import android.content.pm.ApplicationInfo;
import android.content.res.AssetFileDescriptor;
import android.content.res.AssetManager;
import android.media.MediaScannerConnection;
import android.media.MediaScannerConnection.OnScanCompletedListener;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build.VERSION;
import android.os.Environment;
import android.os.StatFs;
import android.os.SystemClock;
import android.util.Base64;
import com.RNFetchBlob.Utils.PathResolver;
import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.WritableArray;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.modules.core.DeviceEventManagerModule.RCTDeviceEventEmitter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.security.MessageDigest;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.UUID;

class RNFetchBlobFS
{
  private static HashMap<String, RNFetchBlobFS> fileStreams = new HashMap();
  private DeviceEventManagerModule.RCTDeviceEventEmitter emitter;
  private String encoding = "base64";
  private ReactApplicationContext mCtx;
  private OutputStream writeStreamInstance = null;
  
  RNFetchBlobFS(ReactApplicationContext paramReactApplicationContext)
  {
    mCtx = paramReactApplicationContext;
    emitter = ((DeviceEventManagerModule.RCTDeviceEventEmitter)paramReactApplicationContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class));
  }
  
  static void closeStream(String paramString, Callback paramCallback)
  {
    try
    {
      OutputStream localOutputStream = fileStreamsgetwriteStreamInstance;
      fileStreams.remove(paramString);
      localOutputStream.close();
      paramCallback.invoke(new Object[0]);
      return;
    }
    catch (Exception paramString)
    {
      paramCallback.invoke(new Object[] { paramString.getLocalizedMessage() });
    }
  }
  
  /* Error */
  static void cp(String paramString1, String paramString2, Callback paramCallback)
  {
    // Byte code:
    //   0: aload_0
    //   1: invokestatic 83	com/RNFetchBlob/RNFetchBlobFS:normalizePath	(Ljava/lang/String;)Ljava/lang/String;
    //   4: astore 4
    //   6: ldc 85
    //   8: astore 6
    //   10: aconst_null
    //   11: astore 5
    //   13: aconst_null
    //   14: astore_0
    //   15: aload 4
    //   17: invokestatic 89	com/RNFetchBlob/RNFetchBlobFS:isPathExists	(Ljava/lang/String;)Z
    //   20: ifne +50 -> 70
    //   23: new 91	java/lang/StringBuilder
    //   26: dup
    //   27: invokespecial 92	java/lang/StringBuilder:<init>	()V
    //   30: astore_1
    //   31: aload_1
    //   32: ldc 94
    //   34: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   37: pop
    //   38: aload_1
    //   39: aload 4
    //   41: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   44: pop
    //   45: aload_1
    //   46: ldc 100
    //   48: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   51: pop
    //   52: aload_2
    //   53: iconst_1
    //   54: anewarray 4	java/lang/Object
    //   57: dup
    //   58: iconst_0
    //   59: aload_1
    //   60: invokevirtual 103	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   63: aastore
    //   64: invokeinterface 73 2 0
    //   69: return
    //   70: new 105	java/io/File
    //   73: dup
    //   74: aload_1
    //   75: invokespecial 108	java/io/File:<init>	(Ljava/lang/String;)V
    //   78: invokevirtual 112	java/io/File:exists	()Z
    //   81: ifne +68 -> 149
    //   84: new 105	java/io/File
    //   87: dup
    //   88: aload_1
    //   89: invokespecial 108	java/io/File:<init>	(Ljava/lang/String;)V
    //   92: invokevirtual 115	java/io/File:createNewFile	()Z
    //   95: ifne +54 -> 149
    //   98: new 91	java/lang/StringBuilder
    //   101: dup
    //   102: invokespecial 92	java/lang/StringBuilder:<init>	()V
    //   105: astore 4
    //   107: aload 4
    //   109: ldc 117
    //   111: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   114: pop
    //   115: aload 4
    //   117: aload_1
    //   118: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   121: pop
    //   122: aload 4
    //   124: ldc 119
    //   126: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   129: pop
    //   130: aload_2
    //   131: iconst_1
    //   132: anewarray 4	java/lang/Object
    //   135: dup
    //   136: iconst_0
    //   137: aload 4
    //   139: invokevirtual 103	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   142: aastore
    //   143: invokeinterface 73 2 0
    //   148: return
    //   149: aload 4
    //   151: invokestatic 123	com/RNFetchBlob/RNFetchBlobFS:inputStreamFromPath	(Ljava/lang/String;)Ljava/io/InputStream;
    //   154: astore 4
    //   156: new 125	java/io/FileOutputStream
    //   159: dup
    //   160: aload_1
    //   161: invokespecial 126	java/io/FileOutputStream:<init>	(Ljava/lang/String;)V
    //   164: astore_0
    //   165: sipush 10240
    //   168: newarray byte
    //   170: astore_1
    //   171: aload 4
    //   173: aload_1
    //   174: invokevirtual 132	java/io/InputStream:read	([B)I
    //   177: istore_3
    //   178: iload_3
    //   179: ifle +13 -> 192
    //   182: aload_0
    //   183: aload_1
    //   184: iconst_0
    //   185: iload_3
    //   186: invokevirtual 136	java/io/OutputStream:write	([BII)V
    //   189: goto -18 -> 171
    //   192: aload 4
    //   194: ifnull +11 -> 205
    //   197: aload 4
    //   199: invokevirtual 137	java/io/InputStream:close	()V
    //   202: goto +3 -> 205
    //   205: aload_0
    //   206: invokevirtual 67	java/io/OutputStream:close	()V
    //   209: aload 6
    //   211: astore_0
    //   212: goto +185 -> 397
    //   215: new 91	java/lang/StringBuilder
    //   218: dup
    //   219: invokespecial 92	java/lang/StringBuilder:<init>	()V
    //   222: astore_0
    //   223: aload_0
    //   224: ldc 85
    //   226: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   229: pop
    //   230: aload_0
    //   231: aload_1
    //   232: invokevirtual 77	java/lang/Exception:getLocalizedMessage	()Ljava/lang/String;
    //   235: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   238: pop
    //   239: aload_0
    //   240: invokevirtual 103	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   243: astore_0
    //   244: goto +153 -> 397
    //   247: astore_1
    //   248: goto +16 -> 264
    //   251: astore 5
    //   253: aload_0
    //   254: astore_1
    //   255: aload 5
    //   257: astore_0
    //   258: goto +20 -> 278
    //   261: astore_1
    //   262: aconst_null
    //   263: astore_0
    //   264: aload_1
    //   265: astore_2
    //   266: aload 4
    //   268: astore_1
    //   269: aload_0
    //   270: astore 4
    //   272: goto +163 -> 435
    //   275: astore_0
    //   276: aconst_null
    //   277: astore_1
    //   278: aload 4
    //   280: astore 5
    //   282: aload_0
    //   283: astore 4
    //   285: aload 5
    //   287: astore_0
    //   288: goto +17 -> 305
    //   291: astore_2
    //   292: aconst_null
    //   293: astore 4
    //   295: aload 5
    //   297: astore_1
    //   298: goto +137 -> 435
    //   301: astore 4
    //   303: aconst_null
    //   304: astore_1
    //   305: new 91	java/lang/StringBuilder
    //   308: dup
    //   309: invokespecial 92	java/lang/StringBuilder:<init>	()V
    //   312: astore 5
    //   314: aload 5
    //   316: ldc 85
    //   318: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   321: pop
    //   322: aload 5
    //   324: aload 4
    //   326: invokevirtual 77	java/lang/Exception:getLocalizedMessage	()Ljava/lang/String;
    //   329: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   332: pop
    //   333: aload 5
    //   335: invokevirtual 103	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   338: astore 4
    //   340: aload_0
    //   341: ifnull +10 -> 351
    //   344: aload_0
    //   345: invokevirtual 137	java/io/InputStream:close	()V
    //   348: goto +3 -> 351
    //   351: aload_1
    //   352: ifnull +42 -> 394
    //   355: aload_1
    //   356: invokevirtual 67	java/io/OutputStream:close	()V
    //   359: goto +35 -> 394
    //   362: new 91	java/lang/StringBuilder
    //   365: dup
    //   366: invokespecial 92	java/lang/StringBuilder:<init>	()V
    //   369: astore_0
    //   370: aload_0
    //   371: aload 4
    //   373: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   376: pop
    //   377: aload_0
    //   378: aload_1
    //   379: invokevirtual 77	java/lang/Exception:getLocalizedMessage	()Ljava/lang/String;
    //   382: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   385: pop
    //   386: aload_0
    //   387: invokevirtual 103	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   390: astore_0
    //   391: goto +6 -> 397
    //   394: aload 4
    //   396: astore_0
    //   397: aload_0
    //   398: ldc 85
    //   400: if_acmpeq +18 -> 418
    //   403: aload_2
    //   404: iconst_1
    //   405: anewarray 4	java/lang/Object
    //   408: dup
    //   409: iconst_0
    //   410: aload_0
    //   411: aastore
    //   412: invokeinterface 73 2 0
    //   417: return
    //   418: aload_2
    //   419: iconst_0
    //   420: anewarray 4	java/lang/Object
    //   423: invokeinterface 73 2 0
    //   428: return
    //   429: astore_2
    //   430: aload_1
    //   431: astore 4
    //   433: aload_0
    //   434: astore_1
    //   435: aload_1
    //   436: ifnull +10 -> 446
    //   439: aload_1
    //   440: invokevirtual 137	java/io/InputStream:close	()V
    //   443: goto +3 -> 446
    //   446: aload 4
    //   448: ifnull +40 -> 488
    //   451: aload 4
    //   453: invokevirtual 67	java/io/OutputStream:close	()V
    //   456: goto +32 -> 488
    //   459: new 91	java/lang/StringBuilder
    //   462: dup
    //   463: invokespecial 92	java/lang/StringBuilder:<init>	()V
    //   466: astore_0
    //   467: aload_0
    //   468: ldc 85
    //   470: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   473: pop
    //   474: aload_0
    //   475: aload_1
    //   476: invokevirtual 77	java/lang/Exception:getLocalizedMessage	()Ljava/lang/String;
    //   479: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   482: pop
    //   483: aload_0
    //   484: invokevirtual 103	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   487: pop
    //   488: aload_2
    //   489: athrow
    //   490: astore_1
    //   491: goto -276 -> 215
    //   494: astore_1
    //   495: goto -133 -> 362
    //   498: astore_1
    //   499: goto -40 -> 459
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	502	0	paramString1	String
    //   0	502	1	paramString2	String
    //   0	502	2	paramCallback	Callback
    //   177	9	3	i	int
    //   4	290	4	localObject1	Object
    //   301	24	4	localException1	Exception
    //   338	114	4	str1	String
    //   11	1	5	localObject2	Object
    //   251	5	5	localException2	Exception
    //   280	54	5	localObject3	Object
    //   8	202	6	str2	String
    // Exception table:
    //   from	to	target	type
    //   165	171	247	finally
    //   171	178	247	finally
    //   182	189	247	finally
    //   165	171	251	java/lang/Exception
    //   171	178	251	java/lang/Exception
    //   182	189	251	java/lang/Exception
    //   156	165	261	finally
    //   156	165	275	java/lang/Exception
    //   15	69	291	finally
    //   70	148	291	finally
    //   149	156	291	finally
    //   15	69	301	java/lang/Exception
    //   70	148	301	java/lang/Exception
    //   149	156	301	java/lang/Exception
    //   305	340	429	finally
    //   197	202	490	java/lang/Exception
    //   205	209	490	java/lang/Exception
    //   344	348	494	java/lang/Exception
    //   355	359	494	java/lang/Exception
    //   439	443	498	java/lang/Exception
    //   451	456	498	java/lang/Exception
  }
  
  static void createFile(String paramString1, String paramString2, String paramString3, Promise paramPromise)
  {
    try
    {
      Object localObject = new File(paramString1);
      boolean bool = ((File)localObject).createNewFile();
      if (paramString3.equals("uri"))
      {
        paramString3 = new File(paramString2.replace("RNFetchBlob-file://", ""));
        if (!paramString3.exists())
        {
          paramString1 = new StringBuilder();
          paramString1.append("Source file : ");
          paramString1.append(paramString2);
          paramString1.append(" does not exist");
          paramPromise.reject("ENOENT", paramString1.toString());
          return;
        }
        paramString2 = new FileInputStream(paramString3);
        paramString3 = new FileOutputStream((File)localObject);
        localObject = new byte['?'];
        for (int i = paramString2.read((byte[])localObject); i > 0; i = paramString2.read((byte[])localObject)) {
          paramString3.write((byte[])localObject, 0, i);
        }
        paramString2.close();
        paramString3.close();
      }
      else
      {
        if (!bool)
        {
          paramString2 = new StringBuilder();
          paramString2.append("File `");
          paramString2.append(paramString1);
          paramString2.append("` already exists");
          paramPromise.reject("EEXIST", paramString2.toString());
          return;
        }
        new FileOutputStream((File)localObject).write(stringToBytes(paramString2, paramString3));
      }
      paramPromise.resolve(paramString1);
      return;
    }
    catch (Exception paramString1)
    {
      paramPromise.reject("EUNSPECIFIED", paramString1.getLocalizedMessage());
    }
  }
  
  static void createFileASCII(String paramString, ReadableArray paramReadableArray, Promise paramPromise)
  {
    try
    {
      Object localObject = new File(paramString);
      if (!((File)localObject).createNewFile())
      {
        paramReadableArray = new StringBuilder();
        paramReadableArray.append("File at path `");
        paramReadableArray.append(paramString);
        paramReadableArray.append("` already exists");
        paramPromise.reject("EEXIST", paramReadableArray.toString());
        return;
      }
      localObject = new FileOutputStream((File)localObject);
      byte[] arrayOfByte = new byte[paramReadableArray.size()];
      int i = 0;
      while (i < paramReadableArray.size())
      {
        arrayOfByte[i] = ((byte)paramReadableArray.getInt(i));
        i += 1;
      }
      ((OutputStream)localObject).write(arrayOfByte);
      paramPromise.resolve(paramString);
      return;
    }
    catch (Exception paramString)
    {
      paramPromise.reject("EUNSPECIFIED", paramString.getLocalizedMessage());
    }
  }
  
  private static void deleteRecursive(File paramFile)
    throws IOException
  {
    if (paramFile.isDirectory())
    {
      localObject = paramFile.listFiles();
      if (localObject != null)
      {
        int j = localObject.length;
        int i = 0;
        while (i < j)
        {
          deleteRecursive(localObject[i]);
          i += 1;
        }
      }
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("Received null trying to list files of directory '");
      ((StringBuilder)localObject).append(paramFile);
      ((StringBuilder)localObject).append("'");
      throw new NullPointerException(((StringBuilder)localObject).toString());
    }
    if (paramFile.delete()) {
      return;
    }
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("Failed to delete '");
    ((StringBuilder)localObject).append(paramFile);
    ((StringBuilder)localObject).append("'");
    throw new IOException(((StringBuilder)localObject).toString());
  }
  
  static void df(Callback paramCallback)
  {
    StatFs localStatFs = new StatFs(Environment.getDataDirectory().getPath());
    WritableMap localWritableMap = Arguments.createMap();
    if (Build.VERSION.SDK_INT >= 18)
    {
      localWritableMap.putString("internal_free", String.valueOf(localStatFs.getFreeBytes()));
      localWritableMap.putString("internal_total", String.valueOf(localStatFs.getTotalBytes()));
      localStatFs = new StatFs(Environment.getExternalStorageDirectory().getPath());
      localWritableMap.putString("external_free", String.valueOf(localStatFs.getFreeBytes()));
      localWritableMap.putString("external_total", String.valueOf(localStatFs.getTotalBytes()));
    }
    paramCallback.invoke(new Object[] { null, localWritableMap });
  }
  
  private void emitStreamEvent(String paramString1, String paramString2, WritableArray paramWritableArray)
  {
    WritableMap localWritableMap = Arguments.createMap();
    localWritableMap.putString("event", paramString2);
    localWritableMap.putArray("detail", paramWritableArray);
    emitter.emit(paramString1, localWritableMap);
  }
  
  private void emitStreamEvent(String paramString1, String paramString2, String paramString3)
  {
    WritableMap localWritableMap = Arguments.createMap();
    localWritableMap.putString("event", paramString2);
    localWritableMap.putString("detail", paramString3);
    emitter.emit(paramString1, localWritableMap);
  }
  
  private void emitStreamEvent(String paramString1, String paramString2, String paramString3, String paramString4)
  {
    WritableMap localWritableMap = Arguments.createMap();
    localWritableMap.putString("event", paramString2);
    localWritableMap.putString("code", paramString3);
    localWritableMap.putString("detail", paramString4);
    emitter.emit(paramString1, localWritableMap);
  }
  
  static void exists(String paramString, Callback paramCallback)
  {
    if (isAsset(paramString)) {}
    try
    {
      paramString = paramString.replace("bundle-assets://", "");
      RNFetchBlob.RCTContext.getAssets().openFd(paramString);
      paramCallback.invoke(new Object[] { Boolean.valueOf(true), Boolean.valueOf(false) });
      return;
    }
    catch (IOException paramString)
    {
      for (;;) {}
    }
    paramCallback.invoke(new Object[] { Boolean.valueOf(false), Boolean.valueOf(false) });
    return;
    paramString = normalizePath(paramString);
    if (paramString != null)
    {
      paramCallback.invoke(new Object[] { Boolean.valueOf(new File(paramString).exists()), Boolean.valueOf(new File(paramString).isDirectory()) });
      return;
    }
    paramCallback.invoke(new Object[] { Boolean.valueOf(false), Boolean.valueOf(false) });
  }
  
  public static void getSDCardApplicationDir(ReactApplicationContext paramReactApplicationContext, Promise paramPromise)
  {
    if (Environment.getExternalStorageState().equals("mounted")) {
      try
      {
        paramPromise.resolve(paramReactApplicationContext.getExternalFilesDir(null).getParentFile().getAbsolutePath());
        return;
      }
      catch (Exception paramReactApplicationContext)
      {
        paramPromise.reject("RNFetchBlob.getSDCardApplicationDir", paramReactApplicationContext.getLocalizedMessage());
        return;
      }
    }
    paramPromise.reject("RNFetchBlob.getSDCardApplicationDir", "External storage not mounted");
  }
  
  public static void getSDCardDir(Promise paramPromise)
  {
    if (Environment.getExternalStorageState().equals("mounted"))
    {
      paramPromise.resolve(Environment.getExternalStorageDirectory().getAbsolutePath());
      return;
    }
    paramPromise.reject("RNFetchBlob.getSDCardDir", "External storage not mounted");
  }
  
  static Map<String, Object> getSystemfolders(ReactApplicationContext paramReactApplicationContext)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("DocumentDir", paramReactApplicationContext.getFilesDir().getAbsolutePath());
    localHashMap.put("CacheDir", paramReactApplicationContext.getCacheDir().getAbsolutePath());
    localHashMap.put("DCIMDir", Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM).getAbsolutePath());
    localHashMap.put("PictureDir", Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES).getAbsolutePath());
    localHashMap.put("MusicDir", Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MUSIC).getAbsolutePath());
    localHashMap.put("DownloadDir", Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getAbsolutePath());
    localHashMap.put("MovieDir", Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MOVIES).getAbsolutePath());
    localHashMap.put("RingtoneDir", Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_RINGTONES).getAbsolutePath());
    if (Environment.getExternalStorageState().equals("mounted"))
    {
      localHashMap.put("SDCardDir", Environment.getExternalStorageDirectory().getAbsolutePath());
      File localFile = paramReactApplicationContext.getExternalFilesDir(null);
      if (localFile != null) {
        localHashMap.put("SDCardApplicationDir", localFile.getParentFile().getAbsolutePath());
      } else {
        localHashMap.put("SDCardApplicationDir", "");
      }
    }
    localHashMap.put("MainBundleDir", getApplicationInfodataDir);
    return localHashMap;
  }
  
  static String getTmpPath(String paramString)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(RNFetchBlob.RCTContext.getFilesDir());
    localStringBuilder.append("/RNFetchBlobTmp_");
    localStringBuilder.append(paramString);
    return localStringBuilder.toString();
  }
  
  static void hash(String paramString1, String paramString2, Promise paramPromise)
  {
    try
    {
      Object localObject = new HashMap();
      ((Map)localObject).put("md5", "MD5");
      ((Map)localObject).put("sha1", "SHA-1");
      ((Map)localObject).put("sha224", "SHA-224");
      ((Map)localObject).put("sha256", "SHA-256");
      ((Map)localObject).put("sha384", "SHA-384");
      ((Map)localObject).put("sha512", "SHA-512");
      if (!((Map)localObject).containsKey(paramString2))
      {
        paramString1 = new StringBuilder();
        paramString1.append("Invalid algorithm '");
        paramString1.append(paramString2);
        paramString1.append("', must be one of md5, sha1, sha224, sha256, sha384, sha512");
        paramPromise.reject("EINVAL", paramString1.toString());
        return;
      }
      File localFile = new File(paramString1);
      if (localFile.isDirectory())
      {
        paramString2 = new StringBuilder();
        paramString2.append("Expecting a file but '");
        paramString2.append(paramString1);
        paramString2.append("' is a directory");
        paramPromise.reject("EISDIR", paramString2.toString());
        return;
      }
      if (!localFile.exists())
      {
        paramString2 = new StringBuilder();
        paramString2.append("No such file '");
        paramString2.append(paramString1);
        paramString2.append("'");
        paramPromise.reject("ENOENT", paramString2.toString());
        return;
      }
      paramString2 = MessageDigest.getInstance((String)((Map)localObject).get(paramString2));
      paramString1 = new FileInputStream(paramString1);
      localObject = new byte[1048576];
      if (localFile.length() != 0L) {
        for (;;)
        {
          i = paramString1.read((byte[])localObject);
          if (i == -1) {
            break;
          }
          paramString2.update((byte[])localObject, 0, i);
        }
      }
      paramString1 = new StringBuilder();
      paramString2 = paramString2.digest();
      int j = paramString2.length;
      int i = 0;
      while (i < j)
      {
        paramString1.append(String.format("%02x", new Object[] { Byte.valueOf(paramString2[i]) }));
        i += 1;
      }
      paramPromise.resolve(paramString1.toString());
      return;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
      paramPromise.reject("EUNSPECIFIED", paramString1.getLocalizedMessage());
    }
  }
  
  private static InputStream inputStreamFromPath(String paramString)
    throws IOException
  {
    if (paramString.startsWith("bundle-assets://")) {
      return RNFetchBlob.RCTContext.getAssets().open(paramString.replace("bundle-assets://", ""));
    }
    return new FileInputStream(new File(paramString));
  }
  
  static boolean isAsset(String paramString)
  {
    return (paramString != null) && (paramString.startsWith("bundle-assets://"));
  }
  
  private static boolean isPathExists(String paramString)
  {
    if (paramString.startsWith("bundle-assets://")) {}
    try
    {
      RNFetchBlob.RCTContext.getAssets().open(paramString.replace("bundle-assets://", ""));
      return true;
    }
    catch (IOException paramString)
    {
      for (;;) {}
    }
    return false;
    return new File(paramString).exists();
  }
  
  static void ls(String paramString, Promise paramPromise)
  {
    try
    {
      paramString = normalizePath(paramString);
      Object localObject = new File(paramString);
      if (!((File)localObject).exists())
      {
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("No such file '");
        ((StringBuilder)localObject).append(paramString);
        ((StringBuilder)localObject).append("'");
        paramPromise.reject("ENOENT", ((StringBuilder)localObject).toString());
        return;
      }
      if (!((File)localObject).isDirectory())
      {
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("Not a directory '");
        ((StringBuilder)localObject).append(paramString);
        ((StringBuilder)localObject).append("'");
        paramPromise.reject("ENOTDIR", ((StringBuilder)localObject).toString());
        return;
      }
      paramString = new File(paramString).list();
      localObject = Arguments.createArray();
      int j = paramString.length;
      int i = 0;
      while (i < j)
      {
        ((WritableArray)localObject).pushString(paramString[i]);
        i += 1;
      }
      paramPromise.resolve(localObject);
      return;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
      paramPromise.reject("EUNSPECIFIED", paramString.getLocalizedMessage());
    }
  }
  
  static void lstat(String paramString, Callback paramCallback)
  {
    paramString = normalizePath(paramString);
    new AsyncTask()
    {
      protected Integer doInBackground(String... paramAnonymousVarArgs)
      {
        Object localObject1 = Arguments.createArray();
        if (paramAnonymousVarArgs[0] == null)
        {
          val$callback.invoke(new Object[] { "the path specified for lstat is either `null` or `undefined`." });
          return Integer.valueOf(0);
        }
        Object localObject2 = new File(paramAnonymousVarArgs[0]);
        if (!((File)localObject2).exists())
        {
          localObject1 = val$callback;
          localObject2 = new StringBuilder();
          ((StringBuilder)localObject2).append("failed to lstat path `");
          ((StringBuilder)localObject2).append(paramAnonymousVarArgs[0]);
          ((StringBuilder)localObject2).append("` because it does not exist or it is not a folder");
          ((Callback)localObject1).invoke(new Object[] { ((StringBuilder)localObject2).toString() });
          return Integer.valueOf(0);
        }
        if (((File)localObject2).isDirectory())
        {
          paramAnonymousVarArgs = ((File)localObject2).list();
          int j = paramAnonymousVarArgs.length;
          int i = 0;
          while (i < j)
          {
            String str = paramAnonymousVarArgs[i];
            StringBuilder localStringBuilder = new StringBuilder();
            localStringBuilder.append(((File)localObject2).getPath());
            localStringBuilder.append("/");
            localStringBuilder.append(str);
            ((WritableArray)localObject1).pushMap(RNFetchBlobFS.statFile(localStringBuilder.toString()));
            i += 1;
          }
        }
        ((WritableArray)localObject1).pushMap(RNFetchBlobFS.statFile(((File)localObject2).getAbsolutePath()));
        val$callback.invoke(new Object[] { null, localObject1 });
        return Integer.valueOf(0);
      }
    }.execute(new String[] { paramString });
  }
  
  static void mkdir(String paramString, Promise paramPromise)
  {
    Object localObject = new File(paramString);
    if (((File)localObject).exists())
    {
      StringBuilder localStringBuilder = new StringBuilder();
      if (((File)localObject).isDirectory()) {
        localObject = "Folder";
      } else {
        localObject = "File";
      }
      localStringBuilder.append((String)localObject);
      localStringBuilder.append(" '");
      localStringBuilder.append(paramString);
      localStringBuilder.append("' already exists");
      paramPromise.reject("EEXIST", localStringBuilder.toString());
      return;
    }
    try
    {
      if (!((File)localObject).mkdirs())
      {
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("mkdir failed to create some or all directories in '");
        ((StringBuilder)localObject).append(paramString);
        ((StringBuilder)localObject).append("'");
        paramPromise.reject("EUNSPECIFIED", ((StringBuilder)localObject).toString());
        return;
      }
      paramPromise.resolve(Boolean.valueOf(true));
      return;
    }
    catch (Exception paramString)
    {
      paramPromise.reject("EUNSPECIFIED", paramString.getLocalizedMessage());
    }
  }
  
  static void mv(String paramString1, String paramString2, Callback paramCallback)
  {
    File localFile = new File(paramString1);
    if (!localFile.exists())
    {
      paramString2 = new StringBuilder();
      paramString2.append("Source file at path `");
      paramString2.append(paramString1);
      paramString2.append("` does not exist");
      paramCallback.invoke(new Object[] { paramString2.toString() });
      return;
    }
    try
    {
      paramString1 = new FileInputStream(paramString1);
      paramString2 = new FileOutputStream(paramString2);
      byte[] arrayOfByte = new byte['?'];
      for (;;)
      {
        int i = paramString1.read(arrayOfByte);
        if (i == -1) {
          break;
        }
        paramString2.write(arrayOfByte, 0, i);
      }
      paramString1.close();
      paramString2.flush();
      localFile.delete();
      paramCallback.invoke(new Object[0]);
      return;
    }
    catch (Exception paramString1)
    {
      paramCallback.invoke(new Object[] { paramString1.toString() });
      return;
      paramCallback.invoke(new Object[] { "Source file not found." });
      return;
    }
    catch (FileNotFoundException paramString1)
    {
      for (;;) {}
    }
  }
  
  static String normalizePath(String paramString)
  {
    if (paramString == null) {
      return null;
    }
    if (!paramString.matches("\\w+\\:.*")) {
      return paramString;
    }
    if (paramString.startsWith("file://")) {
      return paramString.replace("file://", "");
    }
    Uri localUri = Uri.parse(paramString);
    if (paramString.startsWith("bundle-assets://")) {
      return paramString;
    }
    return PathResolver.getRealPathFromURI(RNFetchBlob.RCTContext, localUri);
  }
  
  static void readFile(String paramString1, String paramString2, Promise paramPromise)
  {
    Object localObject2 = normalizePath(paramString1);
    Object localObject1 = paramString1;
    if (localObject2 != null) {
      localObject1 = localObject2;
    }
    int k = 0;
    if (localObject2 != null) {}
    try
    {
      if (((String)localObject2).startsWith("bundle-assets://"))
      {
        localObject2 = ((String)localObject1).replace("bundle-assets://", "");
        i = (int)RNFetchBlob.RCTContext.getAssets().openFd((String)localObject2).getLength();
        paramString1 = new byte[i];
        localObject2 = RNFetchBlob.RCTContext.getAssets().open((String)localObject2);
        j = ((InputStream)localObject2).read(paramString1, 0, i);
        ((InputStream)localObject2).close();
      }
      else if (localObject2 == null)
      {
        localObject2 = RNFetchBlob.RCTContext.getContentResolver().openInputStream(Uri.parse((String)localObject1));
        i = ((InputStream)localObject2).available();
        paramString1 = new byte[i];
        j = ((InputStream)localObject2).read(paramString1);
        ((InputStream)localObject2).close();
      }
      else
      {
        localObject2 = new File((String)localObject1);
        i = (int)((File)localObject2).length();
        paramString1 = new byte[i];
        localObject2 = new FileInputStream((File)localObject2);
        j = ((FileInputStream)localObject2).read(paramString1);
        ((FileInputStream)localObject2).close();
      }
      if (j < i)
      {
        paramString1 = new StringBuilder();
        paramString1.append("Read only ");
        paramString1.append(j);
        paramString1.append(" bytes of ");
        paramString1.append(i);
        paramPromise.reject("EUNSPECIFIED", paramString1.toString());
        return;
      }
      paramString2 = paramString2.toLowerCase();
      i = paramString2.hashCode();
      if (i != -1396204209)
      {
        if (i != 3600241)
        {
          if ((i != 93106001) || (!paramString2.equals("ascii"))) {
            break label550;
          }
          i = 1;
          break label552;
        }
        if (!paramString2.equals("utf8")) {
          break label550;
        }
        i = 2;
        break label552;
      }
      if (!paramString2.equals("base64")) {
        break label550;
      }
      i = 0;
    }
    catch (Exception paramString1)
    {
      int j;
      for (;;) {}
    }
    catch (FileNotFoundException paramString1)
    {
      for (;;)
      {
        continue;
        int i = -1;
        switch (i)
        {
        }
      }
    }
    break label398;
    paramPromise.resolve(new String(paramString1));
    return;
    paramString2 = Arguments.createArray();
    j = paramString1.length;
    i = k;
    while (i < j)
    {
      paramString2.pushInt(paramString1[i]);
      i += 1;
    }
    paramPromise.resolve(paramString2);
    return;
    paramPromise.resolve(Base64.encodeToString(paramString1, 2));
    return;
    label398:
    paramPromise.resolve(new String(paramString1));
    return;
    paramPromise.reject("EUNSPECIFIED", paramString1.getLocalizedMessage());
    return;
    paramString1 = paramString1.getLocalizedMessage();
    if (paramString1.contains("EISDIR"))
    {
      paramString2 = new StringBuilder();
      paramString2.append("Expecting a file but '");
      paramString2.append((String)localObject1);
      paramString2.append("' is a directory; ");
      paramString2.append(paramString1);
      paramPromise.reject("EISDIR", paramString2.toString());
      return;
    }
    paramString2 = new StringBuilder();
    paramString2.append("No such file '");
    paramString2.append((String)localObject1);
    paramString2.append("'; ");
    paramString2.append(paramString1);
    paramPromise.reject("ENOENT", paramString2.toString());
  }
  
  static void removeSession(ReadableArray paramReadableArray, Callback paramCallback)
  {
    new AsyncTask()
    {
      protected Integer doInBackground(ReadableArray... paramAnonymousVarArgs)
      {
        for (;;)
        {
          int i;
          try
          {
            Object localObject1 = new ArrayList();
            i = 0;
            Object localObject2;
            if (i < paramAnonymousVarArgs[0].size())
            {
              localObject2 = paramAnonymousVarArgs[0].getString(i);
              File localFile = new File((String)localObject2);
              if ((!localFile.exists()) || (localFile.delete())) {
                break label218;
              }
              ((ArrayList)localObject1).add(localObject2);
              break label218;
            }
            if (((ArrayList)localObject1).isEmpty())
            {
              val$callback.invoke(new Object[] { null, Boolean.valueOf(true) });
            }
            else
            {
              localObject2 = new StringBuilder();
              ((StringBuilder)localObject2).append("Failed to delete: ");
              localObject1 = ((ArrayList)localObject1).iterator();
              if (((Iterator)localObject1).hasNext())
              {
                ((StringBuilder)localObject2).append((String)((Iterator)localObject1).next());
                ((StringBuilder)localObject2).append(", ");
                continue;
              }
              val$callback.invoke(new Object[] { ((StringBuilder)localObject2).toString() });
            }
          }
          catch (Exception localException)
          {
            val$callback.invoke(new Object[] { localException.getLocalizedMessage() });
          }
          return Integer.valueOf(paramAnonymousVarArgs[0].size());
          label218:
          i += 1;
        }
      }
    }.execute(new ReadableArray[] { paramReadableArray });
  }
  
  static void slice(String paramString1, String paramString2, int paramInt1, int paramInt2, String paramString3, Promise paramPromise)
  {
    try
    {
      paramString1 = normalizePath(paramString1);
      paramString3 = new File(paramString1);
      if (paramString3.isDirectory())
      {
        paramString2 = new StringBuilder();
        paramString2.append("Expecting a file but '");
        paramString2.append(paramString1);
        paramString2.append("' is a directory");
        paramPromise.reject("EISDIR", paramString2.toString());
        return;
      }
      if (!paramString3.exists())
      {
        paramString2 = new StringBuilder();
        paramString2.append("No such file '");
        paramString2.append(paramString1);
        paramString2.append("'");
        paramPromise.reject("ENOENT", paramString2.toString());
        return;
      }
      int i = (int)paramString3.length();
      paramInt2 = Math.min(i, paramInt2) - paramInt1;
      paramString1 = new FileInputStream(new File(paramString1));
      paramString3 = new FileOutputStream(new File(paramString2));
      int j = (int)paramString1.skip(paramInt1);
      if (j != paramInt1)
      {
        paramString1 = new StringBuilder();
        paramString1.append("Skipped ");
        paramString1.append(j);
        paramString1.append(" instead of the specified ");
        paramString1.append(paramInt1);
        paramString1.append(" bytes, size is ");
        paramString1.append(i);
        paramPromise.reject("EUNSPECIFIED", paramString1.toString());
        return;
      }
      byte[] arrayOfByte = new byte['?'];
      paramInt1 = 0;
      while (paramInt1 < paramInt2)
      {
        i = paramString1.read(arrayOfByte, 0, 10240);
        if (i <= 0) {
          break;
        }
        paramString3.write(arrayOfByte, 0, Math.min(paramInt2 - paramInt1, i));
        paramInt1 += i;
      }
      paramString1.close();
      paramString3.flush();
      paramString3.close();
      paramPromise.resolve(paramString2);
      return;
    }
    catch (Exception paramString1)
    {
      paramString1.printStackTrace();
      paramPromise.reject("EUNSPECIFIED", paramString1.getLocalizedMessage());
    }
  }
  
  static void stat(String paramString, Callback paramCallback)
  {
    try
    {
      paramString = normalizePath(paramString);
      Object localObject = statFile(paramString);
      if (localObject == null)
      {
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("failed to stat path `");
        ((StringBuilder)localObject).append(paramString);
        ((StringBuilder)localObject).append("` because it does not exist or it is not a folder");
        paramCallback.invoke(new Object[] { ((StringBuilder)localObject).toString(), null });
        return;
      }
      paramCallback.invoke(new Object[] { null, localObject });
      return;
    }
    catch (Exception paramString)
    {
      paramCallback.invoke(new Object[] { paramString.getLocalizedMessage() });
    }
  }
  
  static WritableMap statFile(String paramString)
  {
    for (;;)
    {
      try
      {
        paramString = normalizePath(paramString);
        WritableMap localWritableMap = Arguments.createMap();
        if (isAsset(paramString))
        {
          localObject = paramString.replace("bundle-assets://", "");
          AssetFileDescriptor localAssetFileDescriptor = RNFetchBlob.RCTContext.getAssets().openFd((String)localObject);
          localWritableMap.putString("filename", (String)localObject);
          localWritableMap.putString("path", paramString);
          localWritableMap.putString("type", "asset");
          localWritableMap.putString("size", String.valueOf(localAssetFileDescriptor.getLength()));
          localWritableMap.putInt("lastModified", 0);
          return localWritableMap;
        }
        Object localObject = new File(paramString);
        if (!((File)localObject).exists()) {
          return null;
        }
        localWritableMap.putString("filename", ((File)localObject).getName());
        localWritableMap.putString("path", ((File)localObject).getPath());
        if (((File)localObject).isDirectory())
        {
          paramString = "directory";
          localWritableMap.putString("type", paramString);
          localWritableMap.putString("size", String.valueOf(((File)localObject).length()));
          localWritableMap.putString("lastModified", String.valueOf(((File)localObject).lastModified()));
          return localWritableMap;
        }
      }
      catch (Exception paramString)
      {
        return null;
      }
      paramString = "file";
    }
  }
  
  private static byte[] stringToBytes(String paramString1, String paramString2)
  {
    if (paramString2.equalsIgnoreCase("ascii")) {
      return paramString1.getBytes(Charset.forName("US-ASCII"));
    }
    if (paramString2.toLowerCase().contains("base64")) {
      return Base64.decode(paramString1, 2);
    }
    if (paramString2.equalsIgnoreCase("utf8")) {
      return paramString1.getBytes(Charset.forName("UTF-8"));
    }
    return paramString1.getBytes(Charset.forName("US-ASCII"));
  }
  
  static void unlink(String paramString, Callback paramCallback)
  {
    try
    {
      deleteRecursive(new File(normalizePath(paramString)));
      paramCallback.invoke(new Object[] { null, Boolean.valueOf(true) });
      return;
    }
    catch (Exception paramString)
    {
      paramCallback.invoke(new Object[] { paramString.getLocalizedMessage(), Boolean.valueOf(false) });
    }
  }
  
  static void writeArrayChunk(String paramString, ReadableArray paramReadableArray, Callback paramCallback)
  {
    try
    {
      paramString = fileStreamsgetwriteStreamInstance;
      byte[] arrayOfByte = new byte[paramReadableArray.size()];
      int i = 0;
      while (i < paramReadableArray.size())
      {
        arrayOfByte[i] = ((byte)paramReadableArray.getInt(i));
        i += 1;
      }
      paramString.write(arrayOfByte);
      paramCallback.invoke(new Object[0]);
      return;
    }
    catch (Exception paramString)
    {
      paramCallback.invoke(new Object[] { paramString.getLocalizedMessage() });
    }
  }
  
  static void writeChunk(String paramString1, String paramString2, Callback paramCallback)
  {
    RNFetchBlobFS localRNFetchBlobFS = (RNFetchBlobFS)fileStreams.get(paramString1);
    paramString1 = writeStreamInstance;
    paramString2 = stringToBytes(paramString2, encoding);
    try
    {
      paramString1.write(paramString2);
      paramCallback.invoke(new Object[0]);
      return;
    }
    catch (Exception paramString1)
    {
      paramCallback.invoke(new Object[] { paramString1.getLocalizedMessage() });
    }
  }
  
  /* Error */
  static void writeFile(String paramString, ReadableArray paramReadableArray, boolean paramBoolean, Promise paramPromise)
  {
    // Byte code:
    //   0: new 105	java/io/File
    //   3: dup
    //   4: aload_0
    //   5: invokespecial 108	java/io/File:<init>	(Ljava/lang/String;)V
    //   8: astore 5
    //   10: aload 5
    //   12: invokevirtual 345	java/io/File:getParentFile	()Ljava/io/File;
    //   15: astore 6
    //   17: aload 5
    //   19: invokevirtual 112	java/io/File:exists	()Z
    //   22: ifne +118 -> 140
    //   25: aload 6
    //   27: ifnull +62 -> 89
    //   30: aload 6
    //   32: invokevirtual 112	java/io/File:exists	()Z
    //   35: ifne +54 -> 89
    //   38: aload 6
    //   40: invokevirtual 545	java/io/File:mkdirs	()Z
    //   43: ifne +46 -> 89
    //   46: new 91	java/lang/StringBuilder
    //   49: dup
    //   50: invokespecial 92	java/lang/StringBuilder:<init>	()V
    //   53: astore_1
    //   54: aload_1
    //   55: ldc_w 730
    //   58: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   61: pop
    //   62: aload_1
    //   63: aload_0
    //   64: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   67: pop
    //   68: aload_1
    //   69: ldc -31
    //   71: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   74: pop
    //   75: aload_3
    //   76: ldc_w 515
    //   79: aload_1
    //   80: invokevirtual 103	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   83: invokeinterface 165 3 0
    //   88: return
    //   89: aload 5
    //   91: invokevirtual 115	java/io/File:createNewFile	()Z
    //   94: ifne +46 -> 140
    //   97: new 91	java/lang/StringBuilder
    //   100: dup
    //   101: invokespecial 92	java/lang/StringBuilder:<init>	()V
    //   104: astore_1
    //   105: aload_1
    //   106: ldc_w 732
    //   109: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   112: pop
    //   113: aload_1
    //   114: aload_0
    //   115: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   118: pop
    //   119: aload_1
    //   120: ldc_w 734
    //   123: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   126: pop
    //   127: aload_3
    //   128: ldc -97
    //   130: aload_1
    //   131: invokevirtual 103	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   134: invokeinterface 165 3 0
    //   139: return
    //   140: new 125	java/io/FileOutputStream
    //   143: dup
    //   144: aload 5
    //   146: iload_2
    //   147: invokespecial 737	java/io/FileOutputStream:<init>	(Ljava/io/File;Z)V
    //   150: astore 5
    //   152: aload_1
    //   153: invokeinterface 202 1 0
    //   158: newarray byte
    //   160: astore 6
    //   162: iconst_0
    //   163: istore 4
    //   165: iload 4
    //   167: aload_1
    //   168: invokeinterface 202 1 0
    //   173: if_icmpge +26 -> 199
    //   176: aload 6
    //   178: iload 4
    //   180: aload_1
    //   181: iload 4
    //   183: invokeinterface 206 2 0
    //   188: i2b
    //   189: bastore
    //   190: iload 4
    //   192: iconst_1
    //   193: iadd
    //   194: istore 4
    //   196: goto -31 -> 165
    //   199: aload 5
    //   201: aload 6
    //   203: invokevirtual 738	java/io/FileOutputStream:write	([B)V
    //   206: aload 5
    //   208: invokevirtual 668	java/io/FileOutputStream:close	()V
    //   211: aload_3
    //   212: aload_1
    //   213: invokeinterface 202 1 0
    //   218: invokestatic 743	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   221: invokeinterface 190 2 0
    //   226: return
    //   227: astore_1
    //   228: aload 5
    //   230: invokevirtual 668	java/io/FileOutputStream:close	()V
    //   233: aload_1
    //   234: athrow
    //   235: astore_0
    //   236: aload_3
    //   237: ldc -64
    //   239: aload_0
    //   240: invokevirtual 77	java/lang/Exception:getLocalizedMessage	()Ljava/lang/String;
    //   243: invokeinterface 165 3 0
    //   248: return
    //   249: new 91	java/lang/StringBuilder
    //   252: dup
    //   253: invokespecial 92	java/lang/StringBuilder:<init>	()V
    //   256: astore_1
    //   257: aload_1
    //   258: ldc_w 732
    //   261: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   264: pop
    //   265: aload_1
    //   266: aload_0
    //   267: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   270: pop
    //   271: aload_1
    //   272: ldc_w 734
    //   275: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   278: pop
    //   279: aload_3
    //   280: ldc -97
    //   282: aload_1
    //   283: invokevirtual 103	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   286: invokeinterface 165 3 0
    //   291: return
    //   292: astore_1
    //   293: goto -44 -> 249
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	296	0	paramString	String
    //   0	296	1	paramReadableArray	ReadableArray
    //   0	296	2	paramBoolean	boolean
    //   0	296	3	paramPromise	Promise
    //   163	32	4	i	int
    //   8	221	5	localObject1	Object
    //   15	187	6	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   152	162	227	finally
    //   165	190	227	finally
    //   199	206	227	finally
    //   0	25	235	java/lang/Exception
    //   30	88	235	java/lang/Exception
    //   89	139	235	java/lang/Exception
    //   140	152	235	java/lang/Exception
    //   206	226	235	java/lang/Exception
    //   228	235	235	java/lang/Exception
    //   0	25	292	java/io/FileNotFoundException
    //   30	88	292	java/io/FileNotFoundException
    //   89	139	292	java/io/FileNotFoundException
    //   140	152	292	java/io/FileNotFoundException
    //   206	226	292	java/io/FileNotFoundException
    //   228	235	292	java/io/FileNotFoundException
  }
  
  /* Error */
  static void writeFile(String paramString1, String paramString2, String paramString3, boolean paramBoolean, Promise paramPromise)
  {
    // Byte code:
    //   0: new 105	java/io/File
    //   3: dup
    //   4: aload_0
    //   5: invokespecial 108	java/io/File:<init>	(Ljava/lang/String;)V
    //   8: astore 8
    //   10: aload 8
    //   12: invokevirtual 345	java/io/File:getParentFile	()Ljava/io/File;
    //   15: astore 7
    //   17: aload 8
    //   19: invokevirtual 112	java/io/File:exists	()Z
    //   22: ifne +119 -> 141
    //   25: aload 7
    //   27: ifnull +62 -> 89
    //   30: aload 7
    //   32: invokevirtual 112	java/io/File:exists	()Z
    //   35: ifne +54 -> 89
    //   38: aload 7
    //   40: invokevirtual 545	java/io/File:mkdirs	()Z
    //   43: ifne +46 -> 89
    //   46: new 91	java/lang/StringBuilder
    //   49: dup
    //   50: invokespecial 92	java/lang/StringBuilder:<init>	()V
    //   53: astore_1
    //   54: aload_1
    //   55: ldc_w 730
    //   58: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   61: pop
    //   62: aload_1
    //   63: aload_0
    //   64: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   67: pop
    //   68: aload_1
    //   69: ldc -31
    //   71: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   74: pop
    //   75: aload 4
    //   77: ldc -64
    //   79: aload_1
    //   80: invokevirtual 103	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   83: invokeinterface 165 3 0
    //   88: return
    //   89: aload 8
    //   91: invokevirtual 115	java/io/File:createNewFile	()Z
    //   94: ifne +47 -> 141
    //   97: new 91	java/lang/StringBuilder
    //   100: dup
    //   101: invokespecial 92	java/lang/StringBuilder:<init>	()V
    //   104: astore_1
    //   105: aload_1
    //   106: ldc_w 732
    //   109: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   112: pop
    //   113: aload_1
    //   114: aload_0
    //   115: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   118: pop
    //   119: aload_1
    //   120: ldc_w 734
    //   123: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   126: pop
    //   127: aload 4
    //   129: ldc -97
    //   131: aload_1
    //   132: invokevirtual 103	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   135: invokeinterface 165 3 0
    //   140: return
    //   141: aload_1
    //   142: ldc -115
    //   144: invokevirtual 704	java/lang/String:equalsIgnoreCase	(Ljava/lang/String;)Z
    //   147: ifeq +183 -> 330
    //   150: aload_2
    //   151: invokestatic 83	com/RNFetchBlob/RNFetchBlobFS:normalizePath	(Ljava/lang/String;)Ljava/lang/String;
    //   154: astore_1
    //   155: new 105	java/io/File
    //   158: dup
    //   159: aload_1
    //   160: invokespecial 108	java/io/File:<init>	(Ljava/lang/String;)V
    //   163: astore 7
    //   165: aload 7
    //   167: invokevirtual 112	java/io/File:exists	()Z
    //   170: ifne +61 -> 231
    //   173: new 91	java/lang/StringBuilder
    //   176: dup
    //   177: invokespecial 92	java/lang/StringBuilder:<init>	()V
    //   180: astore_2
    //   181: aload_2
    //   182: ldc_w 470
    //   185: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   188: pop
    //   189: aload_2
    //   190: aload_0
    //   191: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   194: pop
    //   195: aload_2
    //   196: ldc_w 746
    //   199: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   202: pop
    //   203: aload_2
    //   204: aload_1
    //   205: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   208: pop
    //   209: aload_2
    //   210: ldc_w 748
    //   213: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   216: pop
    //   217: aload 4
    //   219: ldc -97
    //   221: aload_2
    //   222: invokevirtual 103	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   225: invokeinterface 165 3 0
    //   230: return
    //   231: sipush 10240
    //   234: newarray byte
    //   236: astore_1
    //   237: aconst_null
    //   238: astore_2
    //   239: new 167	java/io/FileInputStream
    //   242: dup
    //   243: aload 7
    //   245: invokespecial 170	java/io/FileInputStream:<init>	(Ljava/io/File;)V
    //   248: astore 7
    //   250: new 125	java/io/FileOutputStream
    //   253: dup
    //   254: aload 8
    //   256: iload_3
    //   257: invokespecial 737	java/io/FileOutputStream:<init>	(Ljava/io/File;Z)V
    //   260: astore 8
    //   262: iconst_0
    //   263: istore 5
    //   265: aload 7
    //   267: aload_1
    //   268: invokevirtual 172	java/io/FileInputStream:read	([B)I
    //   271: istore 6
    //   273: iload 6
    //   275: ifle +22 -> 297
    //   278: aload 8
    //   280: aload_1
    //   281: iconst_0
    //   282: iload 6
    //   284: invokevirtual 666	java/io/FileOutputStream:write	([BII)V
    //   287: iload 5
    //   289: iload 6
    //   291: iadd
    //   292: istore 5
    //   294: goto -29 -> 265
    //   297: aload 7
    //   299: invokevirtual 173	java/io/FileInputStream:close	()V
    //   302: aload 8
    //   304: invokevirtual 668	java/io/FileOutputStream:close	()V
    //   307: goto +53 -> 360
    //   310: aload 7
    //   312: ifnull +8 -> 320
    //   315: aload 7
    //   317: invokevirtual 173	java/io/FileInputStream:close	()V
    //   320: aload_2
    //   321: ifnull +7 -> 328
    //   324: aload_2
    //   325: invokevirtual 668	java/io/FileOutputStream:close	()V
    //   328: aload_1
    //   329: athrow
    //   330: aload_2
    //   331: aload_1
    //   332: invokestatic 183	com/RNFetchBlob/RNFetchBlobFS:stringToBytes	(Ljava/lang/String;Ljava/lang/String;)[B
    //   335: astore_1
    //   336: new 125	java/io/FileOutputStream
    //   339: dup
    //   340: aload 8
    //   342: iload_3
    //   343: invokespecial 737	java/io/FileOutputStream:<init>	(Ljava/io/File;Z)V
    //   346: astore_2
    //   347: aload_2
    //   348: aload_1
    //   349: invokevirtual 738	java/io/FileOutputStream:write	([B)V
    //   352: aload_1
    //   353: arraylength
    //   354: istore 5
    //   356: aload_2
    //   357: invokevirtual 668	java/io/FileOutputStream:close	()V
    //   360: aload 4
    //   362: iload 5
    //   364: invokestatic 743	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   367: invokeinterface 190 2 0
    //   372: return
    //   373: astore_1
    //   374: aload_2
    //   375: invokevirtual 668	java/io/FileOutputStream:close	()V
    //   378: aload_1
    //   379: athrow
    //   380: astore_0
    //   381: aload 4
    //   383: ldc -64
    //   385: aload_0
    //   386: invokevirtual 77	java/lang/Exception:getLocalizedMessage	()Ljava/lang/String;
    //   389: invokeinterface 165 3 0
    //   394: return
    //   395: new 91	java/lang/StringBuilder
    //   398: dup
    //   399: invokespecial 92	java/lang/StringBuilder:<init>	()V
    //   402: astore_1
    //   403: aload_1
    //   404: ldc_w 732
    //   407: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   410: pop
    //   411: aload_1
    //   412: aload_0
    //   413: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   416: pop
    //   417: aload_1
    //   418: ldc_w 750
    //   421: invokevirtual 98	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   424: pop
    //   425: aload 4
    //   427: ldc -97
    //   429: aload_1
    //   430: invokevirtual 103	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   433: invokeinterface 165 3 0
    //   438: return
    //   439: astore_1
    //   440: goto -45 -> 395
    //   443: astore_1
    //   444: aload 8
    //   446: astore_2
    //   447: goto -137 -> 310
    //   450: astore_1
    //   451: goto -141 -> 310
    //   454: astore_1
    //   455: aconst_null
    //   456: astore 7
    //   458: goto -148 -> 310
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	461	0	paramString1	String
    //   0	461	1	paramString2	String
    //   0	461	2	paramString3	String
    //   0	461	3	paramBoolean	boolean
    //   0	461	4	paramPromise	Promise
    //   263	100	5	i	int
    //   271	21	6	j	int
    //   15	442	7	localObject1	Object
    //   8	437	8	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   347	356	373	finally
    //   0	25	380	java/lang/Exception
    //   30	88	380	java/lang/Exception
    //   89	140	380	java/lang/Exception
    //   141	230	380	java/lang/Exception
    //   231	237	380	java/lang/Exception
    //   297	307	380	java/lang/Exception
    //   315	320	380	java/lang/Exception
    //   324	328	380	java/lang/Exception
    //   328	330	380	java/lang/Exception
    //   330	347	380	java/lang/Exception
    //   356	360	380	java/lang/Exception
    //   360	372	380	java/lang/Exception
    //   374	380	380	java/lang/Exception
    //   0	25	439	java/io/FileNotFoundException
    //   30	88	439	java/io/FileNotFoundException
    //   89	140	439	java/io/FileNotFoundException
    //   141	230	439	java/io/FileNotFoundException
    //   231	237	439	java/io/FileNotFoundException
    //   297	307	439	java/io/FileNotFoundException
    //   315	320	439	java/io/FileNotFoundException
    //   324	328	439	java/io/FileNotFoundException
    //   328	330	439	java/io/FileNotFoundException
    //   330	347	439	java/io/FileNotFoundException
    //   356	360	439	java/io/FileNotFoundException
    //   360	372	439	java/io/FileNotFoundException
    //   374	380	439	java/io/FileNotFoundException
    //   265	273	443	finally
    //   278	287	443	finally
    //   250	262	450	finally
    //   239	250	454	finally
  }
  
  void readStream(String paramString1, String paramString2, int paramInt1, int paramInt2, String paramString3)
  {
    Object localObject2 = normalizePath(paramString1);
    localObject1 = paramString1;
    if (localObject2 != null) {
      localObject1 = localObject2;
    }
    try
    {
      if (!paramString2.equalsIgnoreCase("base64")) {
        break label573;
      }
      i = 4095;
    }
    catch (Exception paramString1)
    {
      boolean bool;
      int j;
      Object localObject3;
      localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append("Failed to convert data to ");
      ((StringBuilder)localObject1).append(paramString2);
      ((StringBuilder)localObject1).append(" encoded string. This might be because this encoding cannot be used for this data.");
      emitStreamEvent(paramString3, "error", "EUNSPECIFIED", ((StringBuilder)localObject1).toString());
      paramString1.printStackTrace();
      return;
      paramString1 = new StringBuilder();
      paramString1.append("No such file '");
      paramString1.append((String)localObject1);
      paramString1.append("'");
      emitStreamEvent(paramString3, "error", "ENOENT", paramString1.toString());
      return;
    }
    catch (FileNotFoundException paramString1)
    {
      for (;;)
      {
        continue;
        int i = 4096;
        if (paramInt1 > 0) {
          i = paramInt1;
        }
      }
    }
    if ((localObject2 != null) && (((String)localObject1).startsWith("bundle-assets://"))) {
      paramString1 = RNFetchBlob.RCTContext.getAssets().open(((String)localObject1).replace("bundle-assets://", ""));
    } else if (localObject2 == null) {
      paramString1 = RNFetchBlob.RCTContext.getContentResolver().openInputStream(Uri.parse((String)localObject1));
    } else {
      paramString1 = new FileInputStream(new File((String)localObject1));
    }
    localObject2 = new byte[i];
    bool = paramString2.equalsIgnoreCase("utf8");
    j = 0;
    if (bool)
    {
      localObject3 = Charset.forName("UTF-8").newEncoder();
      for (;;)
      {
        i = paramString1.read((byte[])localObject2);
        paramInt1 = j;
        if (i == -1) {
          break;
        }
        ((CharsetEncoder)localObject3).encode(ByteBuffer.wrap((byte[])localObject2).asCharBuffer());
        emitStreamEvent(paramString3, "data", new String((byte[])localObject2, 0, i));
        if (paramInt2 > 0) {
          SystemClock.sleep(paramInt2);
        }
      }
    }
    if (paramString2.equalsIgnoreCase("ascii")) {
      for (;;)
      {
        i = paramString1.read((byte[])localObject2);
        paramInt1 = j;
        if (i == -1) {
          break;
        }
        localObject3 = Arguments.createArray();
        paramInt1 = 0;
        while (paramInt1 < i)
        {
          ((WritableArray)localObject3).pushInt(localObject2[paramInt1]);
          paramInt1 += 1;
        }
        emitStreamEvent(paramString3, "data", (WritableArray)localObject3);
        if (paramInt2 > 0) {
          SystemClock.sleep(paramInt2);
        }
      }
    }
    if (paramString2.equalsIgnoreCase("base64")) {
      for (;;)
      {
        int k = paramString1.read((byte[])localObject2);
        paramInt1 = j;
        if (k == -1) {
          break;
        }
        if (k < i)
        {
          localObject3 = new byte[k];
          System.arraycopy(localObject2, 0, localObject3, 0, k);
          emitStreamEvent(paramString3, "data", Base64.encodeToString((byte[])localObject3, 2));
        }
        else
        {
          emitStreamEvent(paramString3, "data", Base64.encodeToString((byte[])localObject2, 2));
        }
        if (paramInt2 > 0) {
          SystemClock.sleep(paramInt2);
        }
      }
    }
    localObject2 = new StringBuilder();
    ((StringBuilder)localObject2).append("Unrecognized encoding `");
    ((StringBuilder)localObject2).append(paramString2);
    ((StringBuilder)localObject2).append("`, should be one of `base64`, `utf8`, `ascii`");
    emitStreamEvent(paramString3, "error", "EINVAL", ((StringBuilder)localObject2).toString());
    paramInt1 = 1;
    if (paramInt1 == 0) {
      emitStreamEvent(paramString3, "end", "");
    }
    paramString1.close();
  }
  
  void scanFile(String[] paramArrayOfString1, String[] paramArrayOfString2, final Callback paramCallback)
  {
    try
    {
      MediaScannerConnection.scanFile(mCtx, paramArrayOfString1, paramArrayOfString2, new MediaScannerConnection.OnScanCompletedListener()
      {
        public void onScanCompleted(String paramAnonymousString, Uri paramAnonymousUri)
        {
          paramCallback.invoke(new Object[] { null, Boolean.valueOf(true) });
        }
      });
      return;
    }
    catch (Exception paramArrayOfString1)
    {
      paramCallback.invoke(new Object[] { paramArrayOfString1.getLocalizedMessage(), null });
    }
  }
  
  void writeStream(String paramString1, String paramString2, boolean paramBoolean, Callback paramCallback)
  {
    try
    {
      localObject = new File(paramString1);
      File localFile = ((File)localObject).getParentFile();
      if (!((File)localObject).exists())
      {
        if ((localFile != null) && (!localFile.exists()) && (!localFile.mkdirs()))
        {
          paramString2 = new StringBuilder();
          paramString2.append("Failed to create parent directory of '");
          paramString2.append(paramString1);
          paramString2.append("'");
          paramCallback.invoke(new Object[] { "ENOTDIR", paramString2.toString() });
          return;
        }
        if (!((File)localObject).createNewFile())
        {
          paramString2 = new StringBuilder();
          paramString2.append("File '");
          paramString2.append(paramString1);
          paramString2.append("' does not exist and could not be created");
          paramCallback.invoke(new Object[] { "ENOENT", paramString2.toString() });
        }
      }
      else if (((File)localObject).isDirectory())
      {
        paramString2 = new StringBuilder();
        paramString2.append("Expecting a file but '");
        paramString2.append(paramString1);
        paramString2.append("' is a directory");
        paramCallback.invoke(new Object[] { "EISDIR", paramString2.toString() });
        return;
      }
      localObject = new FileOutputStream(paramString1, paramBoolean);
      encoding = paramString2;
      paramString2 = UUID.randomUUID().toString();
      fileStreams.put(paramString2, this);
      writeStreamInstance = ((OutputStream)localObject);
      paramCallback.invoke(new Object[] { null, null, paramString2 });
      return;
    }
    catch (Exception paramString2)
    {
      Object localObject = new StringBuilder();
      ((StringBuilder)localObject).append("Failed to create write stream at path `");
      ((StringBuilder)localObject).append(paramString1);
      ((StringBuilder)localObject).append("`; ");
      ((StringBuilder)localObject).append(paramString2.getLocalizedMessage());
      paramCallback.invoke(new Object[] { "EUNSPECIFIED", ((StringBuilder)localObject).toString() });
    }
  }
}
