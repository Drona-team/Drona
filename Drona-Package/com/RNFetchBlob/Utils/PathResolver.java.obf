package com.RNFetchBlob.Utils;

import android.annotation.TargetApi;
import android.content.ContentResolver;
import android.content.ContentUris;
import android.content.Context;
import android.database.Cursor;
import android.net.Uri;
import android.os.Build.VERSION;
import android.os.Environment;
import android.provider.DocumentsContract;
import android.provider.MediaStore.Audio.Media;
import android.provider.MediaStore.Images.Media;
import android.provider.MediaStore.Video.Media;
import com.RNFetchBlob.RNFetchBlobUtils;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;

public class PathResolver
{
  public PathResolver() {}
  
  private static String getContentName(ContentResolver paramContentResolver, Uri paramUri)
  {
    paramContentResolver = paramContentResolver.query(paramUri, null, null, null, null);
    paramContentResolver.moveToFirst();
    int i = paramContentResolver.getColumnIndex("_display_name");
    if (i >= 0)
    {
      paramUri = paramContentResolver.getString(i);
      paramContentResolver.close();
      return paramUri;
    }
    return null;
  }
  
  /* Error */
  public static String getDataColumn(Context paramContext, Uri paramUri, String paramString, String[] paramArrayOfString)
  {
    // Byte code:
    //   0: aload_0
    //   1: invokevirtual 46	android/content/Context:getContentResolver	()Landroid/content/ContentResolver;
    //   4: aload_1
    //   5: iconst_1
    //   6: anewarray 48	java/lang/String
    //   9: dup
    //   10: iconst_0
    //   11: ldc 50
    //   13: aastore
    //   14: aload_2
    //   15: aload_3
    //   16: aconst_null
    //   17: invokevirtual 17	android/content/ContentResolver:query	(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
    //   20: astore_1
    //   21: aload_1
    //   22: ifnull +40 -> 62
    //   25: aload_1
    //   26: astore_0
    //   27: aload_1
    //   28: invokeinterface 23 1 0
    //   33: ifeq +29 -> 62
    //   36: aload_1
    //   37: astore_0
    //   38: aload_1
    //   39: aload_1
    //   40: ldc 50
    //   42: invokeinterface 53 2 0
    //   47: invokeinterface 33 2 0
    //   52: astore_2
    //   53: aload_2
    //   54: astore_0
    //   55: goto +9 -> 64
    //   58: astore_2
    //   59: goto +26 -> 85
    //   62: aconst_null
    //   63: astore_0
    //   64: aload_1
    //   65: ifnull +9 -> 74
    //   68: aload_1
    //   69: invokeinterface 36 1 0
    //   74: aload_0
    //   75: areturn
    //   76: astore_1
    //   77: aconst_null
    //   78: astore_0
    //   79: goto +25 -> 104
    //   82: astore_2
    //   83: aconst_null
    //   84: astore_1
    //   85: aload_1
    //   86: astore_0
    //   87: aload_2
    //   88: invokevirtual 56	java/lang/Exception:printStackTrace	()V
    //   91: aload_1
    //   92: ifnull +9 -> 101
    //   95: aload_1
    //   96: invokeinterface 36 1 0
    //   101: aconst_null
    //   102: areturn
    //   103: astore_1
    //   104: aload_0
    //   105: ifnull +9 -> 114
    //   108: aload_0
    //   109: invokeinterface 36 1 0
    //   114: aload_1
    //   115: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	116	0	paramContext	Context
    //   0	116	1	paramUri	Uri
    //   0	116	2	paramString	String
    //   0	116	3	paramArrayOfString	String[]
    // Exception table:
    //   from	to	target	type
    //   27	36	58	java/lang/Exception
    //   38	53	58	java/lang/Exception
    //   0	21	76	finally
    //   0	21	82	java/lang/Exception
    //   27	36	103	finally
    //   38	53	103	finally
    //   87	91	103	finally
  }
  
  @TargetApi(19)
  public static String getRealPathFromURI(Context paramContext, Uri paramUri)
  {
    int i;
    if (Build.VERSION.SDK_INT >= 19) {
      i = 1;
    } else {
      i = 0;
    }
    InputStream localInputStream = null;
    if ((i != 0) && (DocumentsContract.isDocumentUri(paramContext, paramUri)))
    {
      if (isExternalStorageDocument(paramUri))
      {
        paramContext = DocumentsContract.getDocumentId(paramUri).split(":");
        if (!"primary".equalsIgnoreCase(paramContext[0])) {
          break label422;
        }
        paramUri = new StringBuilder();
        paramUri.append(Environment.getExternalStorageDirectory());
        paramUri.append("/");
        paramUri.append(paramContext[1]);
        return paramUri.toString();
      }
      if (!isDownloadsDocument(paramUri)) {}
    }
    Object localObject1;
    try
    {
      paramUri = DocumentsContract.getDocumentId(paramUri);
      if ((paramUri != null) && (paramUri.startsWith("raw:/"))) {
        return Uri.parse(paramUri).getPath();
      }
      paramContext = getDataColumn(paramContext, ContentUris.withAppendedId(Uri.parse("content://downloads/public_downloads"), Long.valueOf(paramUri).longValue()), null, null);
      return paramContext;
    }
    catch (Exception paramContext) {}
    if (isMediaDocument(paramUri))
    {
      localObject1 = DocumentsContract.getDocumentId(paramUri).split(":");
      Object localObject2 = localObject1[0];
      if ("image".equals(localObject2))
      {
        paramUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
      }
      else if ("video".equals(localObject2))
      {
        paramUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;
      }
      else
      {
        paramUri = localInputStream;
        if ("audio".equals(localObject2)) {
          paramUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;
        }
      }
      return getDataColumn(paramContext, paramUri, "_id=?", new String[] { localObject1[1] });
    }
    if ("content".equalsIgnoreCase(paramUri.getScheme()))
    {
      if (isGooglePhotosUri(paramUri)) {
        return paramUri.getLastPathSegment();
      }
      return getDataColumn(paramContext, paramUri, null, null);
    }
    try
    {
      localInputStream = paramContext.getContentResolver().openInputStream(paramUri);
      if (localInputStream == null) {
        break label422;
      }
      paramUri = getContentName(paramContext.getContentResolver(), paramUri);
      if (paramUri == null) {
        break label422;
      }
      paramContext = new File(paramContext.getCacheDir(), paramUri);
      paramUri = new FileOutputStream(paramContext);
      localObject1 = new byte['?'];
      while (localInputStream.read((byte[])localObject1) > 0) {
        paramUri.write((byte[])localObject1);
      }
      paramUri.close();
      localInputStream.close();
      paramContext = paramContext.getAbsolutePath();
      return paramContext;
    }
    catch (Exception paramContext)
    {
      RNFetchBlobUtils.emitWarningEvent(paramContext.toString());
      return null;
    }
    if ("content".equalsIgnoreCase(paramUri.getScheme()))
    {
      if (isGooglePhotosUri(paramUri)) {
        return paramUri.getLastPathSegment();
      }
      return getDataColumn(paramContext, paramUri, null, null);
    }
    if ("file".equalsIgnoreCase(paramUri.getScheme())) {
      return paramUri.getPath();
    }
    label422:
    return null;
    return null;
  }
  
  public static boolean isDownloadsDocument(Uri paramUri)
  {
    return "com.android.providers.downloads.documents".equals(paramUri.getAuthority());
  }
  
  public static boolean isExternalStorageDocument(Uri paramUri)
  {
    return "com.android.externalstorage.documents".equals(paramUri.getAuthority());
  }
  
  public static boolean isGooglePhotosUri(Uri paramUri)
  {
    return "com.google.android.apps.photos.content".equals(paramUri.getAuthority());
  }
  
  public static boolean isMediaDocument(Uri paramUri)
  {
    return "com.android.providers.media.documents".equals(paramUri.getAuthority());
  }
}
