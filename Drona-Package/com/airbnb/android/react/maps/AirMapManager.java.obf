package com.airbnb.android.react.maps;

import android.content.res.Resources;
import android.util.DisplayMetrics;
import android.view.View;
import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.common.MapBuilder;
import com.facebook.react.modules.core.DeviceEventManagerModule.RCTDeviceEventEmitter;
import com.facebook.react.uimanager.LayoutShadowNode;
import com.facebook.react.uimanager.ThemedReactContext;
import com.facebook.react.uimanager.ViewGroupManager;
import com.facebook.react.uimanager.annotations.ReactProp;
import com.facebook.react.uimanager.events.RCTEventEmitter;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMapOptions;
import com.google.android.gms.maps.UiSettings;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.LatLngBounds;
import com.google.android.gms.maps.model.MapStyleOptions;
import java.util.HashMap;
import java.util.Map;
import javax.annotation.Nullable;

public class AirMapManager
  extends ViewGroupManager<AirMapView>
{
  private static final int ANIMATE_CAMERA = 12;
  private static final int ANIMATE_TO_BEARING = 4;
  private static final int ANIMATE_TO_COORDINATE = 2;
  private static final int ANIMATE_TO_NAVIGATION = 9;
  private static final int ANIMATE_TO_REGION = 1;
  private static final int ANIMATE_TO_VIEWING_ANGLE = 3;
  private static final int FIT_TO_COORDINATES = 7;
  private static final int FIT_TO_ELEMENTS = 5;
  private static final int FIT_TO_SUPPLIED_MARKERS = 6;
  private static final String REACT_CLASS = "AIRMap";
  private static final int SET_CAMERA = 11;
  private static final int SET_INDOOR_ACTIVE_LEVEL_INDEX = 10;
  private static final int SET_MAP_BOUNDARIES = 8;
  private final Map<String, Integer> MAP_TYPES = MapBuilder.of("standard", Integer.valueOf(1), "satellite", Integer.valueOf(2), "hybrid", Integer.valueOf(4), "terrain", Integer.valueOf(3), "none", Integer.valueOf(0));
  private final ReactApplicationContext appContext;
  protected GoogleMapOptions googleMapOptions;
  private AirMapMarkerManager markerManager;
  
  public AirMapManager(ReactApplicationContext paramReactApplicationContext)
  {
    appContext = paramReactApplicationContext;
    googleMapOptions = new GoogleMapOptions();
  }
  
  public static <K, V> Map<K, V> CreateMap(K paramK1, V paramV1, K paramK2, V paramV2, K paramK3, V paramV3, K paramK4, V paramV4, K paramK5, V paramV5, K paramK6, V paramV6, K paramK7, V paramV7, K paramK8, V paramV8, K paramK9, V paramV9, K paramK10, V paramV10)
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put(paramK1, paramV1);
    localHashMap.put(paramK2, paramV2);
    localHashMap.put(paramK3, paramV3);
    localHashMap.put(paramK4, paramV4);
    localHashMap.put(paramK5, paramV5);
    localHashMap.put(paramK6, paramV6);
    localHashMap.put(paramK7, paramV7);
    localHashMap.put(paramK8, paramV8);
    localHashMap.put(paramK9, paramV9);
    localHashMap.put(paramK10, paramV10);
    return localHashMap;
  }
  
  private void emitMapError(ThemedReactContext paramThemedReactContext, String paramString1, String paramString2)
  {
    WritableMap localWritableMap = Arguments.createMap();
    localWritableMap.putString("message", paramString1);
    localWritableMap.putString("type", paramString2);
    ((DeviceEventManagerModule.RCTDeviceEventEmitter)paramThemedReactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)).emit("onError", localWritableMap);
  }
  
  public void addView(AirMapView paramAirMapView, View paramView, int paramInt)
  {
    paramAirMapView.addFeature(paramView, paramInt);
  }
  
  public LayoutShadowNode createShadowNodeInstance()
  {
    return new SizeReportingShadowNode();
  }
  
  protected AirMapView createViewInstance(ThemedReactContext paramThemedReactContext)
  {
    return new AirMapView(paramThemedReactContext, appContext, this, googleMapOptions);
  }
  
  public View getChildAt(AirMapView paramAirMapView, int paramInt)
  {
    return paramAirMapView.getFeatureAt(paramInt);
  }
  
  public int getChildCount(AirMapView paramAirMapView)
  {
    return paramAirMapView.getFeatureCount();
  }
  
  @Nullable
  public Map<String, Integer> getCommandsMap()
  {
    Map localMap = CreateMap("setCamera", Integer.valueOf(11), "animateCamera", Integer.valueOf(12), "animateToRegion", Integer.valueOf(1), "animateToCoordinate", Integer.valueOf(2), "animateToViewingAngle", Integer.valueOf(3), "animateToBearing", Integer.valueOf(4), "fitToElements", Integer.valueOf(5), "fitToSuppliedMarkers", Integer.valueOf(6), "fitToCoordinates", Integer.valueOf(7), "animateToNavigation", Integer.valueOf(9));
    localMap.putAll(MapBuilder.of("setMapBoundaries", Integer.valueOf(8), "setIndoorActiveLevelIndex", Integer.valueOf(10)));
    return localMap;
  }
  
  @Nullable
  public Map getExportedCustomDirectEventTypeConstants()
  {
    Map localMap = MapBuilder.of("onMapReady", MapBuilder.of("registrationName", "onMapReady"), "onPress", MapBuilder.of("registrationName", "onPress"), "onLongPress", MapBuilder.of("registrationName", "onLongPress"), "onMarkerPress", MapBuilder.of("registrationName", "onMarkerPress"), "onMarkerSelect", MapBuilder.of("registrationName", "onMarkerSelect"), "onMarkerDeselect", MapBuilder.of("registrationName", "onMarkerDeselect"), "onCalloutPress", MapBuilder.of("registrationName", "onCalloutPress"));
    localMap.putAll(MapBuilder.of("onUserLocationChange", MapBuilder.of("registrationName", "onUserLocationChange"), "onMarkerDragStart", MapBuilder.of("registrationName", "onMarkerDragStart"), "onMarkerDrag", MapBuilder.of("registrationName", "onMarkerDrag"), "onMarkerDragEnd", MapBuilder.of("registrationName", "onMarkerDragEnd"), "onPanDrag", MapBuilder.of("registrationName", "onPanDrag"), "onKmlReady", MapBuilder.of("registrationName", "onKmlReady"), "onPoiClick", MapBuilder.of("registrationName", "onPoiClick")));
    localMap.putAll(MapBuilder.of("onIndoorLevelActivated", MapBuilder.of("registrationName", "onIndoorLevelActivated"), "onIndoorBuildingFocused", MapBuilder.of("registrationName", "onIndoorBuildingFocused"), "onDoublePress", MapBuilder.of("registrationName", "onDoublePress"), "onMapLoaded", MapBuilder.of("registrationName", "onMapLoaded")));
    return localMap;
  }
  
  public AirMapMarkerManager getMarkerManager()
  {
    return markerManager;
  }
  
  public String getName()
  {
    return "AIRMap";
  }
  
  public void onDropViewInstance(AirMapView paramAirMapView)
  {
    paramAirMapView.doDestroy();
    super.onDropViewInstance(paramAirMapView);
  }
  
  void pushEvent(ThemedReactContext paramThemedReactContext, View paramView, String paramString, WritableMap paramWritableMap)
  {
    ((RCTEventEmitter)paramThemedReactContext.getJSModule(RCTEventEmitter.class)).receiveEvent(paramView.getId(), paramString, paramWritableMap);
  }
  
  public void receiveCommand(AirMapView paramAirMapView, int paramInt, @Nullable ReadableArray paramReadableArray)
  {
    double d;
    switch (paramInt)
    {
    default: 
      return;
    case 12: 
      paramAirMapView.animateToCamera(paramReadableArray.getMap(0), Integer.valueOf(paramReadableArray.getInt(1)).intValue());
      return;
    case 11: 
      paramAirMapView.animateToCamera(paramReadableArray.getMap(0), 0);
      return;
    case 10: 
      paramAirMapView.setIndoorActiveLevelIndex(paramReadableArray.getInt(0));
      return;
    case 9: 
      localObject = paramReadableArray.getMap(0);
      d = ((ReadableMap)localObject).getDouble("longitude");
      paramAirMapView.animateToNavigation(new LatLng(Double.valueOf(((ReadableMap)localObject).getDouble("latitude")).doubleValue(), Double.valueOf(d).doubleValue()), (float)paramReadableArray.getDouble(1), (float)paramReadableArray.getDouble(2), Integer.valueOf(paramReadableArray.getInt(3)).intValue());
      return;
    case 8: 
      paramAirMapView.setMapBoundaries(paramReadableArray.getMap(0), paramReadableArray.getMap(1));
      return;
    case 7: 
      paramAirMapView.fitToCoordinates(paramReadableArray.getArray(0), paramReadableArray.getMap(1), paramReadableArray.getBoolean(2));
      return;
    case 6: 
      paramAirMapView.fitToSuppliedMarkers(paramReadableArray.getArray(0), paramReadableArray.getMap(1), paramReadableArray.getBoolean(2));
      return;
    case 5: 
      paramAirMapView.fitToElements(paramReadableArray.getBoolean(0));
      return;
    case 4: 
      paramAirMapView.animateToBearing((float)paramReadableArray.getDouble(0), Integer.valueOf(paramReadableArray.getInt(1)).intValue());
      return;
    case 3: 
      paramAirMapView.animateToViewingAngle((float)paramReadableArray.getDouble(0), Integer.valueOf(paramReadableArray.getInt(1)).intValue());
      return;
    case 2: 
      localObject = paramReadableArray.getMap(0);
      paramInt = paramReadableArray.getInt(1);
      d = ((ReadableMap)localObject).getDouble("longitude");
      paramAirMapView.animateToCoordinate(new LatLng(Double.valueOf(((ReadableMap)localObject).getDouble("latitude")).doubleValue(), Double.valueOf(d).doubleValue()), Integer.valueOf(paramInt).intValue());
      return;
    }
    Object localObject = paramReadableArray.getMap(0);
    paramInt = paramReadableArray.getInt(1);
    paramReadableArray = Double.valueOf(((ReadableMap)localObject).getDouble("longitude"));
    Double localDouble1 = Double.valueOf(((ReadableMap)localObject).getDouble("latitude"));
    Double localDouble2 = Double.valueOf(((ReadableMap)localObject).getDouble("longitudeDelta"));
    localObject = Double.valueOf(((ReadableMap)localObject).getDouble("latitudeDelta"));
    paramAirMapView.animateToRegion(new LatLngBounds(new LatLng(localDouble1.doubleValue() - ((Double)localObject).doubleValue() / 2.0D, paramReadableArray.doubleValue() - localDouble2.doubleValue() / 2.0D), new LatLng(localDouble1.doubleValue() + ((Double)localObject).doubleValue() / 2.0D, paramReadableArray.doubleValue() + localDouble2.doubleValue() / 2.0D)), Integer.valueOf(paramInt).intValue());
  }
  
  public void removeViewAt(AirMapView paramAirMapView, int paramInt)
  {
    paramAirMapView.removeFeatureAt(paramInt);
  }
  
  @ReactProp(defaultBoolean=false, name="cacheEnabled")
  public void setCacheEnabled(AirMapView paramAirMapView, boolean paramBoolean)
  {
    paramAirMapView.setCacheEnabled(paramBoolean);
  }
  
  @ReactProp(name="camera")
  public void setCamera(AirMapView paramAirMapView, ReadableMap paramReadableMap)
  {
    paramAirMapView.setCamera(paramReadableMap);
  }
  
  @ReactProp(defaultBoolean=false, name="handlePanDrag")
  public void setHandlePanDrag(AirMapView paramAirMapView, boolean paramBoolean)
  {
    paramAirMapView.setHandlePanDrag(paramBoolean);
  }
  
  @ReactProp(name="initialCamera")
  public void setInitialCamera(AirMapView paramAirMapView, ReadableMap paramReadableMap)
  {
    paramAirMapView.setInitialCamera(paramReadableMap);
  }
  
  @ReactProp(name="initialRegion")
  public void setInitialRegion(AirMapView paramAirMapView, ReadableMap paramReadableMap)
  {
    paramAirMapView.setInitialRegion(paramReadableMap);
  }
  
  @ReactProp(name="kmlSrc")
  public void setKmlSrc(AirMapView paramAirMapView, String paramString)
  {
    if (paramString != null) {
      paramAirMapView.setKmlSrc(paramString);
    }
  }
  
  @ReactProp(customType="Color", name="loadingBackgroundColor")
  public void setLoadingBackgroundColor(AirMapView paramAirMapView, @Nullable Integer paramInteger)
  {
    paramAirMapView.setLoadingBackgroundColor(paramInteger);
  }
  
  @ReactProp(defaultBoolean=false, name="loadingEnabled")
  public void setLoadingEnabled(AirMapView paramAirMapView, boolean paramBoolean)
  {
    paramAirMapView.enableMapLoading(paramBoolean);
  }
  
  @ReactProp(customType="Color", name="loadingIndicatorColor")
  public void setLoadingIndicatorColor(AirMapView paramAirMapView, @Nullable Integer paramInteger)
  {
    paramAirMapView.setLoadingIndicatorColor(paramInteger);
  }
  
  @ReactProp(name="mapPadding")
  public void setMapPadding(AirMapView paramAirMapView, @Nullable ReadableMap paramReadableMap)
  {
    double d = getResourcesgetDisplayMetricsdensity;
    int i2 = 0;
    int i1;
    int n;
    int m;
    if (paramReadableMap != null)
    {
      int i;
      if (paramReadableMap.hasKey("left")) {
        i = (int)(paramReadableMap.getDouble("left") * d);
      } else {
        i = 0;
      }
      int j;
      if (paramReadableMap.hasKey("top")) {
        j = (int)(paramReadableMap.getDouble("top") * d);
      } else {
        j = 0;
      }
      int k;
      if (paramReadableMap.hasKey("right")) {
        k = (int)(paramReadableMap.getDouble("right") * d);
      } else {
        k = 0;
      }
      i1 = i;
      n = j;
      m = k;
      if (paramReadableMap.hasKey("bottom"))
      {
        i2 = (int)(paramReadableMap.getDouble("bottom") * d);
        i1 = i;
        n = j;
        m = k;
      }
    }
    else
    {
      i1 = 0;
      n = 0;
      m = 0;
    }
    map.setPadding(i1, n, m, i2);
  }
  
  @ReactProp(name="customMapStyleString")
  public void setMapStyle(AirMapView paramAirMapView, @Nullable String paramString)
  {
    map.setMapStyle(new MapStyleOptions(paramString));
  }
  
  @ReactProp(name="mapType")
  public void setMapType(AirMapView paramAirMapView, @Nullable String paramString)
  {
    int i = ((Integer)MAP_TYPES.get(paramString)).intValue();
    map.setMapType(i);
  }
  
  public void setMarkerManager(AirMapMarkerManager paramAirMapMarkerManager)
  {
    markerManager = paramAirMapMarkerManager;
  }
  
  @ReactProp(name="maxZoomLevel")
  public void setMaxZoomLevel(AirMapView paramAirMapView, float paramFloat)
  {
    map.setMaxZoomPreference(paramFloat);
  }
  
  @ReactProp(name="minZoomLevel")
  public void setMinZoomLevel(AirMapView paramAirMapView, float paramFloat)
  {
    map.setMinZoomPreference(paramFloat);
  }
  
  @ReactProp(defaultBoolean=true, name="moveOnMarkerPress")
  public void setMoveOnMarkerPress(AirMapView paramAirMapView, boolean paramBoolean)
  {
    paramAirMapView.setMoveOnMarkerPress(paramBoolean);
  }
  
  @ReactProp(defaultBoolean=false, name="pitchEnabled")
  public void setPitchEnabled(AirMapView paramAirMapView, boolean paramBoolean)
  {
    map.getUiSettings().setTiltGesturesEnabled(paramBoolean);
  }
  
  @ReactProp(name="region")
  public void setRegion(AirMapView paramAirMapView, ReadableMap paramReadableMap)
  {
    paramAirMapView.setRegion(paramReadableMap);
  }
  
  @ReactProp(defaultBoolean=false, name="rotateEnabled")
  public void setRotateEnabled(AirMapView paramAirMapView, boolean paramBoolean)
  {
    map.getUiSettings().setRotateGesturesEnabled(paramBoolean);
  }
  
  @ReactProp(defaultBoolean=false, name="scrollEnabled")
  public void setScrollEnabled(AirMapView paramAirMapView, boolean paramBoolean)
  {
    map.getUiSettings().setScrollGesturesEnabled(paramBoolean);
  }
  
  @ReactProp(defaultBoolean=false, name="showsBuildings")
  public void setShowBuildings(AirMapView paramAirMapView, boolean paramBoolean)
  {
    map.setBuildingsEnabled(paramBoolean);
  }
  
  @ReactProp(defaultBoolean=false, name="showsIndoors")
  public void setShowIndoors(AirMapView paramAirMapView, boolean paramBoolean)
  {
    map.setIndoorEnabled(paramBoolean);
  }
  
  @ReactProp(defaultBoolean=false, name="showsTraffic")
  public void setShowTraffic(AirMapView paramAirMapView, boolean paramBoolean)
  {
    map.setTrafficEnabled(paramBoolean);
  }
  
  @ReactProp(defaultBoolean=false, name="showsCompass")
  public void setShowsCompass(AirMapView paramAirMapView, boolean paramBoolean)
  {
    map.getUiSettings().setCompassEnabled(paramBoolean);
  }
  
  @ReactProp(defaultBoolean=false, name="showsIndoorLevelPicker")
  public void setShowsIndoorLevelPicker(AirMapView paramAirMapView, boolean paramBoolean)
  {
    map.getUiSettings().setIndoorLevelPickerEnabled(paramBoolean);
  }
  
  @ReactProp(defaultBoolean=true, name="showsMyLocationButton")
  public void setShowsMyLocationButton(AirMapView paramAirMapView, boolean paramBoolean)
  {
    paramAirMapView.setShowsMyLocationButton(paramBoolean);
  }
  
  @ReactProp(defaultBoolean=false, name="showsUserLocation")
  public void setShowsUserLocation(AirMapView paramAirMapView, boolean paramBoolean)
  {
    paramAirMapView.setShowsUserLocation(paramBoolean);
  }
  
  @ReactProp(defaultBoolean=true, name="toolbarEnabled")
  public void setToolbarEnabled(AirMapView paramAirMapView, boolean paramBoolean)
  {
    paramAirMapView.setToolbarEnabled(paramBoolean);
  }
  
  @ReactProp(defaultBoolean=true, name="zoomControlEnabled")
  public void setZoomControlEnabled(AirMapView paramAirMapView, boolean paramBoolean)
  {
    map.getUiSettings().setZoomControlsEnabled(paramBoolean);
  }
  
  @ReactProp(defaultBoolean=false, name="zoomEnabled")
  public void setZoomEnabled(AirMapView paramAirMapView, boolean paramBoolean)
  {
    map.getUiSettings().setZoomGesturesEnabled(paramBoolean);
  }
  
  public void updateExtraData(AirMapView paramAirMapView, Object paramObject)
  {
    paramAirMapView.updateExtraData(paramObject);
  }
}
