package com.airbnb.android.react.maps;

import android.content.Context;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.model.Tile;
import com.google.android.gms.maps.model.TileOverlay;
import com.google.android.gms.maps.model.TileOverlayOptions;
import com.google.android.gms.maps.model.TileProvider;

public class AirMapLocalTile
  extends AirMapFeature
{
  private String pathTemplate;
  private TileOverlay tileOverlay;
  private TileOverlayOptions tileOverlayOptions;
  private AIRMapLocalTileProvider tileProvider;
  private float tileSize;
  private float zIndex;
  
  public AirMapLocalTile(Context paramContext)
  {
    super(paramContext);
  }
  
  private TileOverlayOptions createTileOverlayOptions()
  {
    TileOverlayOptions localTileOverlayOptions = new TileOverlayOptions();
    localTileOverlayOptions.zIndex(zIndex);
    tileProvider = new AIRMapLocalTileProvider((int)tileSize, pathTemplate);
    localTileOverlayOptions.tileProvider(tileProvider);
    return localTileOverlayOptions;
  }
  
  public void addToMap(GoogleMap paramGoogleMap)
  {
    tileOverlay = paramGoogleMap.addTileOverlay(getTileOverlayOptions());
  }
  
  public Object getFeature()
  {
    return tileOverlay;
  }
  
  public TileOverlayOptions getTileOverlayOptions()
  {
    if (tileOverlayOptions == null) {
      tileOverlayOptions = createTileOverlayOptions();
    }
    return tileOverlayOptions;
  }
  
  public void removeFromMap(GoogleMap paramGoogleMap)
  {
    tileOverlay.remove();
  }
  
  public void setPathTemplate(String paramString)
  {
    pathTemplate = paramString;
    if (tileProvider != null) {
      tileProvider.setPathTemplate(paramString);
    }
    if (tileOverlay != null) {
      tileOverlay.clearTileCache();
    }
  }
  
  public void setTileSize(float paramFloat)
  {
    tileSize = paramFloat;
    if (tileProvider != null) {
      tileProvider.setTileSize((int)paramFloat);
    }
  }
  
  public void setZIndex(float paramFloat)
  {
    zIndex = paramFloat;
    if (tileOverlay != null) {
      tileOverlay.setZIndex(paramFloat);
    }
  }
  
  class AIRMapLocalTileProvider
    implements TileProvider
  {
    private static final int BUFFER_SIZE = 16384;
    private String pathTemplate;
    private int tileSize;
    
    public AIRMapLocalTileProvider(int paramInt, String paramString)
    {
      tileSize = paramInt;
      pathTemplate = paramString;
    }
    
    private String getTileFilename(int paramInt1, int paramInt2, int paramInt3)
    {
      return pathTemplate.replace("{x}", Integer.toString(paramInt1)).replace("{y}", Integer.toString(paramInt2)).replace("{z}", Integer.toString(paramInt3));
    }
    
    /* Error */
    private byte[] readTileImage(int paramInt1, int paramInt2, int paramInt3)
    {
      // Byte code:
      //   0: new 59	java/io/File
      //   3: dup
      //   4: aload_0
      //   5: iload_1
      //   6: iload_2
      //   7: iload_3
      //   8: invokespecial 61	com/airbnb/android/react/maps/AirMapLocalTile$AIRMapLocalTileProvider:getTileFilename	(III)Ljava/lang/String;
      //   11: invokespecial 64	java/io/File:<init>	(Ljava/lang/String;)V
      //   14: astore 4
      //   16: new 66	java/io/FileInputStream
      //   19: dup
      //   20: aload 4
      //   22: invokespecial 69	java/io/FileInputStream:<init>	(Ljava/io/File;)V
      //   25: astore 4
      //   27: new 71	java/io/ByteArrayOutputStream
      //   30: dup
      //   31: invokespecial 72	java/io/ByteArrayOutputStream:<init>	()V
      //   34: astore 7
      //   36: aload 4
      //   38: astore 5
      //   40: aload 7
      //   42: astore 6
      //   44: sipush 16384
      //   47: newarray byte
      //   49: astore 8
      //   51: aload 4
      //   53: astore 5
      //   55: aload 7
      //   57: astore 6
      //   59: aload 4
      //   61: aload 8
      //   63: iconst_0
      //   64: sipush 16384
      //   67: invokevirtual 78	java/io/InputStream:read	([BII)I
      //   70: istore_1
      //   71: iload_1
      //   72: iconst_m1
      //   73: if_icmpeq +23 -> 96
      //   76: aload 4
      //   78: astore 5
      //   80: aload 7
      //   82: astore 6
      //   84: aload 7
      //   86: aload 8
      //   88: iconst_0
      //   89: iload_1
      //   90: invokevirtual 82	java/io/ByteArrayOutputStream:write	([BII)V
      //   93: goto -42 -> 51
      //   96: aload 4
      //   98: astore 5
      //   100: aload 7
      //   102: astore 6
      //   104: aload 7
      //   106: invokevirtual 85	java/io/ByteArrayOutputStream:flush	()V
      //   109: aload 4
      //   111: astore 5
      //   113: aload 7
      //   115: astore 6
      //   117: aload 7
      //   119: invokevirtual 89	java/io/ByteArrayOutputStream:toByteArray	()[B
      //   122: astore 8
      //   124: aload 4
      //   126: invokevirtual 92	java/io/InputStream:close	()V
      //   129: aload 7
      //   131: invokevirtual 93	java/io/ByteArrayOutputStream:close	()V
      //   134: aload 8
      //   136: areturn
      //   137: astore 8
      //   139: aload 4
      //   141: astore 9
      //   143: aload 7
      //   145: astore 4
      //   147: goto +77 -> 224
      //   150: astore 8
      //   152: aload 4
      //   154: astore 9
      //   156: aload 7
      //   158: astore 4
      //   160: goto +111 -> 271
      //   163: astore 5
      //   165: aconst_null
      //   166: astore 6
      //   168: goto +151 -> 319
      //   171: astore 8
      //   173: aconst_null
      //   174: astore 5
      //   176: aload 4
      //   178: astore 9
      //   180: aload 5
      //   182: astore 4
      //   184: goto +40 -> 224
      //   187: astore 8
      //   189: aconst_null
      //   190: astore 5
      //   192: aload 4
      //   194: astore 9
      //   196: aload 5
      //   198: astore 4
      //   200: goto +71 -> 271
      //   203: astore 5
      //   205: aconst_null
      //   206: astore 6
      //   208: aload 6
      //   210: astore 4
      //   212: goto +107 -> 319
      //   215: astore 8
      //   217: aconst_null
      //   218: astore 9
      //   220: aload 9
      //   222: astore 4
      //   224: aload 9
      //   226: astore 5
      //   228: aload 4
      //   230: astore 6
      //   232: aload 8
      //   234: invokevirtual 96	java/lang/OutOfMemoryError:printStackTrace	()V
      //   237: aload 9
      //   239: ifnull +11 -> 250
      //   242: aload 9
      //   244: invokevirtual 92	java/io/InputStream:close	()V
      //   247: goto +3 -> 250
      //   250: aload 4
      //   252: ifnull +8 -> 260
      //   255: aload 4
      //   257: invokevirtual 93	java/io/ByteArrayOutputStream:close	()V
      //   260: aconst_null
      //   261: areturn
      //   262: astore 8
      //   264: aconst_null
      //   265: astore 9
      //   267: aload 9
      //   269: astore 4
      //   271: aload 9
      //   273: astore 5
      //   275: aload 4
      //   277: astore 6
      //   279: aload 8
      //   281: invokevirtual 97	java/io/IOException:printStackTrace	()V
      //   284: aload 9
      //   286: ifnull +11 -> 297
      //   289: aload 9
      //   291: invokevirtual 92	java/io/InputStream:close	()V
      //   294: goto +3 -> 297
      //   297: aload 4
      //   299: ifnull +8 -> 307
      //   302: aload 4
      //   304: invokevirtual 93	java/io/ByteArrayOutputStream:close	()V
      //   307: aconst_null
      //   308: areturn
      //   309: astore 7
      //   311: aload 5
      //   313: astore 4
      //   315: aload 7
      //   317: astore 5
      //   319: aload 4
      //   321: ifnull +11 -> 332
      //   324: aload 4
      //   326: invokevirtual 92	java/io/InputStream:close	()V
      //   329: goto +3 -> 332
      //   332: aload 6
      //   334: ifnull +8 -> 342
      //   337: aload 6
      //   339: invokevirtual 93	java/io/ByteArrayOutputStream:close	()V
      //   342: aload 5
      //   344: athrow
      //   345: astore 4
      //   347: goto -218 -> 129
      //   350: astore 4
      //   352: aload 8
      //   354: areturn
      //   355: astore 5
      //   357: goto -107 -> 250
      //   360: astore 4
      //   362: aconst_null
      //   363: areturn
      //   364: astore 5
      //   366: goto -69 -> 297
      //   369: astore 4
      //   371: aconst_null
      //   372: areturn
      //   373: astore 4
      //   375: goto -43 -> 332
      //   378: astore 4
      //   380: goto -38 -> 342
      // Local variable table:
      //   start	length	slot	name	signature
      //   0	383	0	this	AIRMapLocalTileProvider
      //   0	383	1	paramInt1	int
      //   0	383	2	paramInt2	int
      //   0	383	3	paramInt3	int
      //   14	311	4	localObject1	Object
      //   345	1	4	localException1	Exception
      //   350	1	4	localException2	Exception
      //   360	1	4	localException3	Exception
      //   369	1	4	localException4	Exception
      //   373	1	4	localException5	Exception
      //   378	1	4	localException6	Exception
      //   38	74	5	localObject2	Object
      //   163	1	5	localObject3	Object
      //   174	23	5	localObject4	Object
      //   203	1	5	localObject5	Object
      //   226	117	5	localObject6	Object
      //   355	1	5	localException7	Exception
      //   364	1	5	localException8	Exception
      //   42	296	6	localObject7	Object
      //   34	123	7	localByteArrayOutputStream	java.io.ByteArrayOutputStream
      //   309	7	7	localObject8	Object
      //   49	86	8	arrayOfByte	byte[]
      //   137	1	8	localOutOfMemoryError1	OutOfMemoryError
      //   150	1	8	localIOException1	java.io.IOException
      //   171	1	8	localOutOfMemoryError2	OutOfMemoryError
      //   187	1	8	localIOException2	java.io.IOException
      //   215	18	8	localOutOfMemoryError3	OutOfMemoryError
      //   262	91	8	localIOException3	java.io.IOException
      //   141	149	9	localObject9	Object
      // Exception table:
      //   from	to	target	type
      //   44	51	137	java/lang/OutOfMemoryError
      //   59	71	137	java/lang/OutOfMemoryError
      //   84	93	137	java/lang/OutOfMemoryError
      //   104	109	137	java/lang/OutOfMemoryError
      //   117	124	137	java/lang/OutOfMemoryError
      //   44	51	150	java/io/IOException
      //   59	71	150	java/io/IOException
      //   84	93	150	java/io/IOException
      //   104	109	150	java/io/IOException
      //   117	124	150	java/io/IOException
      //   27	36	163	finally
      //   27	36	171	java/lang/OutOfMemoryError
      //   27	36	187	java/io/IOException
      //   16	27	203	finally
      //   16	27	215	java/lang/OutOfMemoryError
      //   16	27	262	java/io/IOException
      //   44	51	309	finally
      //   59	71	309	finally
      //   84	93	309	finally
      //   104	109	309	finally
      //   117	124	309	finally
      //   232	237	309	finally
      //   279	284	309	finally
      //   124	129	345	java/lang/Exception
      //   129	134	350	java/lang/Exception
      //   242	247	355	java/lang/Exception
      //   255	260	360	java/lang/Exception
      //   289	294	364	java/lang/Exception
      //   302	307	369	java/lang/Exception
      //   324	329	373	java/lang/Exception
      //   337	342	378	java/lang/Exception
    }
    
    public Tile getTile(int paramInt1, int paramInt2, int paramInt3)
    {
      byte[] arrayOfByte = readTileImage(paramInt1, paramInt2, paramInt3);
      if (arrayOfByte == null) {
        return TileProvider.NO_TILE;
      }
      return new Tile(tileSize, tileSize, arrayOfByte);
    }
    
    public void setPathTemplate(String paramString)
    {
      pathTemplate = paramString;
    }
    
    public void setTileSize(int paramInt)
    {
      tileSize = paramInt;
    }
  }
}
