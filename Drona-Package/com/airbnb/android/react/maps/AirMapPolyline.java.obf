package com.airbnb.android.react.maps;

import android.content.Context;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.model.Cap;
import com.google.android.gms.maps.model.Dash;
import com.google.android.gms.maps.model.Dot;
import com.google.android.gms.maps.model.Gap;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.PatternItem;
import com.google.android.gms.maps.model.Polyline;
import com.google.android.gms.maps.model.PolylineOptions;
import com.google.android.gms.maps.model.RoundCap;
import java.util.ArrayList;
import java.util.List;

public class AirMapPolyline
  extends AirMapFeature
{
  private int color;
  private List<LatLng> coordinates;
  private boolean geodesic;
  private Cap lineCap = new RoundCap();
  private List<PatternItem> pattern;
  private ReadableArray patternValues;
  private Polyline polyline;
  private PolylineOptions polylineOptions;
  private boolean tappable;
  private float width;
  private float zIndex;
  
  public AirMapPolyline(Context paramContext)
  {
    super(paramContext);
  }
  
  private void applyPattern()
  {
    if (patternValues == null) {
      return;
    }
    pattern = new ArrayList(patternValues.size());
    int i = 0;
    while (i < patternValues.size())
    {
      float f = (float)patternValues.getDouble(i);
      int j;
      if (i % 2 != 0) {
        j = 1;
      } else {
        j = 0;
      }
      if (j != 0)
      {
        pattern.add(new Gap(f));
      }
      else
      {
        Object localObject;
        if ((lineCap instanceof RoundCap)) {
          localObject = new Dot();
        } else {
          localObject = new Dash(f);
        }
        pattern.add(localObject);
      }
      i += 1;
    }
    if (polyline != null) {
      polyline.setPattern(pattern);
    }
  }
  
  private PolylineOptions createPolylineOptions()
  {
    PolylineOptions localPolylineOptions = new PolylineOptions();
    localPolylineOptions.addAll(coordinates);
    localPolylineOptions.color(color);
    localPolylineOptions.width(width);
    localPolylineOptions.geodesic(geodesic);
    localPolylineOptions.zIndex(zIndex);
    localPolylineOptions.startCap(lineCap);
    localPolylineOptions.endCap(lineCap);
    localPolylineOptions.pattern(pattern);
    return localPolylineOptions;
  }
  
  public void addToMap(GoogleMap paramGoogleMap)
  {
    polyline = paramGoogleMap.addPolyline(getPolylineOptions());
    polyline.setClickable(tappable);
  }
  
  public Object getFeature()
  {
    return polyline;
  }
  
  public PolylineOptions getPolylineOptions()
  {
    if (polylineOptions == null) {
      polylineOptions = createPolylineOptions();
    }
    return polylineOptions;
  }
  
  public void removeFromMap(GoogleMap paramGoogleMap)
  {
    polyline.remove();
  }
  
  public void setColor(int paramInt)
  {
    color = paramInt;
    if (polyline != null) {
      polyline.setColor(paramInt);
    }
  }
  
  public void setCoordinates(ReadableArray paramReadableArray)
  {
    coordinates = new ArrayList(paramReadableArray.size());
    int i = 0;
    while (i < paramReadableArray.size())
    {
      ReadableMap localReadableMap = paramReadableArray.getMap(i);
      coordinates.add(i, new LatLng(localReadableMap.getDouble("latitude"), localReadableMap.getDouble("longitude")));
      i += 1;
    }
    if (polyline != null) {
      polyline.setPoints(coordinates);
    }
  }
  
  public void setGeodesic(boolean paramBoolean)
  {
    geodesic = paramBoolean;
    if (polyline != null) {
      polyline.setGeodesic(paramBoolean);
    }
  }
  
  public void setLineCap(Cap paramCap)
  {
    lineCap = paramCap;
    if (polyline != null)
    {
      polyline.setStartCap(paramCap);
      polyline.setEndCap(paramCap);
    }
    applyPattern();
  }
  
  public void setLineDashPattern(ReadableArray paramReadableArray)
  {
    patternValues = paramReadableArray;
    applyPattern();
  }
  
  public void setTappable(boolean paramBoolean)
  {
    tappable = paramBoolean;
    if (polyline != null) {
      polyline.setClickable(tappable);
    }
  }
  
  public void setWidth(float paramFloat)
  {
    width = paramFloat;
    if (polyline != null) {
      polyline.setWidth(paramFloat);
    }
  }
  
  public void setZIndex(float paramFloat)
  {
    zIndex = paramFloat;
    if (polyline != null) {
      polyline.setZIndex(paramFloat);
    }
  }
}
