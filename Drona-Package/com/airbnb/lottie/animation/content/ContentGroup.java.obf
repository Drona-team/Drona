package com.airbnb.lottie.animation.content;

import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Path;
import android.graphics.RectF;
import androidx.annotation.Nullable;
import com.airbnb.lottie.LottieDrawable;
import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;
import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation.AnimationListener;
import com.airbnb.lottie.animation.keyframe.TransformKeyframeAnimation;
import com.airbnb.lottie.model.KeyPath;
import com.airbnb.lottie.model.KeyPathElement;
import com.airbnb.lottie.model.animatable.AnimatableTransform;
import com.airbnb.lottie.model.content.ContentModel;
import com.airbnb.lottie.model.content.ShapeGroup;
import com.airbnb.lottie.model.layer.BaseLayer;
import com.airbnb.lottie.value.LottieValueCallback;
import java.util.ArrayList;
import java.util.List;

public class ContentGroup
  implements DrawingContent, PathContent, BaseKeyframeAnimation.AnimationListener, KeyPathElement
{
  private final List<Content> contents;
  private final boolean hidden;
  private final LottieDrawable lottieDrawable;
  private final Matrix matrix = new Matrix();
  private final String name;
  private final Path path = new Path();
  @Nullable
  private List<PathContent> pathContents;
  private final RectF rect = new RectF();
  @Nullable
  private TransformKeyframeAnimation transformAnimation;
  
  public ContentGroup(LottieDrawable paramLottieDrawable, BaseLayer paramBaseLayer, ShapeGroup paramShapeGroup)
  {
    this(paramLottieDrawable, paramBaseLayer, paramShapeGroup.getName(), paramShapeGroup.isHidden(), contentsFromModels(paramLottieDrawable, paramBaseLayer, paramShapeGroup.getItems()), findTransform(paramShapeGroup.getItems()));
  }
  
  ContentGroup(LottieDrawable paramLottieDrawable, BaseLayer paramBaseLayer, String paramString, boolean paramBoolean, List<Content> paramList, @Nullable AnimatableTransform paramAnimatableTransform)
  {
    name = paramString;
    lottieDrawable = paramLottieDrawable;
    hidden = paramBoolean;
    contents = paramList;
    if (paramAnimatableTransform != null)
    {
      transformAnimation = paramAnimatableTransform.createAnimation();
      transformAnimation.addAnimationsToLayer(paramBaseLayer);
      transformAnimation.addListener(this);
    }
    paramLottieDrawable = new ArrayList();
    int i = paramList.size() - 1;
    while (i >= 0)
    {
      paramBaseLayer = (Content)paramList.get(i);
      if ((paramBaseLayer instanceof GreedyContent)) {
        paramLottieDrawable.add((GreedyContent)paramBaseLayer);
      }
      i -= 1;
    }
    i = paramLottieDrawable.size() - 1;
    while (i >= 0)
    {
      ((GreedyContent)paramLottieDrawable.get(i)).absorbContent(paramList.listIterator(paramList.size()));
      i -= 1;
    }
  }
  
  private static List<Content> contentsFromModels(LottieDrawable paramLottieDrawable, BaseLayer paramBaseLayer, List<ContentModel> paramList)
  {
    ArrayList localArrayList = new ArrayList(paramList.size());
    int i = 0;
    while (i < paramList.size())
    {
      Content localContent = ((ContentModel)paramList.get(i)).toContent(paramLottieDrawable, paramBaseLayer);
      if (localContent != null) {
        localArrayList.add(localContent);
      }
      i += 1;
    }
    return localArrayList;
  }
  
  @Nullable
  static AnimatableTransform findTransform(List<ContentModel> paramList)
  {
    int i = 0;
    while (i < paramList.size())
    {
      ContentModel localContentModel = (ContentModel)paramList.get(i);
      if ((localContentModel instanceof AnimatableTransform)) {
        return (AnimatableTransform)localContentModel;
      }
      i += 1;
    }
    return null;
  }
  
  public <T> void addValueCallback(T paramT, @Nullable LottieValueCallback<T> paramLottieValueCallback)
  {
    if (transformAnimation != null) {
      transformAnimation.applyValueCallback(paramT, paramLottieValueCallback);
    }
  }
  
  public void draw(Canvas paramCanvas, Matrix paramMatrix, int paramInt)
  {
    if (hidden) {
      return;
    }
    matrix.set(paramMatrix);
    int i = paramInt;
    if (transformAnimation != null)
    {
      matrix.preConcat(transformAnimation.getMatrix());
      if (transformAnimation.getOpacity() == null) {
        i = 100;
      } else {
        i = ((Integer)transformAnimation.getOpacity().getValue()).intValue();
      }
      i = (int)(i / 100.0F * paramInt / 255.0F * 255.0F);
    }
    paramInt = contents.size() - 1;
    while (paramInt >= 0)
    {
      paramMatrix = contents.get(paramInt);
      if ((paramMatrix instanceof DrawingContent)) {
        ((DrawingContent)paramMatrix).draw(paramCanvas, matrix, i);
      }
      paramInt -= 1;
    }
  }
  
  public void getBounds(RectF paramRectF, Matrix paramMatrix, boolean paramBoolean)
  {
    matrix.set(paramMatrix);
    if (transformAnimation != null) {
      matrix.preConcat(transformAnimation.getMatrix());
    }
    rect.set(0.0F, 0.0F, 0.0F, 0.0F);
    int i = contents.size() - 1;
    while (i >= 0)
    {
      paramMatrix = (Content)contents.get(i);
      if ((paramMatrix instanceof DrawingContent))
      {
        ((DrawingContent)paramMatrix).getBounds(rect, matrix, paramBoolean);
        paramRectF.union(rect);
      }
      i -= 1;
    }
  }
  
  public String getName()
  {
    return name;
  }
  
  public Path getPath()
  {
    matrix.reset();
    if (transformAnimation != null) {
      matrix.set(transformAnimation.getMatrix());
    }
    path.reset();
    if (hidden) {
      return path;
    }
    int i = contents.size() - 1;
    while (i >= 0)
    {
      Content localContent = (Content)contents.get(i);
      if ((localContent instanceof PathContent)) {
        path.addPath(((PathContent)localContent).getPath(), matrix);
      }
      i -= 1;
    }
    return path;
  }
  
  List<PathContent> getPathList()
  {
    if (pathContents == null)
    {
      pathContents = new ArrayList();
      int i = 0;
      while (i < contents.size())
      {
        Content localContent = (Content)contents.get(i);
        if ((localContent instanceof PathContent)) {
          pathContents.add((PathContent)localContent);
        }
        i += 1;
      }
    }
    return pathContents;
  }
  
  Matrix getTransformationMatrix()
  {
    if (transformAnimation != null) {
      return transformAnimation.getMatrix();
    }
    matrix.reset();
    return matrix;
  }
  
  public void onValueChanged()
  {
    lottieDrawable.invalidateSelf();
  }
  
  public void resolveKeyPath(KeyPath paramKeyPath1, int paramInt, List<KeyPath> paramList, KeyPath paramKeyPath2)
  {
    if (!paramKeyPath1.matches(getName(), paramInt)) {
      return;
    }
    KeyPath localKeyPath = paramKeyPath2;
    if (!"__container".equals(getName()))
    {
      paramKeyPath2 = paramKeyPath2.addKey(getName());
      localKeyPath = paramKeyPath2;
      if (paramKeyPath1.fullyResolvesTo(getName(), paramInt))
      {
        paramList.add(paramKeyPath2.resolve(this));
        localKeyPath = paramKeyPath2;
      }
    }
    if (paramKeyPath1.propagateToChildren(getName(), paramInt))
    {
      int j = paramKeyPath1.incrementDepthBy(getName(), paramInt);
      int i = 0;
      while (i < contents.size())
      {
        paramKeyPath2 = (Content)contents.get(i);
        if ((paramKeyPath2 instanceof KeyPathElement)) {
          ((KeyPathElement)paramKeyPath2).resolveKeyPath(paramKeyPath1, paramInt + j, paramList, localKeyPath);
        }
        i += 1;
      }
    }
  }
  
  public void setContents(List<Content> paramList1, List<Content> paramList2)
  {
    paramList2 = new ArrayList(paramList1.size() + contents.size());
    paramList2.addAll(paramList1);
    int i = contents.size() - 1;
    while (i >= 0)
    {
      paramList1 = (Content)contents.get(i);
      paramList1.setContents(paramList2, contents.subList(0, i));
      paramList2.add(paramList1);
      i -= 1;
    }
  }
}
