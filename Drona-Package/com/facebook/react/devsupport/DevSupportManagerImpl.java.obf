package com.facebook.react.devsupport;

import android.app.Activity;
import android.app.ActivityManager;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnCancelListener;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.AssetManager;
import android.hardware.SensorManager;
import android.util.Pair;
import android.widget.EditText;
import android.widget.Toast;
import androidx.annotation.Nullable;
import com.facebook.common.logging.FLog;
import com.facebook.debug.holder.Printer;
import com.facebook.debug.holder.PrinterHolder;
import com.facebook.debug.tags.ReactDebugOverlayTags;
import com.facebook.infer.annotation.Assertions;
import com.facebook.react.R.string;
import com.facebook.react.bridge.DefaultNativeModuleCallExceptionHandler;
import com.facebook.react.bridge.JavaJSExecutor;
import com.facebook.react.bridge.JavaJSExecutor.Factory;
import com.facebook.react.bridge.NativeDeltaClient;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactMarker;
import com.facebook.react.bridge.ReactMarkerConstants;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.UiThreadUtil;
import com.facebook.react.common.DebugServerException;
import com.facebook.react.common.ShakeDetector;
import com.facebook.react.common.ShakeDetector.ShakeListener;
import com.facebook.react.common.futures.SimpleSettableFuture;
import com.facebook.react.devsupport.interfaces.DevBundleDownloadListener;
import com.facebook.react.devsupport.interfaces.DevOptionHandler;
import com.facebook.react.devsupport.interfaces.DevSupportManager;
import com.facebook.react.devsupport.interfaces.ErrorCustomizer;
import com.facebook.react.devsupport.interfaces.PackagerStatusCallback;
import com.facebook.react.devsupport.interfaces.StackFrame;
import com.facebook.react.modules.debug.interfaces.DeveloperSettings;
import com.facebook.react.packagerconnection.PackagerConnectionSettings;
import com.facebook.react.packagerconnection.RequestHandler;
import com.facebook.react.packagerconnection.Responder;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

public class DevSupportManagerImpl
  implements DevSupportManager, DevServerHelper.PackagerCommandListener, DevInternalSettings.Listener
{
  public static final String EMOJI_FACE_WITH_NO_GOOD_GESTURE = " ?";
  public static final String EMOJI_HUNDRED_POINTS_SYMBOL = " ?";
  private static final String EXOPACKAGE_LOCATION_FORMAT = "/data/local/tmp/exopackage/%s//secondary-dex";
  private static final int JAVA_ERROR_COOKIE = -1;
  private static final int JSEXCEPTION_ERROR_COOKIE = -1;
  private static final String JS_BUNDLE_FILE_NAME = "ReactNativeDevBundle.js";
  private static final String RELOAD_APP_ACTION_SUFFIX = ".RELOAD_APP_ACTION";
  private final Context mApplicationContext;
  @Nullable
  private DevBundleDownloadListener mBundleDownloadListener;
  private InspectorPackagerConnection.BundleStatus mBundleStatus;
  @Nullable
  private ReactContext mCurrentContext;
  private final LinkedHashMap<String, DevOptionHandler> mCustomDevOptions = new LinkedHashMap();
  @Nullable
  private Map<String, RequestHandler> mCustomPackagerCommandHandlers;
  @Nullable
  private DebugOverlayController mDebugOverlayController;
  private final DefaultNativeModuleCallExceptionHandler mDefaultNativeModuleCallExceptionHandler;
  private final DevLoadingViewController mDevLoadingViewController;
  private boolean mDevLoadingViewVisible = false;
  @Nullable
  private AlertDialog mDevOptionsDialog;
  private final DevServerHelper mDevServerHelper;
  private DevInternalSettings mDevSettings;
  @Nullable
  private List<ErrorCustomizer> mErrorCustomizers;
  private final List<ExceptionLogger> mExceptionLoggers = new ArrayList();
  private boolean mIsDevSupportEnabled = false;
  private boolean mIsReceiverRegistered = false;
  private boolean mIsSamplingProfilerEnabled = false;
  private boolean mIsShakeDetectorStarted = false;
  @Nullable
  private final String mJSAppBundleName;
  private final File mJSBundleTempFile;
  private int mLastErrorCookie = 0;
  @Nullable
  private StackFrame[] mLastErrorStack;
  @Nullable
  private String mLastErrorTitle;
  @Nullable
  private ErrorType mLastErrorType;
  private final ReactInstanceManagerDevHelper mReactInstanceManagerHelper;
  @Nullable
  private RedBoxDialog mRedBoxDialog;
  @Nullable
  private RedBoxHandler mRedBoxHandler;
  private final BroadcastReceiver mReloadAppBroadcastReceiver;
  private final ShakeDetector mShakeDetector;
  
  public DevSupportManagerImpl(Context paramContext, ReactInstanceManagerDevHelper paramReactInstanceManagerDevHelper, @Nullable String paramString, boolean paramBoolean, int paramInt)
  {
    this(paramContext, paramReactInstanceManagerDevHelper, paramString, paramBoolean, null, null, paramInt, null);
  }
  
  public DevSupportManagerImpl(Context paramContext, ReactInstanceManagerDevHelper paramReactInstanceManagerDevHelper, @Nullable String paramString, boolean paramBoolean, @Nullable RedBoxHandler paramRedBoxHandler, @Nullable DevBundleDownloadListener paramDevBundleDownloadListener, int paramInt, @Nullable Map<String, RequestHandler> paramMap)
  {
    mReactInstanceManagerHelper = paramReactInstanceManagerDevHelper;
    mApplicationContext = paramContext;
    mJSAppBundleName = paramString;
    mDevSettings = new DevInternalSettings(paramContext, this);
    mBundleStatus = new InspectorPackagerConnection.BundleStatus();
    mDevServerHelper = new DevServerHelper(mDevSettings, mApplicationContext.getPackageName(), new InspectorPackagerConnection.BundleStatusProvider()
    {
      public InspectorPackagerConnection.BundleStatus getBundleStatus()
      {
        return mBundleStatus;
      }
    });
    mBundleDownloadListener = paramDevBundleDownloadListener;
    mShakeDetector = new ShakeDetector(new ShakeDetector.ShakeListener()
    {
      public void onShake()
      {
        showDevOptionsDialog();
      }
    }, paramInt);
    mCustomPackagerCommandHandlers = paramMap;
    mReloadAppBroadcastReceiver = new BroadcastReceiver()
    {
      public void onReceive(Context paramAnonymousContext, Intent paramAnonymousIntent)
      {
        String str = paramAnonymousIntent.getAction();
        if (DevSupportManagerImpl.getReloadAppAction(paramAnonymousContext).equals(str))
        {
          if (paramAnonymousIntent.getBooleanExtra("jsproxy", false))
          {
            mDevSettings.setRemoteJSDebugEnabled(true);
            mDevServerHelper.launchJSDevtools();
          }
          else
          {
            mDevSettings.setRemoteJSDebugEnabled(false);
          }
          handleReloadJS();
        }
      }
    };
    mJSBundleTempFile = new File(paramContext.getFilesDir(), "ReactNativeDevBundle.js");
    mDefaultNativeModuleCallExceptionHandler = new DefaultNativeModuleCallExceptionHandler();
    setDevSupportEnabled(paramBoolean);
    mRedBoxHandler = paramRedBoxHandler;
    mDevLoadingViewController = new DevLoadingViewController(paramContext, paramReactInstanceManagerDevHelper);
    mExceptionLoggers.add(new JSExceptionLogger(null));
    if (mDevSettings.isStartSamplingProfilerOnInit())
    {
      if (!mIsSamplingProfilerEnabled)
      {
        toggleJSSamplingProfiler();
        return;
      }
      Toast.makeText(mApplicationContext, "JS Sampling Profiler was already running, so did not start the sampling profiler", 1).show();
    }
  }
  
  private WebsocketJavaScriptExecutor.JSExecutorConnectCallback getExecutorConnectCallback(final SimpleSettableFuture<Boolean> paramSimpleSettableFuture)
  {
    new WebsocketJavaScriptExecutor.JSExecutorConnectCallback()
    {
      public void onFailure(Throwable paramAnonymousThrowable)
      {
        mDevLoadingViewController.hide();
        DevSupportManagerImpl.access$2002(DevSupportManagerImpl.this, false);
        FLog.e("ReactNative", "Failed to connect to debugger!", paramAnonymousThrowable);
        paramSimpleSettableFuture.setException(new IOException(mApplicationContext.getString(R.string.catalyst_debug_error), paramAnonymousThrowable));
      }
      
      public void onSuccess()
      {
        paramSimpleSettableFuture.set(Boolean.valueOf(true));
        mDevLoadingViewController.hide();
        DevSupportManagerImpl.access$2002(DevSupportManagerImpl.this, false);
      }
    };
  }
  
  private static String getReloadAppAction(Context paramContext)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(paramContext.getPackageName());
    localStringBuilder.append(".RELOAD_APP_ACTION");
    return localStringBuilder.toString();
  }
  
  private void handleCaptureHeap(final Responder paramResponder)
  {
    if (mCurrentContext == null) {
      return;
    }
    ((JSCHeapCapture)mCurrentContext.getNativeModule(JSCHeapCapture.class)).captureHeap(mApplicationContext.getCacheDir().getPath(), new JSCHeapCapture.CaptureCallback()
    {
      public void onFailure(JSCHeapCapture.CaptureException paramAnonymousCaptureException)
      {
        paramResponder.error(paramAnonymousCaptureException.toString());
      }
      
      public void onSuccess(File paramAnonymousFile)
      {
        paramResponder.respond(paramAnonymousFile.toString());
      }
    });
  }
  
  private void hideDevOptionsDialog()
  {
    if (mDevOptionsDialog != null)
    {
      mDevOptionsDialog.dismiss();
      mDevOptionsDialog = null;
    }
  }
  
  private Pair<String, StackFrame[]> processErrorCustomizers(Pair<String, StackFrame[]> paramPair)
  {
    if (mErrorCustomizers == null) {
      return paramPair;
    }
    Iterator localIterator = mErrorCustomizers.iterator();
    while (localIterator.hasNext())
    {
      Pair localPair = ((ErrorCustomizer)localIterator.next()).customizeErrorInfo(paramPair);
      if (localPair != null) {
        paramPair = localPair;
      }
    }
    return paramPair;
  }
  
  private void reload()
  {
    
    if (mIsDevSupportEnabled)
    {
      if (mDebugOverlayController != null) {
        mDebugOverlayController.setFpsDebugViewVisible(mDevSettings.isFpsDebugEnabled());
      }
      if (!mIsShakeDetectorStarted)
      {
        mShakeDetector.start((SensorManager)mApplicationContext.getSystemService("sensor"));
        mIsShakeDetectorStarted = true;
      }
      if (!mIsReceiverRegistered)
      {
        IntentFilter localIntentFilter = new IntentFilter();
        localIntentFilter.addAction(getReloadAppAction(mApplicationContext));
        mApplicationContext.registerReceiver(mReloadAppBroadcastReceiver, localIntentFilter);
        mIsReceiverRegistered = true;
      }
      if (mDevLoadingViewVisible) {
        mDevLoadingViewController.showMessage("Reloading...");
      }
      mDevServerHelper.openPackagerConnection(getClass().getSimpleName(), this);
      if (mDevSettings.isReloadOnJSChangeEnabled())
      {
        mDevServerHelper.startPollingOnChangeEndpoint(new DevServerHelper.OnServerContentChangeListener()
        {
          public void onServerContentChanged()
          {
            handleReloadJS();
          }
        });
        return;
      }
      mDevServerHelper.stopPollingOnChangeEndpoint();
      return;
    }
    if (mDebugOverlayController != null) {
      mDebugOverlayController.setFpsDebugViewVisible(false);
    }
    if (mIsShakeDetectorStarted)
    {
      mShakeDetector.stop();
      mIsShakeDetectorStarted = false;
    }
    if (mIsReceiverRegistered)
    {
      mApplicationContext.unregisterReceiver(mReloadAppBroadcastReceiver);
      mIsReceiverRegistered = false;
    }
    hideRedboxDialog();
    hideDevOptionsDialog();
    mDevLoadingViewController.hide();
    mDevServerHelper.closePackagerConnection();
    mDevServerHelper.stopPollingOnChangeEndpoint();
  }
  
  private void reloadJSInProxyMode()
  {
    mDevServerHelper.launchJSDevtools();
    JavaJSExecutor.Factory local22 = new JavaJSExecutor.Factory()
    {
      public JavaJSExecutor create()
        throws Exception
      {
        WebsocketJavaScriptExecutor localWebsocketJavaScriptExecutor = new WebsocketJavaScriptExecutor();
        SimpleSettableFuture localSimpleSettableFuture = new SimpleSettableFuture();
        localWebsocketJavaScriptExecutor.connect(mDevServerHelper.getWebsocketProxyURL(), DevSupportManagerImpl.this.getExecutorConnectCallback(localSimpleSettableFuture));
        try
        {
          localSimpleSettableFuture.get(90L, TimeUnit.SECONDS);
          return localWebsocketJavaScriptExecutor;
        }
        catch (InterruptedException|TimeoutException localInterruptedException)
        {
          throw new RuntimeException(localInterruptedException);
        }
        catch (ExecutionException localExecutionException)
        {
          throw ((Exception)localExecutionException.getCause());
        }
      }
    };
    mReactInstanceManagerHelper.onReloadWithJSDebugger(local22);
  }
  
  private void resetCurrentContext(@Nullable ReactContext paramReactContext)
  {
    if (mCurrentContext == paramReactContext) {
      return;
    }
    mCurrentContext = paramReactContext;
    if (mDebugOverlayController != null) {
      mDebugOverlayController.setFpsDebugViewVisible(false);
    }
    if (paramReactContext != null) {
      mDebugOverlayController = new DebugOverlayController(paramReactContext);
    }
    if (mCurrentContext != null) {
      try
      {
        paramReactContext = new URL(getSourceUrl());
        String str1 = paramReactContext.getPath().substring(1);
        String str2 = paramReactContext.getHost();
        int i = paramReactContext.getPort();
        ((HMRClient)mCurrentContext.getJSModule(HMRClient.class)).setup("android", str1, str2, i, mDevSettings.isHotModuleReplacementEnabled());
      }
      catch (MalformedURLException paramReactContext)
      {
        showNewJavaError(paramReactContext.getMessage(), paramReactContext);
      }
    }
    reloadSettings();
  }
  
  private void showNewError(@Nullable final String paramString, final StackFrame[] paramArrayOfStackFrame, final int paramInt, final ErrorType paramErrorType)
  {
    UiThreadUtil.runOnUiThread(new Runnable()
    {
      public void run()
      {
        if (mRedBoxDialog == null)
        {
          localObject = mReactInstanceManagerHelper.getCurrentActivity();
          if ((localObject != null) && (!((Activity)localObject).isFinishing()))
          {
            DevSupportManagerImpl.access$602(DevSupportManagerImpl.this, new RedBoxDialog((Context)localObject, DevSupportManagerImpl.this, mRedBoxHandler));
          }
          else
          {
            localObject = new StringBuilder();
            ((StringBuilder)localObject).append("Unable to launch redbox because react activity is not available, here is the error that redbox would've displayed: ");
            ((StringBuilder)localObject).append(paramString);
            FLog.e("ReactNative", ((StringBuilder)localObject).toString());
            return;
          }
        }
        if (mRedBoxDialog.isShowing()) {
          return;
        }
        Object localObject = DevSupportManagerImpl.this.processErrorCustomizers(Pair.create(paramString, paramArrayOfStackFrame));
        mRedBoxDialog.setExceptionDetails((String)first, (StackFrame[])second);
        DevSupportManagerImpl.this.updateLastErrorInfo(paramString, paramArrayOfStackFrame, paramInt, paramErrorType);
        if ((mRedBoxHandler != null) && (paramErrorType == DevSupportManagerImpl.ErrorType.NATIVE)) {
          mRedBoxHandler.handleRedbox(paramString, paramArrayOfStackFrame, RedBoxHandler.ErrorType.NATIVE);
        }
        mRedBoxDialog.resetReporting();
        mRedBoxDialog.show();
      }
    });
  }
  
  /* Error */
  private void toggleJSSamplingProfiler()
  {
    // Byte code:
    //   0: aload_0
    //   1: getfield 196	com/facebook/react/devsupport/DevSupportManagerImpl:mReactInstanceManagerHelper	Lcom/facebook/react/devsupport/ReactInstanceManagerDevHelper;
    //   4: invokeinterface 596 1 0
    //   9: astore_1
    //   10: aload_0
    //   11: getfield 174	com/facebook/react/devsupport/DevSupportManagerImpl:mIsSamplingProfilerEnabled	Z
    //   14: ifne +85 -> 99
    //   17: aload_1
    //   18: invokeinterface 601 1 0
    //   23: aload_0
    //   24: getfield 198	com/facebook/react/devsupport/DevSupportManagerImpl:mApplicationContext	Landroid/content/Context;
    //   27: ldc_w 603
    //   30: iconst_0
    //   31: invokestatic 296	android/widget/Toast:makeText	(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast;
    //   34: invokevirtual 299	android/widget/Toast:show	()V
    //   37: aload_0
    //   38: iconst_1
    //   39: putfield 174	com/facebook/react/devsupport/DevSupportManagerImpl:mIsSamplingProfilerEnabled	Z
    //   42: return
    //   43: astore_1
    //   44: goto +48 -> 92
    //   47: aload_0
    //   48: getfield 198	com/facebook/react/devsupport/DevSupportManagerImpl:mApplicationContext	Landroid/content/Context;
    //   51: astore_2
    //   52: new 379	java/lang/StringBuilder
    //   55: dup
    //   56: invokespecial 380	java/lang/StringBuilder:<init>	()V
    //   59: astore_3
    //   60: aload_3
    //   61: aload_1
    //   62: invokevirtual 604	java/lang/Object:toString	()Ljava/lang/String;
    //   65: invokevirtual 384	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   68: pop
    //   69: aload_3
    //   70: ldc_w 606
    //   73: invokevirtual 384	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   76: pop
    //   77: aload_2
    //   78: aload_3
    //   79: invokevirtual 387	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   82: iconst_1
    //   83: invokestatic 296	android/widget/Toast:makeText	(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast;
    //   86: invokevirtual 299	android/widget/Toast:show	()V
    //   89: goto -52 -> 37
    //   92: aload_0
    //   93: iconst_1
    //   94: putfield 174	com/facebook/react/devsupport/DevSupportManagerImpl:mIsSamplingProfilerEnabled	Z
    //   97: aload_1
    //   98: athrow
    //   99: ldc_w 608
    //   102: ldc_w 610
    //   105: aload_0
    //   106: getfield 198	com/facebook/react/devsupport/DevSupportManagerImpl:mApplicationContext	Landroid/content/Context;
    //   109: invokevirtual 398	android/content/Context:getCacheDir	()Ljava/io/File;
    //   112: invokestatic 614	java/io/File:createTempFile	(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;
    //   115: invokevirtual 401	java/io/File:getPath	()Ljava/lang/String;
    //   118: astore_2
    //   119: aload_1
    //   120: aload_2
    //   121: invokeinterface 617 2 0
    //   126: aload_0
    //   127: getfield 198	com/facebook/react/devsupport/DevSupportManagerImpl:mApplicationContext	Landroid/content/Context;
    //   130: astore_3
    //   131: new 379	java/lang/StringBuilder
    //   134: dup
    //   135: invokespecial 380	java/lang/StringBuilder:<init>	()V
    //   138: astore 4
    //   140: aload 4
    //   142: ldc_w 619
    //   145: invokevirtual 384	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   148: pop
    //   149: aload 4
    //   151: aload_2
    //   152: invokevirtual 384	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   155: pop
    //   156: aload_3
    //   157: aload 4
    //   159: invokevirtual 387	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   162: iconst_1
    //   163: invokestatic 296	android/widget/Toast:makeText	(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast;
    //   166: invokevirtual 299	android/widget/Toast:show	()V
    //   169: goto +61 -> 230
    //   172: astore_1
    //   173: goto +63 -> 236
    //   176: aload_0
    //   177: getfield 198	com/facebook/react/devsupport/DevSupportManagerImpl:mApplicationContext	Landroid/content/Context;
    //   180: astore_2
    //   181: new 379	java/lang/StringBuilder
    //   184: dup
    //   185: invokespecial 380	java/lang/StringBuilder:<init>	()V
    //   188: astore_3
    //   189: aload_3
    //   190: aload_1
    //   191: invokevirtual 604	java/lang/Object:toString	()Ljava/lang/String;
    //   194: invokevirtual 384	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   197: pop
    //   198: aload_3
    //   199: ldc_w 621
    //   202: invokevirtual 384	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   205: pop
    //   206: aload_2
    //   207: aload_3
    //   208: invokevirtual 387	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   211: iconst_1
    //   212: invokestatic 296	android/widget/Toast:makeText	(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast;
    //   215: invokevirtual 299	android/widget/Toast:show	()V
    //   218: goto +12 -> 230
    //   221: ldc_w 623
    //   224: ldc_w 625
    //   227: invokestatic 631	com/facebook/common/logging/FLog:e	(Ljava/lang/String;Ljava/lang/String;)V
    //   230: aload_0
    //   231: iconst_0
    //   232: putfield 174	com/facebook/react/devsupport/DevSupportManagerImpl:mIsSamplingProfilerEnabled	Z
    //   235: return
    //   236: aload_0
    //   237: iconst_0
    //   238: putfield 174	com/facebook/react/devsupport/DevSupportManagerImpl:mIsSamplingProfilerEnabled	Z
    //   241: aload_1
    //   242: athrow
    //   243: astore_2
    //   244: goto -197 -> 47
    //   247: astore_1
    //   248: goto -27 -> 221
    //   251: astore_2
    //   252: goto -76 -> 176
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	255	0	this	DevSupportManagerImpl
    //   9	9	1	localJavaScriptExecutorFactory	com.facebook.react.bridge.JavaScriptExecutorFactory
    //   43	77	1	localObject1	Object
    //   172	70	1	localObject2	Object
    //   247	1	1	localIOException	IOException
    //   51	156	2	localObject3	Object
    //   243	1	2	localUnsupportedOperationException1	UnsupportedOperationException
    //   251	1	2	localUnsupportedOperationException2	UnsupportedOperationException
    //   59	149	3	localObject4	Object
    //   138	20	4	localStringBuilder	StringBuilder
    // Exception table:
    //   from	to	target	type
    //   17	37	43	finally
    //   47	89	43	finally
    //   99	169	172	finally
    //   176	218	172	finally
    //   221	230	172	finally
    //   17	37	243	java/lang/UnsupportedOperationException
    //   99	169	247	java/io/IOException
    //   99	169	251	java/lang/UnsupportedOperationException
  }
  
  private void updateLastErrorInfo(@Nullable String paramString, StackFrame[] paramArrayOfStackFrame, int paramInt, ErrorType paramErrorType)
  {
    mLastErrorTitle = paramString;
    mLastErrorStack = paramArrayOfStackFrame;
    mLastErrorCookie = paramInt;
    mLastErrorType = paramErrorType;
  }
  
  public void addCustomDevOption(String paramString, DevOptionHandler paramDevOptionHandler)
  {
    mCustomDevOptions.put(paramString, paramDevOptionHandler);
  }
  
  @Nullable
  public Map<String, RequestHandler> customCommandHandlers()
  {
    return mCustomPackagerCommandHandlers;
  }
  
  @Nullable
  public File downloadBundleResourceFromUrlSync(String paramString, File paramFile)
  {
    return mDevServerHelper.downloadBundleResourceFromUrlSync(paramString, paramFile);
  }
  
  public DeveloperSettings getDevSettings()
  {
    return mDevSettings;
  }
  
  public boolean getDevSupportEnabled()
  {
    return mIsDevSupportEnabled;
  }
  
  public String getDownloadedJSBundleFile()
  {
    return mJSBundleTempFile.getAbsolutePath();
  }
  
  public String getJSBundleURLForRemoteDebugging()
  {
    return mDevServerHelper.getJSBundleURLForRemoteDebugging((String)Assertions.assertNotNull(mJSAppBundleName));
  }
  
  @Nullable
  public StackFrame[] getLastErrorStack()
  {
    return mLastErrorStack;
  }
  
  @Nullable
  public String getLastErrorTitle()
  {
    return mLastErrorTitle;
  }
  
  public String getSourceMapUrl()
  {
    if (mJSAppBundleName == null) {
      return "";
    }
    return mDevServerHelper.getSourceMapUrl((String)Assertions.assertNotNull(mJSAppBundleName));
  }
  
  public String getSourceUrl()
  {
    if (mJSAppBundleName == null) {
      return "";
    }
    return mDevServerHelper.getSourceUrl((String)Assertions.assertNotNull(mJSAppBundleName));
  }
  
  public void handleException(Exception paramException)
  {
    if (mIsDevSupportEnabled)
    {
      Iterator localIterator = mExceptionLoggers.iterator();
      while (localIterator.hasNext()) {
        ((ExceptionLogger)localIterator.next()).log(paramException);
      }
    }
    mDefaultNativeModuleCallExceptionHandler.handleException(paramException);
  }
  
  public void handleReloadJS()
  {
    UiThreadUtil.assertOnUiThread();
    ReactMarker.logMarker(ReactMarkerConstants.RELOAD, mDevSettings.getPackagerConnectionSettings().getDebugServerHost());
    hideRedboxDialog();
    if (mDevSettings.isRemoteJSDebugEnabled())
    {
      PrinterHolder.getPrinter().logMessage(ReactDebugOverlayTags.RN_CORE, "RNCore: load from Proxy");
      mDevLoadingViewController.showForRemoteJSEnabled();
      mDevLoadingViewVisible = true;
      reloadJSInProxyMode();
      return;
    }
    PrinterHolder.getPrinter().logMessage(ReactDebugOverlayTags.RN_CORE, "RNCore: load from Server");
    reloadJSFromServer(mDevServerHelper.getDevServerBundleURL((String)Assertions.assertNotNull(mJSAppBundleName)));
  }
  
  public boolean hasBundleInAssets(String paramString)
  {
    try
    {
      String[] arrayOfString = mApplicationContext.getAssets().list("");
      int i = 0;
      while (i < arrayOfString.length)
      {
        boolean bool = arrayOfString[i].equals(paramString);
        if (bool) {
          return true;
        }
        i += 1;
      }
    }
    catch (IOException paramString)
    {
      for (;;) {}
    }
    FLog.e("ReactNative", "Error while loading assets list");
    return false;
  }
  
  public boolean hasUpToDateJSBundleInCache()
  {
    boolean bool2 = mIsDevSupportEnabled;
    boolean bool1 = false;
    if ((bool2) && (mJSBundleTempFile.exists())) {}
    try
    {
      Object localObject = mApplicationContext.getPackageName();
      PackageInfo localPackageInfo = mApplicationContext.getPackageManager().getPackageInfo((String)localObject, 0);
      if (mJSBundleTempFile.lastModified() <= lastUpdateTime) {
        break label132;
      }
      localObject = new File(String.format(Locale.US, "/data/local/tmp/exopackage/%s//secondary-dex", new Object[] { localObject }));
      if (((File)localObject).exists())
      {
        long l1 = mJSBundleTempFile.lastModified();
        long l2 = ((File)localObject).lastModified();
        if (l1 > l2) {
          bool1 = true;
        }
        return bool1;
      }
      return true;
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException)
    {
      for (;;) {}
    }
    FLog.e("ReactNative", "DevSupport is unable to get current app info");
    label132:
    return false;
  }
  
  public void hideRedboxDialog()
  {
    if (mRedBoxDialog != null)
    {
      mRedBoxDialog.dismiss();
      mRedBoxDialog = null;
    }
  }
  
  public void isPackagerRunning(PackagerStatusCallback paramPackagerStatusCallback)
  {
    mDevServerHelper.isPackagerRunning(paramPackagerStatusCallback);
  }
  
  public void onCaptureHeapCommand(final Responder paramResponder)
  {
    UiThreadUtil.runOnUiThread(new Runnable()
    {
      public void run()
      {
        DevSupportManagerImpl.this.handleCaptureHeap(paramResponder);
      }
    });
  }
  
  public void onInternalSettingsChanged()
  {
    reloadSettings();
  }
  
  public void onNewReactContextCreated(ReactContext paramReactContext)
  {
    resetCurrentContext(paramReactContext);
  }
  
  public void onPackagerConnected() {}
  
  public void onPackagerDevMenuCommand()
  {
    UiThreadUtil.runOnUiThread(new Runnable()
    {
      public void run()
      {
        showDevOptionsDialog();
      }
    });
  }
  
  public void onPackagerDisconnected() {}
  
  public void onPackagerReloadCommand()
  {
    mDevServerHelper.disableDebugger();
    UiThreadUtil.runOnUiThread(new Runnable()
    {
      public void run()
      {
        handleReloadJS();
      }
    });
  }
  
  public void onReactInstanceDestroyed(ReactContext paramReactContext)
  {
    if (paramReactContext == mCurrentContext) {
      resetCurrentContext(null);
    }
  }
  
  public void registerErrorCustomizer(ErrorCustomizer paramErrorCustomizer)
  {
    if (mErrorCustomizers == null) {
      mErrorCustomizers = new ArrayList();
    }
    mErrorCustomizers.add(paramErrorCustomizer);
  }
  
  public void reloadJSFromServer(String paramString)
  {
    ReactMarker.logMarker(ReactMarkerConstants.DOWNLOAD_START);
    mDevLoadingViewController.showForUrl(paramString);
    mDevLoadingViewVisible = true;
    final BundleDownloader.BundleInfo localBundleInfo = new BundleDownloader.BundleInfo();
    mDevServerHelper.downloadBundleFromURL(new DevBundleDownloadListener()
    {
      public void onFailure(final Exception paramAnonymousException)
      {
        mDevLoadingViewController.hide();
        DevSupportManagerImpl.access$2002(DevSupportManagerImpl.this, false);
        synchronized (DevSupportManagerImpl.this)
        {
          mBundleStatus.isLastDownloadSucess = Boolean.valueOf(false);
          if (mBundleDownloadListener != null) {
            mBundleDownloadListener.onFailure(paramAnonymousException);
          }
          FLog.e("ReactNative", "Unable to download JS bundle", paramAnonymousException);
          UiThreadUtil.runOnUiThread(new Runnable()
          {
            public void run()
            {
              if ((paramAnonymousException instanceof DebugServerException))
              {
                DebugServerException localDebugServerException = (DebugServerException)paramAnonymousException;
                showNewJavaError(localDebugServerException.getMessage(), paramAnonymousException);
                return;
              }
              showNewJavaError(mApplicationContext.getString(R.string.catalyst_reload_error), paramAnonymousException);
            }
          });
          return;
        }
      }
      
      public void onProgress(@Nullable String paramAnonymousString, @Nullable Integer paramAnonymousInteger1, @Nullable Integer paramAnonymousInteger2)
      {
        mDevLoadingViewController.updateProgress(paramAnonymousString, paramAnonymousInteger1, paramAnonymousInteger2);
        if (mBundleDownloadListener != null) {
          mBundleDownloadListener.onProgress(paramAnonymousString, paramAnonymousInteger1, paramAnonymousInteger2);
        }
      }
      
      public void onSuccess(@Nullable final NativeDeltaClient paramAnonymousNativeDeltaClient)
      {
        mDevLoadingViewController.hide();
        DevSupportManagerImpl.access$2002(DevSupportManagerImpl.this, false);
        synchronized (DevSupportManagerImpl.this)
        {
          mBundleStatus.isLastDownloadSucess = Boolean.valueOf(true);
          mBundleStatus.updateTimestamp = System.currentTimeMillis();
          if (mBundleDownloadListener != null) {
            mBundleDownloadListener.onSuccess(paramAnonymousNativeDeltaClient);
          }
          UiThreadUtil.runOnUiThread(new Runnable()
          {
            public void run()
            {
              ReactMarker.logMarker(ReactMarkerConstants.DOWNLOAD_END, val$bundleInfo.toJSONString());
              mReactInstanceManagerHelper.onJSBundleLoadedFromServer(paramAnonymousNativeDeltaClient);
            }
          });
          return;
        }
      }
    }, mJSBundleTempFile, paramString, localBundleInfo);
  }
  
  public void reloadSettings()
  {
    if (UiThreadUtil.isOnUiThread())
    {
      reload();
      return;
    }
    UiThreadUtil.runOnUiThread(new Runnable()
    {
      public void run()
      {
        DevSupportManagerImpl.this.reload();
      }
    });
  }
  
  public void setDevSupportEnabled(boolean paramBoolean)
  {
    mIsDevSupportEnabled = paramBoolean;
    reloadSettings();
  }
  
  public void setFpsDebugEnabled(final boolean paramBoolean)
  {
    if (!mIsDevSupportEnabled) {
      return;
    }
    UiThreadUtil.runOnUiThread(new Runnable()
    {
      public void run()
      {
        mDevSettings.setFpsDebugEnabled(paramBoolean);
      }
    });
  }
  
  public void setHotModuleReplacementEnabled(final boolean paramBoolean)
  {
    if (!mIsDevSupportEnabled) {
      return;
    }
    UiThreadUtil.runOnUiThread(new Runnable()
    {
      public void run()
      {
        mDevSettings.setHotModuleReplacementEnabled(paramBoolean);
        handleReloadJS();
      }
    });
  }
  
  public void setReloadOnJSChangeEnabled(final boolean paramBoolean)
  {
    if (!mIsDevSupportEnabled) {
      return;
    }
    UiThreadUtil.runOnUiThread(new Runnable()
    {
      public void run()
      {
        mDevSettings.setReloadOnJSChangeEnabled(paramBoolean);
        handleReloadJS();
      }
    });
  }
  
  public void setRemoteJSDebugEnabled(final boolean paramBoolean)
  {
    if (!mIsDevSupportEnabled) {
      return;
    }
    UiThreadUtil.runOnUiThread(new Runnable()
    {
      public void run()
      {
        mDevSettings.setRemoteJSDebugEnabled(paramBoolean);
        handleReloadJS();
      }
    });
  }
  
  public void showDevOptionsDialog()
  {
    if ((mDevOptionsDialog == null) && (mIsDevSupportEnabled))
    {
      if (ActivityManager.isUserAMonkey()) {
        return;
      }
      LinkedHashMap localLinkedHashMap = new LinkedHashMap();
      localLinkedHashMap.put(mApplicationContext.getString(R.string.catalyst_reload), new DevOptionHandler()
      {
        public void onOptionSelected()
        {
          if ((!mDevSettings.isJSDevModeEnabled()) && (mDevSettings.isHotModuleReplacementEnabled()))
          {
            Toast.makeText(mApplicationContext, mApplicationContext.getString(R.string.catalyst_hot_reloading_auto_disable), 1).show();
            mDevSettings.setHotModuleReplacementEnabled(false);
          }
          handleReloadJS();
        }
      });
      if (mDevSettings.isNuclideJSDebugEnabled())
      {
        if (mDevSettings.isRemoteJSDebugEnabled()) {
          localObject = mApplicationContext.getString(R.string.catalyst_debug_chrome_stop);
        } else {
          localObject = mApplicationContext.getString(R.string.catalyst_debug_chrome);
        }
      }
      else if (mDevSettings.isRemoteJSDebugEnabled()) {
        localObject = mApplicationContext.getString(R.string.catalyst_debug_stop);
      } else {
        localObject = mApplicationContext.getString(R.string.catalyst_debug);
      }
      localLinkedHashMap.put(localObject, new DevOptionHandler()
      {
        public void onOptionSelected()
        {
          mDevSettings.setRemoteJSDebugEnabled(mDevSettings.isRemoteJSDebugEnabled() ^ true);
          handleReloadJS();
        }
      });
      if (mDevSettings.isNuclideJSDebugEnabled()) {
        localLinkedHashMap.put(mApplicationContext.getString(R.string.catalyst_debug_nuclide), new DevOptionHandler()
        {
          public void onOptionSelected()
          {
            mDevServerHelper.attachDebugger(mApplicationContext, "ReactNative");
          }
        });
      }
      localLinkedHashMap.put(mApplicationContext.getString(R.string.catalyst_change_bundle_location), new DevOptionHandler()
      {
        public void onOptionSelected()
        {
          Activity localActivity = mReactInstanceManagerHelper.getCurrentActivity();
          if ((localActivity != null) && (!localActivity.isFinishing()))
          {
            final EditText localEditText = new EditText(localActivity);
            localEditText.setHint("localhost:8081");
            new AlertDialog.Builder(localActivity).setTitle(mApplicationContext.getString(R.string.catalyst_change_bundle_location)).setView(localEditText).setPositiveButton(17039370, new DialogInterface.OnClickListener()
            {
              public void onClick(DialogInterface paramAnonymous2DialogInterface, int paramAnonymous2Int)
              {
                paramAnonymous2DialogInterface = localEditText.getText().toString();
                mDevSettings.getPackagerConnectionSettings().setDebugServerHost(paramAnonymous2DialogInterface);
                handleReloadJS();
              }
            }).create().show();
            return;
          }
          FLog.e("ReactNative", "Unable to launch change bundle location because react activity is not available");
        }
      });
      localLinkedHashMap.put(mApplicationContext.getString(R.string.catalyst_inspector), new DevOptionHandler()
      {
        public void onOptionSelected()
        {
          mDevSettings.setElementInspectorEnabled(mDevSettings.isElementInspectorEnabled() ^ true);
          mReactInstanceManagerHelper.toggleElementInspector();
        }
      });
      if (mDevSettings.isHotModuleReplacementEnabled()) {
        localObject = mApplicationContext.getString(R.string.catalyst_hot_reloading_stop);
      } else {
        localObject = mApplicationContext.getString(R.string.catalyst_hot_reloading);
      }
      localLinkedHashMap.put(localObject, new DevOptionHandler()
      {
        public void onOptionSelected()
        {
          boolean bool = mDevSettings.isHotModuleReplacementEnabled() ^ true;
          mDevSettings.setHotModuleReplacementEnabled(bool);
          if (mCurrentContext != null) {
            if (bool) {
              ((HMRClient)mCurrentContext.getJSModule(HMRClient.class)).enable();
            } else {
              ((HMRClient)mCurrentContext.getJSModule(HMRClient.class)).disable();
            }
          }
          if ((bool) && (!mDevSettings.isJSDevModeEnabled()))
          {
            Toast.makeText(mApplicationContext, mApplicationContext.getString(R.string.catalyst_hot_reloading_auto_enable), 1).show();
            mDevSettings.setJSDevModeEnabled(true);
            handleReloadJS();
          }
        }
      });
      if (mIsSamplingProfilerEnabled) {
        localObject = mApplicationContext.getString(R.string.catalyst_sample_profiler_disable);
      } else {
        localObject = mApplicationContext.getString(R.string.catalyst_sample_profiler_enable);
      }
      localLinkedHashMap.put(localObject, new DevOptionHandler()
      {
        public void onOptionSelected()
        {
          DevSupportManagerImpl.this.toggleJSSamplingProfiler();
        }
      });
      if (mDevSettings.isFpsDebugEnabled()) {
        localObject = mApplicationContext.getString(R.string.catalyst_perf_monitor_stop);
      } else {
        localObject = mApplicationContext.getString(R.string.catalyst_perf_monitor);
      }
      localLinkedHashMap.put(localObject, new DevOptionHandler()
      {
        public void onOptionSelected()
        {
          if (!mDevSettings.isFpsDebugEnabled())
          {
            Activity localActivity = mReactInstanceManagerHelper.getCurrentActivity();
            if (localActivity == null) {
              FLog.e("ReactNative", "Unable to get reference to react activity");
            } else {
              DebugOverlayController.requestPermission(localActivity);
            }
          }
          mDevSettings.setFpsDebugEnabled(mDevSettings.isFpsDebugEnabled() ^ true);
        }
      });
      localLinkedHashMap.put(mApplicationContext.getString(R.string.catalyst_settings), new DevOptionHandler()
      {
        public void onOptionSelected()
        {
          Intent localIntent = new Intent(mApplicationContext, DevSettingsActivity.class);
          localIntent.setFlags(268435456);
          mApplicationContext.startActivity(localIntent);
        }
      });
      if (mCustomDevOptions.size() > 0) {
        localLinkedHashMap.putAll(mCustomDevOptions);
      }
      Object localObject = (DevOptionHandler[])localLinkedHashMap.values().toArray(new DevOptionHandler[0]);
      Activity localActivity = mReactInstanceManagerHelper.getCurrentActivity();
      if ((localActivity != null) && (!localActivity.isFinishing()))
      {
        mDevOptionsDialog = new AlertDialog.Builder(localActivity).setItems((CharSequence[])localLinkedHashMap.keySet().toArray(new String[0]), new DialogInterface.OnClickListener()
        {
          public void onClick(DialogInterface paramAnonymousDialogInterface, int paramAnonymousInt)
          {
            val$optionHandlers[paramAnonymousInt].onOptionSelected();
            DevSupportManagerImpl.access$1502(DevSupportManagerImpl.this, null);
          }
        }).setOnCancelListener(new DialogInterface.OnCancelListener()
        {
          public void onCancel(DialogInterface paramAnonymousDialogInterface)
          {
            DevSupportManagerImpl.access$1502(DevSupportManagerImpl.this, null);
          }
        }).create();
        mDevOptionsDialog.show();
        return;
      }
      FLog.e("ReactNative", "Unable to launch dev options menu because react activity isn't available");
      return;
    }
  }
  
  public void showNewJSError(String paramString, ReadableArray paramReadableArray, int paramInt)
  {
    showNewError(paramString, StackTraceHelper.convertJsStackTrace(paramReadableArray), paramInt, ErrorType.JS);
  }
  
  public void showNewJavaError(@Nullable String paramString, Throwable paramThrowable)
  {
    FLog.e("ReactNative", "Exception in native call", paramThrowable);
    showNewError(paramString, StackTraceHelper.convertJavaStackTrace(paramThrowable), -1, ErrorType.NATIVE);
  }
  
  public void startInspector()
  {
    if (mIsDevSupportEnabled) {
      mDevServerHelper.openInspectorConnection();
    }
  }
  
  public void stopInspector()
  {
    mDevServerHelper.closeInspectorConnection();
  }
  
  public void toggleElementInspector()
  {
    if (!mIsDevSupportEnabled) {
      return;
    }
    UiThreadUtil.runOnUiThread(new Runnable()
    {
      public void run()
      {
        mDevSettings.setElementInspectorEnabled(mDevSettings.isElementInspectorEnabled() ^ true);
        mReactInstanceManagerHelper.toggleElementInspector();
      }
    });
  }
  
  public void updateJSError(final String paramString, final ReadableArray paramReadableArray, final int paramInt)
  {
    UiThreadUtil.runOnUiThread(new Runnable()
    {
      public void run()
      {
        if ((mRedBoxDialog != null) && (mRedBoxDialog.isShowing()))
        {
          if (paramInt != mLastErrorCookie) {
            return;
          }
          StackFrame[] arrayOfStackFrame = StackTraceHelper.convertJsStackTrace(paramReadableArray);
          Pair localPair = DevSupportManagerImpl.this.processErrorCustomizers(Pair.create(paramString, arrayOfStackFrame));
          mRedBoxDialog.setExceptionDetails((String)first, (StackFrame[])second);
          DevSupportManagerImpl.this.updateLastErrorInfo(paramString, arrayOfStackFrame, paramInt, DevSupportManagerImpl.ErrorType.JS);
          if (mRedBoxHandler != null)
          {
            mRedBoxHandler.handleRedbox(paramString, arrayOfStackFrame, RedBoxHandler.ErrorType.JS);
            mRedBoxDialog.resetReporting();
          }
          mRedBoxDialog.show();
          return;
        }
      }
    });
  }
  
  private static enum ErrorType
  {
    JS,  NATIVE;
    
    private ErrorType() {}
  }
  
  private static abstract interface ExceptionLogger
  {
    public abstract void log(Exception paramException);
  }
  
  private class JSExceptionLogger
    implements DevSupportManagerImpl.ExceptionLogger
  {
    private JSExceptionLogger() {}
    
    public void log(Exception paramException)
    {
      if (paramException.getMessage() == null) {
        localObject1 = "Exception in native call from JS";
      } else {
        localObject1 = paramException.getMessage();
      }
      Object localObject2 = new StringBuilder((String)localObject1);
      for (Object localObject1 = paramException.getCause(); localObject1 != null; localObject1 = ((Throwable)localObject1).getCause())
      {
        ((StringBuilder)localObject2).append("\n\n");
        ((StringBuilder)localObject2).append(((Throwable)localObject1).getMessage());
      }
      if ((paramException instanceof JSException))
      {
        FLog.e("ReactNative", "Exception in native call from JS", paramException);
        paramException = ((JSException)paramException).getStack();
        ((StringBuilder)localObject2).append("\n\n");
        ((StringBuilder)localObject2).append(paramException);
        paramException = DevSupportManagerImpl.this;
        localObject1 = ((StringBuilder)localObject2).toString();
        localObject2 = DevSupportManagerImpl.ErrorType.JS;
        paramException.showNewError((String)localObject1, new StackFrame[0], -1, (DevSupportManagerImpl.ErrorType)localObject2);
        return;
      }
      showNewJavaError(((StringBuilder)localObject2).toString(), paramException);
    }
  }
}
