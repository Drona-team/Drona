package com.facebook.react.devsupport;

import android.util.Log;
import android.util.Pair;
import androidx.annotation.Nullable;
import com.facebook.common.logging.FLog;
import com.facebook.infer.annotation.Assertions;
import com.facebook.react.bridge.NativeDeltaClient;
import com.facebook.react.common.DebugServerException;
import com.facebook.react.devsupport.interfaces.DevBundleDownloadListener;
import java.io.File;
import java.io.IOException;
import java.util.Map;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Request.Builder;
import okhttp3.Response;
import okhttp3.ResponseBody;
import okio.Buffer;
import okio.BufferedSource;
import org.json.JSONException;
import org.json.JSONObject;

public class BundleDownloader
{
  private static final int FILES_CHANGED_COUNT_NOT_BUILT_BY_BUNDLER = -2;
  private static final String TAG = "BundleDownloader";
  private BundleDeltaClient mBundleDeltaClient;
  private final OkHttpClient mClient;
  @Nullable
  private Call mDownloadBundleFromURLCall;
  
  public BundleDownloader(OkHttpClient paramOkHttpClient)
  {
    mClient = paramOkHttpClient;
  }
  
  private String formatBundleUrl(String paramString, BundleDeltaClient.ClientType paramClientType)
  {
    String str = paramString;
    if (BundleDeltaClient.isDeltaUrl(paramString))
    {
      str = paramString;
      if (mBundleDeltaClient != null)
      {
        str = paramString;
        if (mBundleDeltaClient.canHandle(paramClientType)) {
          str = mBundleDeltaClient.extendUrlForDelta(paramString);
        }
      }
    }
    return str;
  }
  
  private BundleDeltaClient getBundleDeltaClient(BundleDeltaClient.ClientType paramClientType)
  {
    if ((mBundleDeltaClient == null) || (!mBundleDeltaClient.canHandle(paramClientType))) {
      mBundleDeltaClient = BundleDeltaClient.create(paramClientType);
    }
    return mBundleDeltaClient;
  }
  
  private static void populateBundleInfo(String paramString, Headers paramHeaders, BundleDeltaClient.ClientType paramClientType, BundleInfo paramBundleInfo)
  {
    if (paramClientType == BundleDeltaClient.ClientType.NONE) {
      paramClientType = null;
    } else {
      paramClientType = paramClientType.name();
    }
    BundleInfo.access$302(paramBundleInfo, paramClientType);
    BundleInfo.access$402(paramBundleInfo, paramString);
    paramString = paramHeaders.get("X-Metro-Files-Changed-Count");
    if (paramString != null) {}
    try
    {
      BundleInfo.access$502(paramBundleInfo, Integer.parseInt(paramString));
      return;
    }
    catch (NumberFormatException paramString)
    {
      for (;;) {}
    }
    BundleInfo.access$502(paramBundleInfo, -2);
  }
  
  private void processBundleResult(String paramString, int paramInt, Headers paramHeaders, BufferedSource paramBufferedSource, File paramFile, BundleInfo paramBundleInfo, BundleDeltaClient.ClientType paramClientType, DevBundleDownloadListener paramDevBundleDownloadListener)
    throws IOException
  {
    if (paramInt != 200)
    {
      paramHeaders = paramBufferedSource.readUtf8();
      paramBufferedSource = DebugServerException.parse(paramString, paramHeaders);
      if (paramBufferedSource != null)
      {
        paramDevBundleDownloadListener.onFailure(paramBufferedSource);
        return;
      }
      paramBufferedSource = new StringBuilder();
      paramBufferedSource.append("The development server returned response error code: ");
      paramBufferedSource.append(paramInt);
      paramBufferedSource.append("\n\n");
      paramBufferedSource.append("URL: ");
      paramBufferedSource.append(paramString);
      paramBufferedSource.append("\n\n");
      paramBufferedSource.append("Body:\n");
      paramBufferedSource.append(paramHeaders);
      paramDevBundleDownloadListener.onFailure(new DebugServerException(paramBufferedSource.toString()));
      return;
    }
    if (paramBundleInfo != null) {
      populateBundleInfo(paramString, paramHeaders, paramClientType, paramBundleInfo);
    }
    paramBundleInfo = new StringBuilder();
    paramBundleInfo.append(paramFile.getPath());
    paramBundleInfo.append(".tmp");
    paramBundleInfo = new File(paramBundleInfo.toString());
    boolean bool = BundleDeltaClient.isDeltaUrl(paramString);
    paramString = null;
    if (bool)
    {
      paramString = getBundleDeltaClient(paramClientType);
      Assertions.assertNotNull(paramString);
      paramString = paramString.processDelta(paramHeaders, paramBufferedSource, paramBundleInfo);
      bool = ((Boolean)first).booleanValue();
      paramString = (NativeDeltaClient)second;
    }
    else
    {
      mBundleDeltaClient = null;
      bool = storePlainJSInFile(paramBufferedSource, paramBundleInfo);
    }
    if ((bool) && (!paramBundleInfo.renameTo(paramFile)))
    {
      paramString = new StringBuilder();
      paramString.append("Couldn't rename ");
      paramString.append(paramBundleInfo);
      paramString.append(" to ");
      paramString.append(paramFile);
      throw new IOException(paramString.toString());
    }
    paramDevBundleDownloadListener.onSuccess(paramString);
  }
  
  private void processMultipartResponse(final String paramString1, final Response paramResponse, String paramString2, final File paramFile, @Nullable final BundleInfo paramBundleInfo, final BundleDeltaClient.ClientType paramClientType, final DevBundleDownloadListener paramDevBundleDownloadListener)
    throws IOException
  {
    if (!new MultipartStreamReader(paramResponse.body().source(), paramString2).readAllParts(new MultipartStreamReader.ChunkListener()
    {
      public void onChunkComplete(Map<String, String> paramAnonymousMap, Buffer paramAnonymousBuffer, boolean paramAnonymousBoolean)
        throws IOException
      {
        if (paramAnonymousBoolean)
        {
          int i = paramResponse.code();
          if (paramAnonymousMap.containsKey("X-Http-Status")) {
            i = Integer.parseInt((String)paramAnonymousMap.get("X-Http-Status"));
          }
          BundleDownloader.this.processBundleResult(paramString1, i, Headers.of(paramAnonymousMap), paramAnonymousBuffer, paramFile, paramBundleInfo, paramClientType, paramDevBundleDownloadListener);
          return;
        }
        if (paramAnonymousMap.containsKey("Content-Type")) {
          if (!((String)paramAnonymousMap.get("Content-Type")).equals("application/json")) {
            return;
          }
        }
        for (;;)
        {
          try
          {
            JSONObject localJSONObject = new JSONObject(paramAnonymousBuffer.readUtf8());
            paramAnonymousBoolean = localJSONObject.has("status");
            Integer localInteger = null;
            if (!paramAnonymousBoolean) {
              break label241;
            }
            paramAnonymousMap = localJSONObject.getString("status");
            if (!localJSONObject.has("done")) {
              break label246;
            }
            paramAnonymousBuffer = Integer.valueOf(localJSONObject.getInt("done"));
            if (localJSONObject.has("total")) {
              localInteger = Integer.valueOf(localJSONObject.getInt("total"));
            }
            paramDevBundleDownloadListener.onProgress(paramAnonymousMap, paramAnonymousBuffer, localInteger);
            return;
          }
          catch (JSONException paramAnonymousMap)
          {
            paramAnonymousBuffer = new StringBuilder();
            paramAnonymousBuffer.append("Error parsing progress JSON. ");
            paramAnonymousBuffer.append(paramAnonymousMap.toString());
            FLog.e("ReactNative", paramAnonymousBuffer.toString());
            return;
          }
          return;
          label241:
          paramAnonymousMap = null;
          continue;
          label246:
          paramAnonymousBuffer = null;
        }
      }
      
      public void onChunkProgress(Map<String, String> paramAnonymousMap, long paramAnonymousLong1, long paramAnonymousLong2)
        throws IOException
      {
        if ("application/javascript".equals(paramAnonymousMap.get("Content-Type"))) {
          paramDevBundleDownloadListener.onProgress("Downloading JavaScript bundle", Integer.valueOf((int)(paramAnonymousLong1 / 1024L)), Integer.valueOf((int)(paramAnonymousLong2 / 1024L)));
        }
      }
    }))
    {
      paramString2 = new StringBuilder();
      paramString2.append("Error while reading multipart response.\n\nResponse code: ");
      paramString2.append(paramResponse.code());
      paramString2.append("\n\nURL: ");
      paramString2.append(paramString1.toString());
      paramString2.append("\n\n");
      paramDevBundleDownloadListener.onFailure(new DebugServerException(paramString2.toString()));
    }
  }
  
  /* Error */
  private static boolean storePlainJSInFile(BufferedSource paramBufferedSource, File paramFile)
    throws IOException
  {
    // Byte code:
    //   0: aload_1
    //   1: invokestatic 257	okio/Okio:sink	(Ljava/io/File;)Lokio/Sink;
    //   4: astore_1
    //   5: aload_0
    //   6: aload_1
    //   7: invokeinterface 261 2 0
    //   12: pop2
    //   13: aload_1
    //   14: ifnull +9 -> 23
    //   17: aload_1
    //   18: invokeinterface 266 1 0
    //   23: iconst_1
    //   24: ireturn
    //   25: astore_0
    //   26: goto +6 -> 32
    //   29: astore_0
    //   30: aconst_null
    //   31: astore_1
    //   32: aload_1
    //   33: ifnull +9 -> 42
    //   36: aload_1
    //   37: invokeinterface 266 1 0
    //   42: aload_0
    //   43: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	44	0	paramBufferedSource	BufferedSource
    //   0	44	1	paramFile	File
    // Exception table:
    //   from	to	target	type
    //   5	13	25	finally
    //   0	5	29	finally
  }
  
  public void downloadBundleFromURL(DevBundleDownloadListener paramDevBundleDownloadListener, File paramFile, String paramString, @Nullable BundleInfo paramBundleInfo, BundleDeltaClient.ClientType paramClientType)
  {
    downloadBundleFromURL(paramDevBundleDownloadListener, paramFile, paramString, paramBundleInfo, paramClientType, new Request.Builder());
  }
  
  public void downloadBundleFromURL(final DevBundleDownloadListener paramDevBundleDownloadListener, final File paramFile, String paramString, @Nullable final BundleInfo paramBundleInfo, final BundleDeltaClient.ClientType paramClientType, Request.Builder paramBuilder)
  {
    paramString = paramBuilder.url(formatBundleUrl(paramString, paramClientType)).build();
    mDownloadBundleFromURLCall = ((Call)Assertions.assertNotNull(mClient.newCall(paramString)));
    mDownloadBundleFromURLCall.enqueue(new Callback()
    {
      public void onFailure(Call paramAnonymousCall, IOException paramAnonymousIOException)
      {
        if ((mDownloadBundleFromURLCall != null) && (!mDownloadBundleFromURLCall.isCanceled()))
        {
          BundleDownloader.access$002(BundleDownloader.this, null);
          paramAnonymousCall = paramAnonymousCall.request().url().toString();
          DevBundleDownloadListener localDevBundleDownloadListener = paramDevBundleDownloadListener;
          StringBuilder localStringBuilder = new StringBuilder();
          localStringBuilder.append("URL: ");
          localStringBuilder.append(paramAnonymousCall);
          localDevBundleDownloadListener.onFailure(DebugServerException.makeGeneric(paramAnonymousCall, "Could not connect to development server.", localStringBuilder.toString(), paramAnonymousIOException));
          return;
        }
        BundleDownloader.access$002(BundleDownloader.this, null);
      }
      
      /* Error */
      public void onResponse(Call paramAnonymousCall, Response paramAnonymousResponse)
        throws IOException
      {
        // Byte code:
        //   0: aload_0
        //   1: getfield 25	com/facebook/react/devsupport/BundleDownloader$1:this$0	Lcom/facebook/react/devsupport/BundleDownloader;
        //   4: invokestatic 43	com/facebook/react/devsupport/BundleDownloader:access$000	(Lcom/facebook/react/devsupport/BundleDownloader;)Lokhttp3/Call;
        //   7: astore_1
        //   8: aconst_null
        //   9: astore_3
        //   10: aload_1
        //   11: ifnull +200 -> 211
        //   14: aload_0
        //   15: getfield 25	com/facebook/react/devsupport/BundleDownloader$1:this$0	Lcom/facebook/react/devsupport/BundleDownloader;
        //   18: invokestatic 43	com/facebook/react/devsupport/BundleDownloader:access$000	(Lcom/facebook/react/devsupport/BundleDownloader;)Lokhttp3/Call;
        //   21: invokeinterface 49 1 0
        //   26: ifeq +6 -> 32
        //   29: goto +182 -> 211
        //   32: aload_0
        //   33: getfield 25	com/facebook/react/devsupport/BundleDownloader$1:this$0	Lcom/facebook/react/devsupport/BundleDownloader;
        //   36: aconst_null
        //   37: invokestatic 53	com/facebook/react/devsupport/BundleDownloader:access$002	(Lcom/facebook/react/devsupport/BundleDownloader;Lokhttp3/Call;)Lokhttp3/Call;
        //   40: pop
        //   41: aload_2
        //   42: invokevirtual 101	okhttp3/Response:request	()Lokhttp3/Request;
        //   45: invokevirtual 63	okhttp3/Request:url	()Lokhttp3/HttpUrl;
        //   48: invokevirtual 69	okhttp3/HttpUrl:toString	()Ljava/lang/String;
        //   51: astore 4
        //   53: aload_2
        //   54: ldc 103
        //   56: invokevirtual 107	okhttp3/Response:header	(Ljava/lang/String;)Ljava/lang/String;
        //   59: astore_1
        //   60: ldc 109
        //   62: invokestatic 115	java/util/regex/Pattern:compile	(Ljava/lang/String;)Ljava/util/regex/Pattern;
        //   65: aload_1
        //   66: invokevirtual 119	java/util/regex/Pattern:matcher	(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
        //   69: astore 5
        //   71: aload_3
        //   72: astore_1
        //   73: aload 5
        //   75: invokevirtual 124	java/util/regex/Matcher:find	()Z
        //   78: ifeq +40 -> 118
        //   81: aload_3
        //   82: astore_1
        //   83: aload_0
        //   84: getfield 25	com/facebook/react/devsupport/BundleDownloader$1:this$0	Lcom/facebook/react/devsupport/BundleDownloader;
        //   87: aload 4
        //   89: aload_2
        //   90: aload 5
        //   92: iconst_1
        //   93: invokevirtual 128	java/util/regex/Matcher:group	(I)Ljava/lang/String;
        //   96: aload_0
        //   97: getfield 29	com/facebook/react/devsupport/BundleDownloader$1:val$outputFile	Ljava/io/File;
        //   100: aload_0
        //   101: getfield 31	com/facebook/react/devsupport/BundleDownloader$1:val$bundleInfo	Lcom/facebook/react/devsupport/BundleDownloader$BundleInfo;
        //   104: aload_0
        //   105: getfield 33	com/facebook/react/devsupport/BundleDownloader$1:val$clientType	Lcom/facebook/react/devsupport/BundleDeltaClient$ClientType;
        //   108: aload_0
        //   109: getfield 27	com/facebook/react/devsupport/BundleDownloader$1:val$callback	Lcom/facebook/react/devsupport/interfaces/DevBundleDownloadListener;
        //   112: invokestatic 132	com/facebook/react/devsupport/BundleDownloader:access$100	(Lcom/facebook/react/devsupport/BundleDownloader;Ljava/lang/String;Lokhttp3/Response;Ljava/lang/String;Ljava/io/File;Lcom/facebook/react/devsupport/BundleDownloader$BundleInfo;Lcom/facebook/react/devsupport/BundleDeltaClient$ClientType;Lcom/facebook/react/devsupport/interfaces/DevBundleDownloadListener;)V
        //   115: goto +48 -> 163
        //   118: aload_3
        //   119: astore_1
        //   120: aload_0
        //   121: getfield 25	com/facebook/react/devsupport/BundleDownloader$1:this$0	Lcom/facebook/react/devsupport/BundleDownloader;
        //   124: aload 4
        //   126: aload_2
        //   127: invokevirtual 136	okhttp3/Response:code	()I
        //   130: aload_2
        //   131: invokevirtual 140	okhttp3/Response:headers	()Lokhttp3/Headers;
        //   134: aload_2
        //   135: invokevirtual 144	okhttp3/Response:body	()Lokhttp3/ResponseBody;
        //   138: invokevirtual 150	okhttp3/ResponseBody:source	()Lokio/BufferedSource;
        //   141: invokestatic 156	okio/Okio:buffer	(Lokio/Source;)Lokio/BufferedSource;
        //   144: aload_0
        //   145: getfield 29	com/facebook/react/devsupport/BundleDownloader$1:val$outputFile	Ljava/io/File;
        //   148: aload_0
        //   149: getfield 31	com/facebook/react/devsupport/BundleDownloader$1:val$bundleInfo	Lcom/facebook/react/devsupport/BundleDownloader$BundleInfo;
        //   152: aload_0
        //   153: getfield 33	com/facebook/react/devsupport/BundleDownloader$1:val$clientType	Lcom/facebook/react/devsupport/BundleDeltaClient$ClientType;
        //   156: aload_0
        //   157: getfield 27	com/facebook/react/devsupport/BundleDownloader$1:val$callback	Lcom/facebook/react/devsupport/interfaces/DevBundleDownloadListener;
        //   160: invokestatic 160	com/facebook/react/devsupport/BundleDownloader:access$200	(Lcom/facebook/react/devsupport/BundleDownloader;Ljava/lang/String;ILokhttp3/Headers;Lokio/BufferedSource;Ljava/io/File;Lcom/facebook/react/devsupport/BundleDownloader$BundleInfo;Lcom/facebook/react/devsupport/BundleDeltaClient$ClientType;Lcom/facebook/react/devsupport/interfaces/DevBundleDownloadListener;)V
        //   163: aload_2
        //   164: ifnull +7 -> 171
        //   167: aload_2
        //   168: invokevirtual 163	okhttp3/Response:close	()V
        //   171: return
        //   172: astore_3
        //   173: goto +8 -> 181
        //   176: astore_3
        //   177: aload_3
        //   178: astore_1
        //   179: aload_3
        //   180: athrow
        //   181: aload_2
        //   182: ifnull +27 -> 209
        //   185: aload_1
        //   186: ifnull +19 -> 205
        //   189: aload_2
        //   190: invokevirtual 163	okhttp3/Response:close	()V
        //   193: goto +16 -> 209
        //   196: astore_2
        //   197: aload_1
        //   198: aload_2
        //   199: invokevirtual 167	java/lang/Throwable:addSuppressed	(Ljava/lang/Throwable;)V
        //   202: goto +7 -> 209
        //   205: aload_2
        //   206: invokevirtual 163	okhttp3/Response:close	()V
        //   209: aload_3
        //   210: athrow
        //   211: aload_0
        //   212: getfield 25	com/facebook/react/devsupport/BundleDownloader$1:this$0	Lcom/facebook/react/devsupport/BundleDownloader;
        //   215: aconst_null
        //   216: invokestatic 53	com/facebook/react/devsupport/BundleDownloader:access$002	(Lcom/facebook/react/devsupport/BundleDownloader;Lokhttp3/Call;)Lokhttp3/Call;
        //   219: pop
        //   220: return
        // Local variable table:
        //   start	length	slot	name	signature
        //   0	221	0	this	1
        //   0	221	1	paramAnonymousCall	Call
        //   0	221	2	paramAnonymousResponse	Response
        //   9	110	3	localObject1	Object
        //   172	1	3	localObject2	Object
        //   176	34	3	localThrowable	Throwable
        //   51	74	4	str	String
        //   69	22	5	localMatcher	java.util.regex.Matcher
        // Exception table:
        //   from	to	target	type
        //   73	81	172	finally
        //   83	115	172	finally
        //   120	163	172	finally
        //   179	181	172	finally
        //   73	81	176	java/lang/Throwable
        //   83	115	176	java/lang/Throwable
        //   120	163	176	java/lang/Throwable
        //   189	193	196	java/lang/Throwable
      }
    });
  }
  
  public static class BundleInfo
  {
    @Nullable
    private String mDeltaClientName;
    private int mFilesChangedCount;
    @Nullable
    private String mUrl;
    
    public BundleInfo() {}
    
    @Nullable
    public static BundleInfo fromJSONString(String paramString)
    {
      if (paramString == null) {
        return null;
      }
      BundleInfo localBundleInfo = new BundleInfo();
      try
      {
        paramString = new JSONObject(paramString);
        mDeltaClientName = paramString.getString("deltaClient");
        mUrl = paramString.getString("url");
        mFilesChangedCount = paramString.getInt("filesChangedCount");
        return localBundleInfo;
      }
      catch (JSONException paramString)
      {
        Log.e("BundleDownloader", "Invalid bundle info: ", paramString);
      }
      return null;
    }
    
    @Nullable
    public String getDeltaClient()
    {
      return mDeltaClientName;
    }
    
    public int getFilesChangedCount()
    {
      return mFilesChangedCount;
    }
    
    public String getUrl()
    {
      if (mUrl != null) {
        return mUrl;
      }
      return "unknown";
    }
    
    @Nullable
    public String toJSONString()
    {
      JSONObject localJSONObject = new JSONObject();
      try
      {
        localJSONObject.put("deltaClient", mDeltaClientName);
        localJSONObject.put("url", mUrl);
        localJSONObject.put("filesChangedCount", mFilesChangedCount);
        return localJSONObject.toString();
      }
      catch (JSONException localJSONException)
      {
        Log.e("BundleDownloader", "Can't serialize bundle info: ", localJSONException);
      }
      return null;
    }
  }
}
