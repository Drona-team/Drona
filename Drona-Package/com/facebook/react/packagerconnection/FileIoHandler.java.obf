package com.facebook.react.packagerconnection;

import android.os.Handler;
import android.os.Looper;
import android.util.Base64;
import androidx.annotation.Nullable;
import com.facebook.common.logging.FLog;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import org.json.JSONObject;

public class FileIoHandler
  implements Runnable
{
  private static final long FILE_TTL = 30000L;
  private static final String TAG = JSPackagerClient.class.getSimpleName();
  private final Handler mHandler = new Handler(Looper.getMainLooper());
  private int mNextHandle = 1;
  private final Map<Integer, TtlFileInputStream> mOpenFiles = new HashMap();
  private final Map<String, RequestHandler> mRequestHandlers = new HashMap();
  
  public FileIoHandler()
  {
    mRequestHandlers.put("fopen", new RequestOnlyHandler()
    {
      public void onRequest(@Nullable Object paramAnonymousObject, Responder paramAnonymousResponder)
      {
        try
        {
          synchronized (mOpenFiles)
          {
            Object localObject = (JSONObject)paramAnonymousObject;
            if (localObject != null)
            {
              paramAnonymousObject = ((JSONObject)localObject).optString("mode");
              if (paramAnonymousObject != null)
              {
                localObject = ((JSONObject)localObject).optString("filename");
                if (localObject != null)
                {
                  if (paramAnonymousObject.equals("r"))
                  {
                    paramAnonymousResponder.respond(Integer.valueOf(FileIoHandler.this.addOpenFile((String)localObject)));
                  }
                  else
                  {
                    localObject = new StringBuilder();
                    ((StringBuilder)localObject).append("unsupported mode: ");
                    ((StringBuilder)localObject).append(paramAnonymousObject);
                    throw new IllegalArgumentException(((StringBuilder)localObject).toString());
                  }
                }
                else {
                  throw new Exception("missing params.filename");
                }
              }
              else
              {
                throw new Exception("missing params.mode");
              }
            }
            else
            {
              throw new Exception("params must be an object { mode: string, filename: string }");
            }
          }
        }
        catch (Exception paramAnonymousObject)
        {
          paramAnonymousResponder.error(paramAnonymousObject.toString());
          return;
        }
      }
    });
    mRequestHandlers.put("fclose", new RequestOnlyHandler()
    {
      public void onRequest(@Nullable Object paramAnonymousObject, Responder paramAnonymousResponder)
      {
        try
        {
          synchronized (mOpenFiles)
          {
            if ((paramAnonymousObject instanceof Number))
            {
              FileIoHandler.TtlFileInputStream localTtlFileInputStream = (FileIoHandler.TtlFileInputStream)mOpenFiles.get(Integer.valueOf(((Integer)paramAnonymousObject).intValue()));
              if (localTtlFileInputStream != null)
              {
                mOpenFiles.remove(Integer.valueOf(((Integer)paramAnonymousObject).intValue()));
                localTtlFileInputStream.close();
                paramAnonymousResponder.respond("");
              }
              else
              {
                throw new Exception("invalid file handle, it might have timed out");
              }
            }
            else
            {
              throw new Exception("params must be a file handle");
            }
          }
        }
        catch (Exception paramAnonymousObject)
        {
          paramAnonymousResponder.error(paramAnonymousObject.toString());
          return;
        }
      }
    });
    mRequestHandlers.put("fread", new RequestOnlyHandler()
    {
      public void onRequest(@Nullable Object paramAnonymousObject, Responder paramAnonymousResponder)
      {
        try
        {
          synchronized (mOpenFiles)
          {
            paramAnonymousObject = (JSONObject)paramAnonymousObject;
            if (paramAnonymousObject != null)
            {
              int i = paramAnonymousObject.optInt("file");
              if (i != 0)
              {
                int j = paramAnonymousObject.optInt("size");
                if (j != 0)
                {
                  paramAnonymousObject = (FileIoHandler.TtlFileInputStream)mOpenFiles.get(Integer.valueOf(i));
                  if (paramAnonymousObject != null) {
                    paramAnonymousResponder.respond(paramAnonymousObject.read(j));
                  } else {
                    throw new Exception("invalid file handle, it might have timed out");
                  }
                }
                else
                {
                  throw new Exception("invalid or missing read size");
                }
              }
              else
              {
                throw new Exception("invalid or missing file handle");
              }
            }
            else
            {
              throw new Exception("params must be an object { file: handle, size: number }");
            }
          }
        }
        catch (Exception paramAnonymousObject)
        {
          paramAnonymousResponder.error(paramAnonymousObject.toString());
          return;
        }
      }
    });
  }
  
  private int addOpenFile(String paramString)
    throws FileNotFoundException
  {
    int i = mNextHandle;
    mNextHandle = (i + 1);
    mOpenFiles.put(Integer.valueOf(i), new TtlFileInputStream(paramString));
    if (mOpenFiles.size() == 1) {
      mHandler.postDelayed(this, 30000L);
    }
    return i;
  }
  
  public Map<String, RequestHandler> handlers()
  {
    return mRequestHandlers;
  }
  
  public void run()
  {
    synchronized (mOpenFiles)
    {
      Iterator localIterator = mOpenFiles.values().iterator();
      while (localIterator.hasNext())
      {
        TtlFileInputStream localTtlFileInputStream = (TtlFileInputStream)localIterator.next();
        if (localTtlFileInputStream.expiredTtl())
        {
          localIterator.remove();
          try
          {
            localTtlFileInputStream.close();
          }
          catch (IOException localIOException)
          {
            String str = TAG;
            StringBuilder localStringBuilder = new StringBuilder();
            localStringBuilder.append("closing expired file failed: ");
            localStringBuilder.append(localIOException.toString());
            FLog.e(str, localStringBuilder.toString());
          }
        }
      }
      if (!mOpenFiles.isEmpty()) {
        mHandler.postDelayed(this, 30000L);
      }
      return;
    }
  }
  
  private static class TtlFileInputStream
  {
    private final FileInputStream mStream;
    private long mTtl;
    
    public TtlFileInputStream(String paramString)
      throws FileNotFoundException
    {
      mStream = new FileInputStream(paramString);
      mTtl = (System.currentTimeMillis() + 30000L);
    }
    
    private void extendTtl()
    {
      mTtl = (System.currentTimeMillis() + 30000L);
    }
    
    public void close()
      throws IOException
    {
      mStream.close();
    }
    
    public boolean expiredTtl()
    {
      return System.currentTimeMillis() >= mTtl;
    }
    
    public String read(int paramInt)
      throws IOException
    {
      extendTtl();
      byte[] arrayOfByte = new byte[paramInt];
      return Base64.encodeToString(arrayOfByte, 0, mStream.read(arrayOfByte), 0);
    }
  }
}
