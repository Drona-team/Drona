package com.facebook.react;

import android.app.Activity;
import android.app.Application;
import androidx.annotation.Nullable;
import com.facebook.hermes.reactexecutor.HermesExecutorFactory;
import com.facebook.infer.annotation.Assertions;
import com.facebook.react.bridge.JSBundleLoader;
import com.facebook.react.bridge.JSIModulePackage;
import com.facebook.react.bridge.JavaScriptExecutorFactory;
import com.facebook.react.bridge.NativeModuleCallExceptionHandler;
import com.facebook.react.bridge.NotThreadSafeBridgeIdleDebugListener;
import com.facebook.react.common.LifecycleState;
import com.facebook.react.devsupport.RedBoxHandler;
import com.facebook.react.devsupport.interfaces.DevBundleDownloadListener;
import com.facebook.react.jscexecutor.JSCExecutorFactory;
import com.facebook.react.modules.core.DefaultHardwareBackBtnHandler;
import com.facebook.react.modules.systeminfo.AndroidInfoHelpers;
import com.facebook.react.packagerconnection.RequestHandler;
import com.facebook.react.uimanager.UIImplementationProvider;
import com.facebook.soloader.SoLoader;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class ReactInstanceManagerBuilder
{
  @Nullable
  private Application mApplication;
  @Nullable
  private NotThreadSafeBridgeIdleDebugListener mBridgeIdleDebugListener;
  @Nullable
  private Activity mCurrentActivity;
  @Nullable
  private Map<String, RequestHandler> mCustomPackagerCommandHandlers;
  @Nullable
  private DefaultHardwareBackBtnHandler mDefaultHardwareBackBtnHandler;
  @Nullable
  private DevBundleDownloadListener mDevBundleDownloadListener;
  @Nullable
  private LifecycleState mInitialLifecycleState;
  @Nullable
  private String mJSBundleAssetUrl;
  @Nullable
  private JSBundleLoader mJSBundleLoader;
  @Nullable
  private JSIModulePackage mJSIModulesPackage;
  @Nullable
  private String mJSMainModulePath;
  @Nullable
  private JavaScriptExecutorFactory mJavaScriptExecutorFactory;
  private boolean mLazyViewManagersEnabled;
  private int mMinNumShakes = 1;
  private int mMinTimeLeftInFrameForNonBatchedOperationMs = -1;
  @Nullable
  private NativeModuleCallExceptionHandler mNativeModuleCallExceptionHandler;
  private final List<ReactPackage> mPackages = new ArrayList();
  @Nullable
  private RedBoxHandler mRedBoxHandler;
  @Nullable
  private UIImplementationProvider mUIImplementationProvider;
  private boolean mUseDeveloperSupport;
  
  ReactInstanceManagerBuilder() {}
  
  private JavaScriptExecutorFactory getDefaultJSExecutorFactory(String paramString1, String paramString2)
  {
    try
    {
      SoLoader.loadLibrary("jscexecutor");
      paramString1 = new JSCExecutorFactory(paramString1, paramString2);
      return paramString1;
    }
    catch (UnsatisfiedLinkError paramString1)
    {
      for (;;) {}
    }
    return new HermesExecutorFactory();
  }
  
  public ReactInstanceManagerBuilder addPackage(ReactPackage paramReactPackage)
  {
    mPackages.add(paramReactPackage);
    return this;
  }
  
  public ReactInstanceManagerBuilder addPackages(List<ReactPackage> paramList)
  {
    mPackages.addAll(paramList);
    return this;
  }
  
  public ReactInstanceManager build()
  {
    Assertions.assertNotNull(mApplication, "Application property has not been set with this builder");
    if (mInitialLifecycleState == LifecycleState.RESUMED) {
      Assertions.assertNotNull(mCurrentActivity, "Activity needs to be set if initial lifecycle state is resumed");
    }
    boolean bool1 = mUseDeveloperSupport;
    boolean bool2 = true;
    if ((!bool1) && (mJSBundleAssetUrl == null) && (mJSBundleLoader == null)) {
      bool1 = false;
    } else {
      bool1 = true;
    }
    Assertions.assertCondition(bool1, "JS Bundle File or Asset URL has to be provided when dev support is disabled");
    bool1 = bool2;
    if (mJSMainModulePath == null)
    {
      bool1 = bool2;
      if (mJSBundleAssetUrl == null) {
        if (mJSBundleLoader != null) {
          bool1 = bool2;
        } else {
          bool1 = false;
        }
      }
    }
    Assertions.assertCondition(bool1, "Either MainModulePath or JS Bundle File needs to be provided");
    if (mUIImplementationProvider == null) {
      mUIImplementationProvider = new UIImplementationProvider();
    }
    Object localObject1 = mApplication.getPackageName();
    Object localObject2 = AndroidInfoHelpers.getFriendlyDeviceName();
    Application localApplication = mApplication;
    Activity localActivity = mCurrentActivity;
    DefaultHardwareBackBtnHandler localDefaultHardwareBackBtnHandler = mDefaultHardwareBackBtnHandler;
    if (mJavaScriptExecutorFactory == null) {}
    for (localObject1 = getDefaultJSExecutorFactory((String)localObject1, (String)localObject2);; localObject1 = mJavaScriptExecutorFactory) {
      break;
    }
    if ((mJSBundleLoader == null) && (mJSBundleAssetUrl != null)) {
      localObject2 = JSBundleLoader.createAssetLoader(mApplication, mJSBundleAssetUrl, false);
    } else {
      localObject2 = mJSBundleLoader;
    }
    return new ReactInstanceManager(localApplication, localActivity, localDefaultHardwareBackBtnHandler, (JavaScriptExecutorFactory)localObject1, (JSBundleLoader)localObject2, mJSMainModulePath, mPackages, mUseDeveloperSupport, mBridgeIdleDebugListener, (LifecycleState)Assertions.assertNotNull(mInitialLifecycleState, "Initial lifecycle state was not set"), mUIImplementationProvider, mNativeModuleCallExceptionHandler, mRedBoxHandler, mLazyViewManagersEnabled, mDevBundleDownloadListener, mMinNumShakes, mMinTimeLeftInFrameForNonBatchedOperationMs, mJSIModulesPackage, mCustomPackagerCommandHandlers);
  }
  
  public ReactInstanceManagerBuilder setApplication(Application paramApplication)
  {
    mApplication = paramApplication;
    return this;
  }
  
  public ReactInstanceManagerBuilder setBridgeIdleDebugListener(NotThreadSafeBridgeIdleDebugListener paramNotThreadSafeBridgeIdleDebugListener)
  {
    mBridgeIdleDebugListener = paramNotThreadSafeBridgeIdleDebugListener;
    return this;
  }
  
  public ReactInstanceManagerBuilder setBundleAssetName(String paramString)
  {
    if (paramString == null)
    {
      paramString = null;
    }
    else
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("assets://");
      localStringBuilder.append(paramString);
      paramString = localStringBuilder.toString();
    }
    mJSBundleAssetUrl = paramString;
    mJSBundleLoader = null;
    return this;
  }
  
  public ReactInstanceManagerBuilder setCurrentActivity(Activity paramActivity)
  {
    mCurrentActivity = paramActivity;
    return this;
  }
  
  public ReactInstanceManagerBuilder setCustomPackagerCommandHandlers(Map<String, RequestHandler> paramMap)
  {
    mCustomPackagerCommandHandlers = paramMap;
    return this;
  }
  
  public ReactInstanceManagerBuilder setDefaultHardwareBackBtnHandler(DefaultHardwareBackBtnHandler paramDefaultHardwareBackBtnHandler)
  {
    mDefaultHardwareBackBtnHandler = paramDefaultHardwareBackBtnHandler;
    return this;
  }
  
  public ReactInstanceManagerBuilder setDevBundleDownloadListener(@Nullable DevBundleDownloadListener paramDevBundleDownloadListener)
  {
    mDevBundleDownloadListener = paramDevBundleDownloadListener;
    return this;
  }
  
  public ReactInstanceManagerBuilder setInitialLifecycleState(LifecycleState paramLifecycleState)
  {
    mInitialLifecycleState = paramLifecycleState;
    return this;
  }
  
  public ReactInstanceManagerBuilder setJSBundleFile(String paramString)
  {
    if (paramString.startsWith("assets://"))
    {
      mJSBundleAssetUrl = paramString;
      mJSBundleLoader = null;
      return this;
    }
    return setJSBundleLoader(JSBundleLoader.createFileLoader(paramString));
  }
  
  public ReactInstanceManagerBuilder setJSBundleLoader(JSBundleLoader paramJSBundleLoader)
  {
    mJSBundleLoader = paramJSBundleLoader;
    mJSBundleAssetUrl = null;
    return this;
  }
  
  public ReactInstanceManagerBuilder setJSIModulesPackage(@Nullable JSIModulePackage paramJSIModulePackage)
  {
    mJSIModulesPackage = paramJSIModulePackage;
    return this;
  }
  
  public ReactInstanceManagerBuilder setJSMainModulePath(String paramString)
  {
    mJSMainModulePath = paramString;
    return this;
  }
  
  public ReactInstanceManagerBuilder setJavaScriptExecutorFactory(@Nullable JavaScriptExecutorFactory paramJavaScriptExecutorFactory)
  {
    mJavaScriptExecutorFactory = paramJavaScriptExecutorFactory;
    return this;
  }
  
  public ReactInstanceManagerBuilder setLazyViewManagersEnabled(boolean paramBoolean)
  {
    mLazyViewManagersEnabled = paramBoolean;
    return this;
  }
  
  public ReactInstanceManagerBuilder setMinNumShakes(int paramInt)
  {
    mMinNumShakes = paramInt;
    return this;
  }
  
  public ReactInstanceManagerBuilder setMinTimeLeftInFrameForNonBatchedOperationMs(int paramInt)
  {
    mMinTimeLeftInFrameForNonBatchedOperationMs = paramInt;
    return this;
  }
  
  public ReactInstanceManagerBuilder setNativeModuleCallExceptionHandler(NativeModuleCallExceptionHandler paramNativeModuleCallExceptionHandler)
  {
    mNativeModuleCallExceptionHandler = paramNativeModuleCallExceptionHandler;
    return this;
  }
  
  public ReactInstanceManagerBuilder setRedBoxHandler(@Nullable RedBoxHandler paramRedBoxHandler)
  {
    mRedBoxHandler = paramRedBoxHandler;
    return this;
  }
  
  public ReactInstanceManagerBuilder setUIImplementationProvider(@Nullable UIImplementationProvider paramUIImplementationProvider)
  {
    mUIImplementationProvider = paramUIImplementationProvider;
    return this;
  }
  
  public ReactInstanceManagerBuilder setUseDeveloperSupport(boolean paramBoolean)
  {
    mUseDeveloperSupport = paramBoolean;
    return this;
  }
}
