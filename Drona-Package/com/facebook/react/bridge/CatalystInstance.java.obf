package com.facebook.react.bridge;

import androidx.annotation.Nullable;
import com.facebook.proguard.annotations.DoNotStrip;
import com.facebook.react.bridge.queue.ReactQueueConfiguration;
import com.facebook.react.common.annotations.VisibleForTesting;
import com.facebook.react.turbomodule.core.interfaces.JSCallInvokerHolder;
import java.util.Collection;
import java.util.List;

@DoNotStrip
public abstract interface CatalystInstance
  extends MemoryPressureListener, JSInstance, JSBundleLoaderDelegate
{
  public abstract void addBridgeIdleDebugListener(NotThreadSafeBridgeIdleDebugListener paramNotThreadSafeBridgeIdleDebugListener);
  
  public abstract void addJSIModules(List<JSIModuleSpec> paramList);
  
  @DoNotStrip
  public abstract void callFunction(String paramString1, String paramString2, NativeArray paramNativeArray);
  
  public abstract void destroy();
  
  public abstract void extendNativeModules(NativeModuleRegistry paramNativeModuleRegistry);
  
  public abstract JSCallInvokerHolder getJSCallInvokerHolder();
  
  public abstract JSIModule getJSIModule(JSIModuleType paramJSIModuleType);
  
  public abstract <T extends JavaScriptModule> T getJSModule(Class<T> paramClass);
  
  public abstract JavaScriptContextHolder getJavaScriptContextHolder();
  
  public abstract <T extends NativeModule> T getNativeModule(Class<T> paramClass);
  
  public abstract NativeModule getNativeModule(String paramString);
  
  public abstract Collection<NativeModule> getNativeModules();
  
  public abstract ReactQueueConfiguration getReactQueueConfiguration();
  
  @Nullable
  public abstract String getSourceURL();
  
  public abstract <T extends NativeModule> boolean hasNativeModule(Class<T> paramClass);
  
  public abstract boolean hasRunJSBundle();
  
  @VisibleForTesting
  public abstract void initialize();
  
  @DoNotStrip
  public abstract void invokeCallback(int paramInt, NativeArrayInterface paramNativeArrayInterface);
  
  public abstract boolean isDestroyed();
  
  public abstract void registerSegment(int paramInt, String paramString);
  
  public abstract void removeBridgeIdleDebugListener(NotThreadSafeBridgeIdleDebugListener paramNotThreadSafeBridgeIdleDebugListener);
  
  public abstract void runJSBundle();
  
  @VisibleForTesting
  public abstract void setGlobalVariable(String paramString1, String paramString2);
  
  public abstract void setTurboModuleManager(JSIModule paramJSIModule);
}
