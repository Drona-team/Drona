package com.facebook.react.uimanager.events;

import android.util.LongSparseArray;
import com.facebook.infer.annotation.Assertions;
import com.facebook.react.bridge.LifecycleEventListener;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.UiThreadUtil;
import com.facebook.react.common.MapBuilder;
import com.facebook.react.modules.core.ChoreographerCompat.FrameCallback;
import com.facebook.react.modules.core.ReactChoreographer;
import com.facebook.react.modules.core.ReactChoreographer.CallbackType;
import com.facebook.systrace.Systrace;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

public class EventDispatcher
  implements LifecycleEventListener
{
  private static final Comparator<Event> EVENT_COMPARATOR = new Comparator()
  {
    public int compare(Event paramAnonymousEvent1, Event paramAnonymousEvent2)
    {
      if ((paramAnonymousEvent1 == null) && (paramAnonymousEvent2 == null)) {
        return 0;
      }
      if (paramAnonymousEvent1 == null) {
        return -1;
      }
      if (paramAnonymousEvent2 == null) {
        return 1;
      }
      boolean bool = paramAnonymousEvent1.getTimestampMs() - paramAnonymousEvent2.getTimestampMs() < 0L;
      if (!bool) {
        return 0;
      }
      if (bool) {
        return -1;
      }
      return 1;
    }
  };
  private final ScheduleDispatchFrameCallback mCurrentFrameCallback = new ScheduleDispatchFrameCallback(null);
  private final DispatchEventsRunnable mDispatchEventsRunnable = new DispatchEventsRunnable(null);
  private final LongSparseArray<Integer> mEventCookieToLastEventIdx = new LongSparseArray();
  private final Map<String, Short> mEventNameToEventId = MapBuilder.newHashMap();
  private final ArrayList<Event> mEventStaging = new ArrayList();
  private final Object mEventsStagingLock = new Object();
  private Event[] mEventsToDispatch = new Event[16];
  private final Object mEventsToDispatchLock = new Object();
  private int mEventsToDispatchSize = 0;
  private volatile boolean mHasDispatchScheduled = false;
  private final AtomicInteger mHasDispatchScheduledCount = new AtomicInteger();
  private final ArrayList<EventDispatcherListener> mListeners = new ArrayList();
  private short mNextEventTypeId = 0;
  private final List<BatchEventDispatchedListener> mPostEventDispatchListeners = new ArrayList();
  private final ReactApplicationContext mReactContext;
  private volatile ReactEventEmitter mReactEventEmitter;
  
  public EventDispatcher(ReactApplicationContext paramReactApplicationContext)
  {
    mReactContext = paramReactApplicationContext;
    mReactContext.addLifecycleEventListener(this);
    mReactEventEmitter = new ReactEventEmitter(mReactContext);
  }
  
  private void addEventToEventsToDispatch(Event paramEvent)
  {
    if (mEventsToDispatchSize == mEventsToDispatch.length) {
      mEventsToDispatch = ((Event[])Arrays.copyOf(mEventsToDispatch, mEventsToDispatch.length * 2));
    }
    Event[] arrayOfEvent = mEventsToDispatch;
    int i = mEventsToDispatchSize;
    mEventsToDispatchSize = (i + 1);
    arrayOfEvent[i] = paramEvent;
  }
  
  private void clearEventsToDispatch()
  {
    Arrays.fill(mEventsToDispatch, 0, mEventsToDispatchSize, null);
    mEventsToDispatchSize = 0;
  }
  
  private long getEventCookie(int paramInt, String paramString, short paramShort)
  {
    Short localShort = (Short)mEventNameToEventId.get(paramString);
    short s;
    if (localShort != null)
    {
      s = localShort.shortValue();
    }
    else
    {
      s = mNextEventTypeId;
      mNextEventTypeId = ((short)(s + 1));
      mEventNameToEventId.put(paramString, Short.valueOf(s));
    }
    return getEventCookie(paramInt, s, paramShort);
  }
  
  private static long getEventCookie(int paramInt, short paramShort1, short paramShort2)
  {
    long l = paramInt;
    return (paramShort1 & 0xFFFF) << 32 | l | (paramShort2 & 0xFFFF) << 48;
  }
  
  private void maybePostFrameCallbackFromNonUI()
  {
    if (mReactEventEmitter != null) {
      mCurrentFrameCallback.maybePostFromNonUI();
    }
  }
  
  private void moveStagedEventsToDispatchQueue()
  {
    for (;;)
    {
      int i;
      synchronized (mEventsStagingLock)
      {
        Object localObject7 = mEventsToDispatchLock;
        i = 0;
        try
        {
          if (i < mEventStaging.size())
          {
            Object localObject1 = (Event)mEventStaging.get(i);
            if (!((Event)localObject1).canCoalesce())
            {
              addEventToEventsToDispatch((Event)localObject1);
              break label245;
            }
            long l = getEventCookie(((Event)localObject1).getViewTag(), ((Event)localObject1).getEventName(), ((Event)localObject1).getCoalescingKey());
            Integer localInteger = (Integer)mEventCookieToLastEventIdx.get(l);
            localObject5 = null;
            if (localInteger == null)
            {
              mEventCookieToLastEventIdx.put(l, Integer.valueOf(mEventsToDispatchSize));
            }
            else
            {
              localObject5 = mEventsToDispatch[localInteger.intValue()];
              Event localEvent = ((Event)localObject1).coalesce((Event)localObject5);
              if (localEvent == localObject5) {
                break label235;
              }
              mEventCookieToLastEventIdx.put(l, Integer.valueOf(mEventsToDispatchSize));
              mEventsToDispatch[localInteger.intValue()] = null;
              localObject1 = localEvent;
            }
            if (localObject1 != null) {
              addEventToEventsToDispatch((Event)localObject1);
            }
            if (localObject5 == null) {
              break label245;
            }
            ((Event)localObject5).dispose();
            break label245;
          }
          else
          {
            mEventStaging.clear();
            return;
          }
        }
        finally {}
      }
      label235:
      Object localObject5 = localObject3;
      Object localObject4 = null;
      continue;
      label245:
      i += 1;
    }
  }
  
  private void stopFrameCallback()
  {
    UiThreadUtil.assertOnUiThread();
    mCurrentFrameCallback.stop();
  }
  
  public void addBatchEventDispatchedListener(BatchEventDispatchedListener paramBatchEventDispatchedListener)
  {
    mPostEventDispatchListeners.add(paramBatchEventDispatchedListener);
  }
  
  public void addListener(EventDispatcherListener paramEventDispatcherListener)
  {
    mListeners.add(paramEventDispatcherListener);
  }
  
  public void dispatchAllEvents()
  {
    maybePostFrameCallbackFromNonUI();
  }
  
  public void dispatchEvent(Event paramEvent)
  {
    Assertions.assertCondition(paramEvent.isInitialized(), "Dispatched event hasn't been initialized");
    ??? = mListeners.iterator();
    while (((Iterator)???).hasNext()) {
      ((EventDispatcherListener)((Iterator)???).next()).onEventDispatch(paramEvent);
    }
    synchronized (mEventsStagingLock)
    {
      mEventStaging.add(paramEvent);
      Systrace.startAsyncFlow(0L, paramEvent.getEventName(), paramEvent.getUniqueID());
      maybePostFrameCallbackFromNonUI();
      return;
    }
  }
  
  public void onCatalystInstanceDestroyed()
  {
    UiThreadUtil.runOnUiThread(new Runnable()
    {
      public void run()
      {
        EventDispatcher.this.stopFrameCallback();
      }
    });
  }
  
  public void onHostDestroy()
  {
    stopFrameCallback();
  }
  
  public void onHostPause()
  {
    stopFrameCallback();
  }
  
  public void onHostResume()
  {
    maybePostFrameCallbackFromNonUI();
  }
  
  public void registerEventEmitter(int paramInt, RCTEventEmitter paramRCTEventEmitter)
  {
    mReactEventEmitter.register(paramInt, paramRCTEventEmitter);
  }
  
  public void removeBatchEventDispatchedListener(BatchEventDispatchedListener paramBatchEventDispatchedListener)
  {
    mPostEventDispatchListeners.remove(paramBatchEventDispatchedListener);
  }
  
  public void removeListener(EventDispatcherListener paramEventDispatcherListener)
  {
    mListeners.remove(paramEventDispatcherListener);
  }
  
  public void unregisterEventEmitter(int paramInt)
  {
    mReactEventEmitter.unregister(paramInt);
  }
  
  private class DispatchEventsRunnable
    implements Runnable
  {
    private DispatchEventsRunnable() {}
    
    public void run()
    {
      Systrace.beginSection(0L, "DispatchEventsRunnable");
      for (;;)
      {
        try
        {
          Systrace.endAsyncFlow(0L, "ScheduleDispatchFrameCallback", mHasDispatchScheduledCount.getAndIncrement());
          ??? = EventDispatcher.this;
          int j = 0;
          EventDispatcher.access$402((EventDispatcher)???, false);
          Assertions.assertNotNull(mReactEventEmitter);
          int i;
          synchronized (mEventsToDispatchLock)
          {
            if (mEventsToDispatchSize > 0)
            {
              i = j;
              if (mEventsToDispatchSize > 1)
              {
                Arrays.sort(mEventsToDispatch, 0, mEventsToDispatchSize, EventDispatcher.EVENT_COMPARATOR);
                i = j;
              }
              if (i < mEventsToDispatchSize)
              {
                Event localEvent = mEventsToDispatch[i];
                if (localEvent != null)
                {
                  Systrace.endAsyncFlow(0L, localEvent.getEventName(), localEvent.getUniqueID());
                  localEvent.dispatch(mReactEventEmitter);
                  localEvent.dispose();
                }
              }
              else
              {
                EventDispatcher.this.clearEventsToDispatch();
                mEventCookieToLastEventIdx.clear();
              }
            }
            else
            {
              ??? = mPostEventDispatchListeners.iterator();
              if (((Iterator)???).hasNext())
              {
                ((BatchEventDispatchedListener)((Iterator)???).next()).onBatchEventDispatched();
                continue;
              }
              return;
            }
          }
          i += 1;
        }
        finally
        {
          Systrace.endSection(0L);
        }
      }
    }
  }
  
  private class ScheduleDispatchFrameCallback
    extends ChoreographerCompat.FrameCallback
  {
    private volatile boolean mIsPosted = false;
    private boolean mShouldStop = false;
    
    private ScheduleDispatchFrameCallback() {}
    
    private void post()
    {
      ReactChoreographer.getInstance().postFrameCallback(ReactChoreographer.CallbackType.TIMERS_EVENTS, mCurrentFrameCallback);
    }
    
    public void doFrame(long paramLong)
    {
      
      if (mShouldStop) {
        mIsPosted = false;
      } else {
        post();
      }
      Systrace.beginSection(0L, "ScheduleDispatchFrameCallback");
      try
      {
        EventDispatcher.this.moveStagedEventsToDispatchQueue();
        if (!mHasDispatchScheduled)
        {
          EventDispatcher.access$402(EventDispatcher.this, true);
          Systrace.startAsyncFlow(0L, "ScheduleDispatchFrameCallback", mHasDispatchScheduledCount.get());
          mReactContext.runOnJSQueueThread(mDispatchEventsRunnable);
        }
        return;
      }
      finally
      {
        Systrace.endSection(0L);
      }
    }
    
    public void maybePost()
    {
      if (!mIsPosted)
      {
        mIsPosted = true;
        post();
      }
    }
    
    public void maybePostFromNonUI()
    {
      if (mIsPosted) {
        return;
      }
      if (mReactContext.isOnUiQueueThread())
      {
        maybePost();
        return;
      }
      mReactContext.runOnUiQueueThread(new Runnable()
      {
        public void run()
        {
          maybePost();
        }
      });
    }
    
    public void stop()
    {
      mShouldStop = true;
    }
  }
}
