package com.facebook.react.uimanager;

import android.os.SystemClock;
import android.view.View;
import androidx.annotation.GuardedBy;
import androidx.annotation.Nullable;
import com.facebook.common.logging.FLog;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.GuardedRunnable;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.SoftAssertions;
import com.facebook.react.modules.core.ReactChoreographer;
import com.facebook.react.modules.core.ReactChoreographer.CallbackType;
import com.facebook.react.uimanager.debug.NotThreadSafeViewHierarchyUpdateDebugListener;
import com.facebook.react.uimanager.events.EventDispatcher;
import com.facebook.systrace.Systrace;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public class UIViewOperationQueue
{
  public static final int DEFAULT_MIN_TIME_LEFT_IN_FRAME_FOR_NONBATCHED_OPERATION_MS = 8;
  private final Object mDispatchRunnablesLock = new Object();
  private final DispatchUIFrameCallback mDispatchUIFrameCallback;
  @GuardedBy("mDispatchRunnablesLock")
  private ArrayList<Runnable> mDispatchUIRunnables = new ArrayList();
  private boolean mIsDispatchUIFrameCallbackEnqueued = false;
  private boolean mIsInIllegalUIState = false;
  private boolean mIsProfilingNextBatch = false;
  private final int[] mMeasureBuffer = new int[4];
  private final NativeViewHierarchyManager mNativeViewHierarchyManager;
  private long mNonBatchedExecutionTotalTime;
  @GuardedBy("mNonBatchedOperationsLock")
  private ArrayDeque<UIOperation> mNonBatchedOperations = new ArrayDeque();
  private final Object mNonBatchedOperationsLock = new Object();
  private ArrayList<UIOperation> mOperations = new ArrayList();
  private long mProfiledBatchBatchedExecutionTime;
  private long mProfiledBatchCommitStartTime;
  private long mProfiledBatchDispatchViewUpdatesTime;
  private long mProfiledBatchLayoutTime;
  private long mProfiledBatchNonBatchedExecutionTime;
  private long mProfiledBatchRunStartTime;
  private final ReactApplicationContext mReactApplicationContext;
  private long mThreadCpuTime;
  @Nullable
  private NotThreadSafeViewHierarchyUpdateDebugListener mViewHierarchyUpdateDebugListener;
  
  public UIViewOperationQueue(ReactApplicationContext paramReactApplicationContext, NativeViewHierarchyManager paramNativeViewHierarchyManager, int paramInt)
  {
    mNativeViewHierarchyManager = paramNativeViewHierarchyManager;
    int i = paramInt;
    if (paramInt == -1) {
      i = 8;
    }
    mDispatchUIFrameCallback = new DispatchUIFrameCallback(paramReactApplicationContext, i, null);
    mReactApplicationContext = paramReactApplicationContext;
  }
  
  private void flushPendingBatches()
  {
    if (mIsInIllegalUIState)
    {
      FLog.w("ReactNative", "Not flushing pending UI operations because of previously thrown Exception");
      return;
    }
    synchronized (mDispatchRunnablesLock)
    {
      if (!mDispatchUIRunnables.isEmpty())
      {
        ArrayList localArrayList = mDispatchUIRunnables;
        mDispatchUIRunnables = new ArrayList();
        long l = SystemClock.uptimeMillis();
        ??? = localArrayList.iterator();
        while (((Iterator)???).hasNext()) {
          ((Runnable)((Iterator)???).next()).run();
        }
        if (mIsProfilingNextBatch)
        {
          mProfiledBatchBatchedExecutionTime = (SystemClock.uptimeMillis() - l);
          mProfiledBatchNonBatchedExecutionTime = mNonBatchedExecutionTotalTime;
          mIsProfilingNextBatch = false;
          Systrace.beginAsyncSection(0L, "batchedExecutionTime", 0, 1000000L * l);
          Systrace.endAsyncSection(0L, "batchedExecutionTime", 0);
        }
        mNonBatchedExecutionTotalTime = 0L;
        return;
      }
      return;
    }
  }
  
  public void addRootView(int paramInt, View paramView)
  {
    mNativeViewHierarchyManager.addRootView(paramInt, paramView);
  }
  
  /* Error */
  public void dispatchViewUpdates(final int paramInt, final long paramLong1, long paramLong2)
  {
    // Byte code:
    //   0: lconst_0
    //   1: ldc_w 279
    //   4: invokestatic 285	com/facebook/systrace/SystraceMessage:beginSection	(JLjava/lang/String;)Lcom/facebook/systrace/SystraceMessage$Builder;
    //   7: ldc_w 287
    //   10: iload_1
    //   11: invokevirtual 293	com/facebook/systrace/SystraceMessage$Builder:arg	(Ljava/lang/String;I)Lcom/facebook/systrace/SystraceMessage$Builder;
    //   14: invokevirtual 296	com/facebook/systrace/SystraceMessage$Builder:flush	()V
    //   17: invokestatic 233	android/os/SystemClock:uptimeMillis	()J
    //   20: lstore 6
    //   22: invokestatic 299	android/os/SystemClock:currentThreadTimeMillis	()J
    //   25: lstore 8
    //   27: aload_0
    //   28: getfield 142	com/facebook/react/uimanager/UIViewOperationQueue:mOperations	Ljava/util/ArrayList;
    //   31: invokevirtual 227	java/util/ArrayList:isEmpty	()Z
    //   34: istore 10
    //   36: aconst_null
    //   37: astore 12
    //   39: iload 10
    //   41: ifne +210 -> 251
    //   44: aload_0
    //   45: getfield 142	com/facebook/react/uimanager/UIViewOperationQueue:mOperations	Ljava/util/ArrayList;
    //   48: astore 11
    //   50: aload_0
    //   51: new 139	java/util/ArrayList
    //   54: dup
    //   55: invokespecial 140	java/util/ArrayList:<init>	()V
    //   58: putfield 142	com/facebook/react/uimanager/UIViewOperationQueue:mOperations	Ljava/util/ArrayList;
    //   61: goto +3 -> 64
    //   64: aload_0
    //   65: getfield 137	com/facebook/react/uimanager/UIViewOperationQueue:mNonBatchedOperationsLock	Ljava/lang/Object;
    //   68: astore 13
    //   70: aload 13
    //   72: monitorenter
    //   73: aload_0
    //   74: getfield 149	com/facebook/react/uimanager/UIViewOperationQueue:mNonBatchedOperations	Ljava/util/ArrayDeque;
    //   77: invokevirtual 300	java/util/ArrayDeque:isEmpty	()Z
    //   80: ifne +20 -> 100
    //   83: aload_0
    //   84: getfield 149	com/facebook/react/uimanager/UIViewOperationQueue:mNonBatchedOperations	Ljava/util/ArrayDeque;
    //   87: astore 12
    //   89: aload_0
    //   90: new 146	java/util/ArrayDeque
    //   93: dup
    //   94: invokespecial 147	java/util/ArrayDeque:<init>	()V
    //   97: putfield 149	com/facebook/react/uimanager/UIViewOperationQueue:mNonBatchedOperations	Ljava/util/ArrayDeque;
    //   100: aload 13
    //   102: monitorexit
    //   103: aload_0
    //   104: getfield 197	com/facebook/react/uimanager/UIViewOperationQueue:mViewHierarchyUpdateDebugListener	Lcom/facebook/react/uimanager/debug/NotThreadSafeViewHierarchyUpdateDebugListener;
    //   107: ifnull +12 -> 119
    //   110: aload_0
    //   111: getfield 197	com/facebook/react/uimanager/UIViewOperationQueue:mViewHierarchyUpdateDebugListener	Lcom/facebook/react/uimanager/debug/NotThreadSafeViewHierarchyUpdateDebugListener;
    //   114: invokeinterface 305 1 0
    //   119: new 6	com/facebook/react/uimanager/UIViewOperationQueue$1
    //   122: dup
    //   123: aload_0
    //   124: iload_1
    //   125: aload 12
    //   127: aload 11
    //   129: lload_2
    //   130: lload 4
    //   132: lload 6
    //   134: lload 8
    //   136: invokespecial 308	com/facebook/react/uimanager/UIViewOperationQueue$1:<init>	(Lcom/facebook/react/uimanager/UIViewOperationQueue;ILjava/util/ArrayDeque;Ljava/util/ArrayList;JJJJ)V
    //   139: astore 12
    //   141: lconst_0
    //   142: ldc_w 310
    //   145: invokestatic 285	com/facebook/systrace/SystraceMessage:beginSection	(JLjava/lang/String;)Lcom/facebook/systrace/SystraceMessage$Builder;
    //   148: ldc_w 287
    //   151: iload_1
    //   152: invokevirtual 293	com/facebook/systrace/SystraceMessage$Builder:arg	(Ljava/lang/String;I)Lcom/facebook/systrace/SystraceMessage$Builder;
    //   155: invokevirtual 296	com/facebook/systrace/SystraceMessage$Builder:flush	()V
    //   158: aload_0
    //   159: getfield 135	com/facebook/react/uimanager/UIViewOperationQueue:mDispatchRunnablesLock	Ljava/lang/Object;
    //   162: astore 11
    //   164: aload 11
    //   166: monitorenter
    //   167: lconst_0
    //   168: invokestatic 314	com/facebook/systrace/Systrace:endSection	(J)V
    //   171: aload_0
    //   172: getfield 144	com/facebook/react/uimanager/UIViewOperationQueue:mDispatchUIRunnables	Ljava/util/ArrayList;
    //   175: aload 12
    //   177: invokevirtual 318	java/util/ArrayList:add	(Ljava/lang/Object;)Z
    //   180: pop
    //   181: aload 11
    //   183: monitorexit
    //   184: aload_0
    //   185: getfield 151	com/facebook/react/uimanager/UIViewOperationQueue:mIsDispatchUIFrameCallbackEnqueued	Z
    //   188: ifne +18 -> 206
    //   191: new 8	com/facebook/react/uimanager/UIViewOperationQueue$2
    //   194: dup
    //   195: aload_0
    //   196: aload_0
    //   197: getfield 164	com/facebook/react/uimanager/UIViewOperationQueue:mReactApplicationContext	Lcom/facebook/react/bridge/ReactApplicationContext;
    //   200: invokespecial 321	com/facebook/react/uimanager/UIViewOperationQueue$2:<init>	(Lcom/facebook/react/uimanager/UIViewOperationQueue;Lcom/facebook/react/bridge/ReactContext;)V
    //   203: invokestatic 327	com/facebook/react/bridge/UiThreadUtil:runOnUiThread	(Ljava/lang/Runnable;)V
    //   206: lconst_0
    //   207: invokestatic 314	com/facebook/systrace/Systrace:endSection	(J)V
    //   210: return
    //   211: astore 12
    //   213: aload 11
    //   215: monitorexit
    //   216: aload 12
    //   218: athrow
    //   219: astore 11
    //   221: goto +23 -> 244
    //   224: astore 11
    //   226: aload 13
    //   228: monitorexit
    //   229: aload 11
    //   231: athrow
    //   232: astore 11
    //   234: goto +10 -> 244
    //   237: astore 11
    //   239: goto -13 -> 226
    //   242: astore 11
    //   244: lconst_0
    //   245: invokestatic 314	com/facebook/systrace/Systrace:endSection	(J)V
    //   248: aload 11
    //   250: athrow
    //   251: aconst_null
    //   252: astore 11
    //   254: goto -190 -> 64
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	257	0	this	UIViewOperationQueue
    //   0	257	1	paramInt	int
    //   0	257	2	paramLong1	long
    //   0	257	4	paramLong2	long
    //   20	113	6	l1	long
    //   25	110	8	l2	long
    //   34	6	10	bool	boolean
    //   48	166	11	localObject1	Object
    //   219	1	11	localObject2	Object
    //   224	6	11	localObject3	Object
    //   232	1	11	localObject4	Object
    //   237	1	11	localObject5	Object
    //   242	7	11	localObject6	Object
    //   252	1	11	localObject7	Object
    //   37	139	12	localObject8	Object
    //   211	6	12	localObject9	Object
    //   68	159	13	localObject10	Object
    // Exception table:
    //   from	to	target	type
    //   167	184	211	finally
    //   213	216	211	finally
    //   119	141	219	finally
    //   73	100	224	finally
    //   100	103	224	finally
    //   141	167	232	finally
    //   184	206	232	finally
    //   216	219	232	finally
    //   229	232	232	finally
    //   226	229	237	finally
    //   17	36	242	finally
    //   44	61	242	finally
    //   64	73	242	finally
    //   103	119	242	finally
  }
  
  public void enqueueClearJSResponder()
  {
    mOperations.add(new ChangeJSResponderOperation(0, 0, true, false));
  }
  
  public void enqueueConfigureLayoutAnimation(ReadableMap paramReadableMap, Callback paramCallback)
  {
    mOperations.add(new ConfigureLayoutAnimationOperation(paramReadableMap, paramCallback, null));
  }
  
  public void enqueueCreateView(ThemedReactContext paramThemedReactContext, int paramInt, String paramString, @Nullable ReactStylesDiffMap paramReactStylesDiffMap)
  {
    synchronized (mNonBatchedOperationsLock)
    {
      mNonBatchedOperations.addLast(new CreateViewOperation(paramThemedReactContext, paramInt, paramString, paramReactStylesDiffMap));
      return;
    }
  }
  
  public void enqueueDismissPopupMenu()
  {
    mOperations.add(new DismissPopupMenuOperation(null));
  }
  
  @Deprecated
  public void enqueueDispatchCommand(int paramInt1, int paramInt2, @Nullable ReadableArray paramReadableArray)
  {
    mOperations.add(new DispatchCommandOperation(paramInt1, paramInt2, paramReadableArray));
  }
  
  public void enqueueDispatchCommand(int paramInt, String paramString, @Nullable ReadableArray paramReadableArray)
  {
    mOperations.add(new DispatchStringCommandOperation(paramInt, paramString, paramReadableArray));
  }
  
  public void enqueueFindTargetForTouch(int paramInt, float paramFloat1, float paramFloat2, Callback paramCallback)
  {
    mOperations.add(new FindTargetForTouchOperation(paramInt, paramFloat1, paramFloat2, paramCallback, null));
  }
  
  public void enqueueLayoutUpdateFinished(ReactShadowNode paramReactShadowNode, UIImplementation.LayoutUpdateListener paramLayoutUpdateListener)
  {
    mOperations.add(new LayoutUpdateFinishedOperation(paramReactShadowNode, paramLayoutUpdateListener, null));
  }
  
  public void enqueueManageChildren(int paramInt, @Nullable int[] paramArrayOfInt1, @Nullable ViewAtIndex[] paramArrayOfViewAtIndex, @Nullable int[] paramArrayOfInt2, @Nullable int[] paramArrayOfInt3)
  {
    mOperations.add(new ManageChildrenOperation(paramInt, paramArrayOfInt1, paramArrayOfViewAtIndex, paramArrayOfInt2, paramArrayOfInt3));
  }
  
  public void enqueueMeasure(int paramInt, Callback paramCallback)
  {
    mOperations.add(new MeasureOperation(paramInt, paramCallback, null));
  }
  
  public void enqueueMeasureInWindow(int paramInt, Callback paramCallback)
  {
    mOperations.add(new MeasureInWindowOperation(paramInt, paramCallback, null));
  }
  
  public void enqueueOnLayoutEvent(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5)
  {
    mOperations.add(new EmitOnLayoutEventOperation(paramInt1, paramInt2, paramInt3, paramInt4, paramInt5));
  }
  
  public void enqueueRemoveRootView(int paramInt)
  {
    mOperations.add(new RemoveRootViewOperation(paramInt));
  }
  
  public void enqueueSendAccessibilityEvent(int paramInt1, int paramInt2)
  {
    mOperations.add(new SendAccessibilityEvent(paramInt1, paramInt2, null));
  }
  
  public void enqueueSetChildren(int paramInt, ReadableArray paramReadableArray)
  {
    mOperations.add(new SetChildrenOperation(paramInt, paramReadableArray));
  }
  
  public void enqueueSetJSResponder(int paramInt1, int paramInt2, boolean paramBoolean)
  {
    mOperations.add(new ChangeJSResponderOperation(paramInt1, paramInt2, false, paramBoolean));
  }
  
  public void enqueueSetLayoutAnimationEnabled(boolean paramBoolean)
  {
    mOperations.add(new SetLayoutAnimationEnabledOperation(paramBoolean, null));
  }
  
  public void enqueueShowPopupMenu(int paramInt, ReadableArray paramReadableArray, Callback paramCallback1, Callback paramCallback2)
  {
    mOperations.add(new ShowPopupMenuOperation(paramInt, paramReadableArray, paramCallback1, paramCallback2));
  }
  
  public void enqueueUIBlock(UIBlock paramUIBlock)
  {
    mOperations.add(new UIBlockOperation(paramUIBlock));
  }
  
  protected void enqueueUIOperation(UIOperation paramUIOperation)
  {
    SoftAssertions.assertNotNull(paramUIOperation);
    mOperations.add(paramUIOperation);
  }
  
  public void enqueueUpdateExtraData(int paramInt, Object paramObject)
  {
    mOperations.add(new UpdateViewExtraData(paramInt, paramObject));
  }
  
  public void enqueueUpdateInstanceHandle(int paramInt, long paramLong)
  {
    mOperations.add(new UpdateInstanceHandleOperation(paramInt, paramLong, null));
  }
  
  public void enqueueUpdateLayout(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6)
  {
    mOperations.add(new UpdateLayoutOperation(paramInt1, paramInt2, paramInt3, paramInt4, paramInt5, paramInt6));
  }
  
  public void enqueueUpdateProperties(int paramInt, String paramString, ReactStylesDiffMap paramReactStylesDiffMap)
  {
    mOperations.add(new UpdatePropertiesOperation(paramInt, paramReactStylesDiffMap, null));
  }
  
  NativeViewHierarchyManager getNativeViewHierarchyManager()
  {
    return mNativeViewHierarchyManager;
  }
  
  public Map<String, Long> getProfiledBatchPerfCounters()
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("CommitStartTime", Long.valueOf(mProfiledBatchCommitStartTime));
    localHashMap.put("LayoutTime", Long.valueOf(mProfiledBatchLayoutTime));
    localHashMap.put("DispatchViewUpdatesTime", Long.valueOf(mProfiledBatchDispatchViewUpdatesTime));
    localHashMap.put("RunStartTime", Long.valueOf(mProfiledBatchRunStartTime));
    localHashMap.put("BatchedExecutionTime", Long.valueOf(mProfiledBatchBatchedExecutionTime));
    localHashMap.put("NonBatchedExecutionTime", Long.valueOf(mProfiledBatchNonBatchedExecutionTime));
    localHashMap.put("NativeModulesThreadCpuTime", Long.valueOf(mThreadCpuTime));
    return localHashMap;
  }
  
  public boolean isEmpty()
  {
    return mOperations.isEmpty();
  }
  
  void pauseFrameCallback()
  {
    mIsDispatchUIFrameCallbackEnqueued = false;
    ReactChoreographer.getInstance().removeFrameCallback(ReactChoreographer.CallbackType.DISPATCH_UI, mDispatchUIFrameCallback);
    flushPendingBatches();
  }
  
  public void prependUIBlock(UIBlock paramUIBlock)
  {
    mOperations.add(0, new UIBlockOperation(paramUIBlock));
  }
  
  public void profileNextBatch()
  {
    mIsProfilingNextBatch = true;
    mProfiledBatchCommitStartTime = 0L;
  }
  
  void resumeFrameCallback()
  {
    mIsDispatchUIFrameCallbackEnqueued = true;
    ReactChoreographer.getInstance().postFrameCallback(ReactChoreographer.CallbackType.DISPATCH_UI, mDispatchUIFrameCallback);
  }
  
  public void setViewHierarchyUpdateDebugListener(@Nullable NotThreadSafeViewHierarchyUpdateDebugListener paramNotThreadSafeViewHierarchyUpdateDebugListener)
  {
    mViewHierarchyUpdateDebugListener = paramNotThreadSafeViewHierarchyUpdateDebugListener;
  }
  
  private static abstract class AnimationOperation
    implements UIViewOperationQueue.UIOperation
  {
    protected final int mAnimationID;
    
    public AnimationOperation(int paramInt)
    {
      mAnimationID = paramInt;
    }
  }
  
  private final class ChangeJSResponderOperation
    extends UIViewOperationQueue.ViewOperation
  {
    private final boolean mBlockNativeResponder;
    private final boolean mClearResponder;
    private final int mInitialTag;
    
    public ChangeJSResponderOperation(int paramInt1, int paramInt2, boolean paramBoolean1, boolean paramBoolean2)
    {
      super(paramInt1);
      mInitialTag = paramInt2;
      mClearResponder = paramBoolean1;
      mBlockNativeResponder = paramBoolean2;
    }
    
    public void execute()
    {
      if (!mClearResponder)
      {
        mNativeViewHierarchyManager.setJSResponder(mTag, mInitialTag, mBlockNativeResponder);
        return;
      }
      mNativeViewHierarchyManager.clearJSResponder();
    }
  }
  
  private class ConfigureLayoutAnimationOperation
    implements UIViewOperationQueue.UIOperation
  {
    private final Callback mAnimationComplete;
    private final ReadableMap mConfig;
    
    private ConfigureLayoutAnimationOperation(ReadableMap paramReadableMap, Callback paramCallback)
    {
      mConfig = paramReadableMap;
      mAnimationComplete = paramCallback;
    }
    
    public void execute()
    {
      mNativeViewHierarchyManager.configureLayoutAnimation(mConfig, mAnimationComplete);
    }
  }
  
  private final class CreateViewOperation
    extends UIViewOperationQueue.ViewOperation
  {
    private final String mClassName;
    @Nullable
    private final ReactStylesDiffMap mInitialProps;
    private final ThemedReactContext mThemedContext;
    
    public CreateViewOperation(ThemedReactContext paramThemedReactContext, int paramInt, @Nullable String paramString, ReactStylesDiffMap paramReactStylesDiffMap)
    {
      super(paramInt);
      mThemedContext = paramThemedReactContext;
      mClassName = paramString;
      mInitialProps = paramReactStylesDiffMap;
      Systrace.startAsyncFlow(0L, "createView", mTag);
    }
    
    public void execute()
    {
      Systrace.endAsyncFlow(0L, "createView", mTag);
      mNativeViewHierarchyManager.createView(mThemedContext, mTag, mClassName, mInitialProps);
    }
  }
  
  private final class DismissPopupMenuOperation
    implements UIViewOperationQueue.UIOperation
  {
    private DismissPopupMenuOperation() {}
    
    public void execute()
    {
      mNativeViewHierarchyManager.dismissPopupMenu();
    }
  }
  
  @Deprecated
  private final class DispatchCommandOperation
    extends UIViewOperationQueue.ViewOperation
  {
    @Nullable
    private final ReadableArray mArgs;
    private final int mCommand;
    
    public DispatchCommandOperation(int paramInt1, @Nullable int paramInt2, ReadableArray paramReadableArray)
    {
      super(paramInt1);
      mCommand = paramInt2;
      mArgs = paramReadableArray;
    }
    
    public void execute()
    {
      mNativeViewHierarchyManager.dispatchCommand(mTag, mCommand, mArgs);
    }
  }
  
  private final class DispatchStringCommandOperation
    extends UIViewOperationQueue.ViewOperation
  {
    @Nullable
    private final ReadableArray mArgs;
    private final String mCommand;
    
    public DispatchStringCommandOperation(int paramInt, @Nullable String paramString, ReadableArray paramReadableArray)
    {
      super(paramInt);
      mCommand = paramString;
      mArgs = paramReadableArray;
    }
    
    public void execute()
    {
      mNativeViewHierarchyManager.dispatchCommand(mTag, mCommand, mArgs);
    }
  }
  
  private class DispatchUIFrameCallback
    extends GuardedFrameCallback
  {
    private static final int FRAME_TIME_MS = 16;
    private final int mMinTimeLeftInFrameForNonBatchedOperationMs;
    
    private DispatchUIFrameCallback(ReactContext paramReactContext, int paramInt)
    {
      super();
      mMinTimeLeftInFrameForNonBatchedOperationMs = paramInt;
    }
    
    private void dispatchPendingNonBatchedOperations(long paramLong)
    {
      for (;;)
      {
        if (16L - (System.nanoTime() - paramLong) / 1000000L < mMinTimeLeftInFrameForNonBatchedOperationMs) {
          return;
        }
        synchronized (mNonBatchedOperationsLock)
        {
          if (mNonBatchedOperations.isEmpty()) {
            return;
          }
          UIViewOperationQueue.UIOperation localUIOperation = (UIViewOperationQueue.UIOperation)mNonBatchedOperations.pollFirst();
          try
          {
            long l = SystemClock.uptimeMillis();
            localUIOperation.execute();
            UIViewOperationQueue.access$2502(UIViewOperationQueue.this, mNonBatchedExecutionTotalTime + (SystemClock.uptimeMillis() - l));
          }
          catch (Exception localException)
          {
            UIViewOperationQueue.access$2102(UIViewOperationQueue.this, true);
            throw localException;
          }
        }
      }
    }
    
    public void doFrameGuarded(long paramLong)
    {
      if (mIsInIllegalUIState)
      {
        FLog.w("ReactNative", "Not flushing pending UI operations because of previously thrown Exception");
        return;
      }
      Systrace.beginSection(0L, "dispatchNonBatchedUIOperations");
      try
      {
        dispatchPendingNonBatchedOperations(paramLong);
        Systrace.endSection(0L);
        UIViewOperationQueue.this.flushPendingBatches();
        ReactChoreographer.getInstance().postFrameCallback(ReactChoreographer.CallbackType.DISPATCH_UI, this);
        return;
      }
      finally
      {
        Systrace.endSection(0L);
      }
    }
  }
  
  private final class EmitOnLayoutEventOperation
    extends UIViewOperationQueue.ViewOperation
  {
    private final int mScreenHeight;
    private final int mScreenWidth;
    private final int mScreenX;
    private final int mScreenY;
    
    public EmitOnLayoutEventOperation(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5)
    {
      super(paramInt1);
      mScreenX = paramInt2;
      mScreenY = paramInt3;
      mScreenWidth = paramInt4;
      mScreenHeight = paramInt5;
    }
    
    public void execute()
    {
      ((UIManagerModule)mReactApplicationContext.getNativeModule(UIManagerModule.class)).getEventDispatcher().dispatchEvent(OnLayoutEvent.obtain(mTag, mScreenX, mScreenY, mScreenWidth, mScreenHeight));
    }
  }
  
  private final class FindTargetForTouchOperation
    implements UIViewOperationQueue.UIOperation
  {
    private final Callback mCallback;
    private final int mReactTag;
    private final float mTargetX;
    private final float mTargetY;
    
    private FindTargetForTouchOperation(int paramInt, float paramFloat1, float paramFloat2, Callback paramCallback)
    {
      mReactTag = paramInt;
      mTargetX = paramFloat1;
      mTargetY = paramFloat2;
      mCallback = paramCallback;
    }
    
    public void execute()
    {
      try
      {
        mNativeViewHierarchyManager.measure(mReactTag, mMeasureBuffer);
        f1 = mMeasureBuffer[0];
        f2 = mMeasureBuffer[1];
        i = mNativeViewHierarchyManager.findTargetTagForTouch(mReactTag, mTargetX, mTargetY);
      }
      catch (IllegalViewOperationException localIllegalViewOperationException1)
      {
        float f1;
        float f2;
        int i;
        float f3;
        float f4;
        label198:
        for (;;) {}
      }
      try
      {
        mNativeViewHierarchyManager.measure(i, mMeasureBuffer);
        f1 = PixelUtil.toDIPFromPixel(mMeasureBuffer[0] - f1);
        f2 = PixelUtil.toDIPFromPixel(mMeasureBuffer[1] - f2);
        f3 = PixelUtil.toDIPFromPixel(mMeasureBuffer[2]);
        f4 = PixelUtil.toDIPFromPixel(mMeasureBuffer[3]);
        mCallback.invoke(new Object[] { Integer.valueOf(i), Float.valueOf(f1), Float.valueOf(f2), Float.valueOf(f3), Float.valueOf(f4) });
        return;
      }
      catch (IllegalViewOperationException localIllegalViewOperationException2)
      {
        break label198;
      }
      mCallback.invoke(new Object[0]);
      return;
      mCallback.invoke(new Object[0]);
    }
  }
  
  private final class LayoutUpdateFinishedOperation
    implements UIViewOperationQueue.UIOperation
  {
    private final UIImplementation.LayoutUpdateListener mListener;
    private final ReactShadowNode mNode;
    
    private LayoutUpdateFinishedOperation(ReactShadowNode paramReactShadowNode, UIImplementation.LayoutUpdateListener paramLayoutUpdateListener)
    {
      mNode = paramReactShadowNode;
      mListener = paramLayoutUpdateListener;
    }
    
    public void execute()
    {
      mListener.onLayoutUpdated(mNode);
    }
  }
  
  private final class ManageChildrenOperation
    extends UIViewOperationQueue.ViewOperation
  {
    @Nullable
    private final int[] mIndicesToDelete;
    @Nullable
    private final int[] mIndicesToRemove;
    @Nullable
    private final int[] mTagsToDelete;
    @Nullable
    private final ViewAtIndex[] mViewsToAdd;
    
    public ManageChildrenOperation(@Nullable int paramInt, @Nullable int[] paramArrayOfInt1, @Nullable ViewAtIndex[] paramArrayOfViewAtIndex, @Nullable int[] paramArrayOfInt2, int[] paramArrayOfInt3)
    {
      super(paramInt);
      mIndicesToRemove = paramArrayOfInt1;
      mViewsToAdd = paramArrayOfViewAtIndex;
      mTagsToDelete = paramArrayOfInt2;
      mIndicesToDelete = paramArrayOfInt3;
    }
    
    public void execute()
    {
      mNativeViewHierarchyManager.manageChildren(mTag, mIndicesToRemove, mViewsToAdd, mTagsToDelete, mIndicesToDelete);
    }
  }
  
  private final class MeasureInWindowOperation
    implements UIViewOperationQueue.UIOperation
  {
    private final Callback mCallback;
    private final int mReactTag;
    
    private MeasureInWindowOperation(int paramInt, Callback paramCallback)
    {
      mReactTag = paramInt;
      mCallback = paramCallback;
    }
    
    public void execute()
    {
      try
      {
        mNativeViewHierarchyManager.measureInWindow(mReactTag, mMeasureBuffer);
        float f1 = PixelUtil.toDIPFromPixel(mMeasureBuffer[0]);
        float f2 = PixelUtil.toDIPFromPixel(mMeasureBuffer[1]);
        float f3 = PixelUtil.toDIPFromPixel(mMeasureBuffer[2]);
        float f4 = PixelUtil.toDIPFromPixel(mMeasureBuffer[3]);
        mCallback.invoke(new Object[] { Float.valueOf(f1), Float.valueOf(f2), Float.valueOf(f3), Float.valueOf(f4) });
        return;
      }
      catch (NoSuchNativeViewException localNoSuchNativeViewException)
      {
        for (;;) {}
      }
      mCallback.invoke(new Object[0]);
    }
  }
  
  private final class MeasureOperation
    implements UIViewOperationQueue.UIOperation
  {
    private final Callback mCallback;
    private final int mReactTag;
    
    private MeasureOperation(int paramInt, Callback paramCallback)
    {
      mReactTag = paramInt;
      mCallback = paramCallback;
    }
    
    public void execute()
    {
      try
      {
        mNativeViewHierarchyManager.measure(mReactTag, mMeasureBuffer);
        float f1 = PixelUtil.toDIPFromPixel(mMeasureBuffer[0]);
        float f2 = PixelUtil.toDIPFromPixel(mMeasureBuffer[1]);
        float f3 = PixelUtil.toDIPFromPixel(mMeasureBuffer[2]);
        float f4 = PixelUtil.toDIPFromPixel(mMeasureBuffer[3]);
        mCallback.invoke(new Object[] { Integer.valueOf(0), Integer.valueOf(0), Float.valueOf(f3), Float.valueOf(f4), Float.valueOf(f1), Float.valueOf(f2) });
        return;
      }
      catch (NoSuchNativeViewException localNoSuchNativeViewException)
      {
        for (;;) {}
      }
      mCallback.invoke(new Object[0]);
    }
  }
  
  private final class RemoveRootViewOperation
    extends UIViewOperationQueue.ViewOperation
  {
    public RemoveRootViewOperation(int paramInt)
    {
      super(paramInt);
    }
    
    public void execute()
    {
      mNativeViewHierarchyManager.removeRootView(mTag);
    }
  }
  
  private final class SendAccessibilityEvent
    extends UIViewOperationQueue.ViewOperation
  {
    private final int mEventType;
    
    private SendAccessibilityEvent(int paramInt1, int paramInt2)
    {
      super(paramInt1);
      mEventType = paramInt2;
    }
    
    public void execute()
    {
      mNativeViewHierarchyManager.sendAccessibilityEvent(mTag, mEventType);
    }
  }
  
  private final class SetChildrenOperation
    extends UIViewOperationQueue.ViewOperation
  {
    private final ReadableArray mChildrenTags;
    
    public SetChildrenOperation(int paramInt, ReadableArray paramReadableArray)
    {
      super(paramInt);
      mChildrenTags = paramReadableArray;
    }
    
    public void execute()
    {
      mNativeViewHierarchyManager.setChildren(mTag, mChildrenTags);
    }
  }
  
  private class SetLayoutAnimationEnabledOperation
    implements UIViewOperationQueue.UIOperation
  {
    private final boolean mEnabled;
    
    private SetLayoutAnimationEnabledOperation(boolean paramBoolean)
    {
      mEnabled = paramBoolean;
    }
    
    public void execute()
    {
      mNativeViewHierarchyManager.setLayoutAnimationEnabled(mEnabled);
    }
  }
  
  private final class ShowPopupMenuOperation
    extends UIViewOperationQueue.ViewOperation
  {
    private final Callback mError;
    private final ReadableArray mItems;
    private final Callback mSuccess;
    
    public ShowPopupMenuOperation(int paramInt, ReadableArray paramReadableArray, Callback paramCallback1, Callback paramCallback2)
    {
      super(paramInt);
      mItems = paramReadableArray;
      mError = paramCallback1;
      mSuccess = paramCallback2;
    }
    
    public void execute()
    {
      mNativeViewHierarchyManager.showPopupMenu(mTag, mItems, mSuccess, mError);
    }
  }
  
  private class UIBlockOperation
    implements UIViewOperationQueue.UIOperation
  {
    private final UIBlock mBlock;
    
    public UIBlockOperation(UIBlock paramUIBlock)
    {
      mBlock = paramUIBlock;
    }
    
    public void execute()
    {
      mBlock.execute(mNativeViewHierarchyManager);
    }
  }
  
  public static abstract interface UIOperation
  {
    public abstract void execute();
  }
  
  private final class UpdateInstanceHandleOperation
    extends UIViewOperationQueue.ViewOperation
  {
    private final long mInstanceHandle;
    
    private UpdateInstanceHandleOperation(int paramInt, long paramLong)
    {
      super(paramInt);
      mInstanceHandle = paramLong;
    }
    
    public void execute()
    {
      mNativeViewHierarchyManager.updateInstanceHandle(mTag, mInstanceHandle);
    }
  }
  
  private final class UpdateLayoutOperation
    extends UIViewOperationQueue.ViewOperation
  {
    private final int mHeight;
    private final int mParentTag;
    private final int mWidth;
    private final int mX;
    private final int mY;
    
    public UpdateLayoutOperation(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6)
    {
      super(paramInt2);
      mParentTag = paramInt1;
      mX = paramInt3;
      mY = paramInt4;
      mWidth = paramInt5;
      mHeight = paramInt6;
      Systrace.startAsyncFlow(0L, "updateLayout", mTag);
    }
    
    public void execute()
    {
      Systrace.endAsyncFlow(0L, "updateLayout", mTag);
      mNativeViewHierarchyManager.updateLayout(mParentTag, mTag, mX, mY, mWidth, mHeight);
    }
  }
  
  private final class UpdatePropertiesOperation
    extends UIViewOperationQueue.ViewOperation
  {
    private final ReactStylesDiffMap mProps;
    
    private UpdatePropertiesOperation(int paramInt, ReactStylesDiffMap paramReactStylesDiffMap)
    {
      super(paramInt);
      mProps = paramReactStylesDiffMap;
    }
    
    public void execute()
    {
      mNativeViewHierarchyManager.updateProperties(mTag, mProps);
    }
  }
  
  private final class UpdateViewExtraData
    extends UIViewOperationQueue.ViewOperation
  {
    private final Object mExtraData;
    
    public UpdateViewExtraData(int paramInt, Object paramObject)
    {
      super(paramInt);
      mExtraData = paramObject;
    }
    
    public void execute()
    {
      mNativeViewHierarchyManager.updateViewExtraData(mTag, mExtraData);
    }
  }
  
  private abstract class ViewOperation
    implements UIViewOperationQueue.UIOperation
  {
    public int mTag;
    
    public ViewOperation(int paramInt)
    {
      mTag = paramInt;
    }
  }
}
