package com.facebook.react.uimanager;

import com.facebook.react.bridge.ReadableMap;
import java.util.Arrays;
import java.util.HashSet;

public class ViewProps
{
  public static final String ACCESSIBILITY_ACTIONS = "accessibilityActions";
  public static final String ACCESSIBILITY_HINT = "accessibilityHint";
  public static final String ACCESSIBILITY_LABEL = "accessibilityLabel";
  public static final String ACCESSIBILITY_LIVE_REGION = "accessibilityLiveRegion";
  public static final String ACCESSIBILITY_ROLE = "accessibilityRole";
  public static final String ACCESSIBILITY_STATE = "accessibilityState";
  public static final String ACCESSIBILITY_STATES = "accessibilityStates";
  public static final String ALIGN_CONTENT = "alignContent";
  public static final String ALIGN_ITEMS = "alignItems";
  public static final String ALIGN_SELF = "alignSelf";
  public static final String ALLOW_FONT_SCALING = "allowFontScaling";
  public static final String ASPECT_RATIO = "aspectRatio";
  public static final String AUTO = "auto";
  public static final String BACKGROUND_COLOR = "backgroundColor";
  public static final String BORDER_BOTTOM_COLOR = "borderBottomColor";
  public static final String BORDER_BOTTOM_END_RADIUS = "borderBottomEndRadius";
  public static final String BORDER_BOTTOM_LEFT_RADIUS = "borderBottomLeftRadius";
  public static final String BORDER_BOTTOM_RIGHT_RADIUS = "borderBottomRightRadius";
  public static final String BORDER_BOTTOM_START_RADIUS = "borderBottomStartRadius";
  public static final String BORDER_BOTTOM_WIDTH = "borderBottomWidth";
  public static final String BORDER_COLOR = "borderColor";
  public static final String BORDER_END_COLOR = "borderEndColor";
  public static final String BORDER_END_WIDTH = "borderEndWidth";
  public static final String BORDER_LEFT_COLOR = "borderLeftColor";
  public static final String BORDER_LEFT_WIDTH = "borderLeftWidth";
  public static final String BORDER_RADIUS = "borderRadius";
  public static final String BORDER_RIGHT_COLOR = "borderRightColor";
  public static final String BORDER_RIGHT_WIDTH = "borderRightWidth";
  public static final int[] BORDER_SPACING_TYPES = { 8, 4, 5, 1, 3, 0, 2 };
  public static final String BORDER_START_COLOR = "borderStartColor";
  public static final String BORDER_START_WIDTH = "borderStartWidth";
  public static final String BORDER_TOP_COLOR = "borderTopColor";
  public static final String BORDER_TOP_END_RADIUS = "borderTopEndRadius";
  public static final String BORDER_TOP_LEFT_RADIUS = "borderTopLeftRadius";
  public static final String BORDER_TOP_RIGHT_RADIUS = "borderTopRightRadius";
  public static final String BORDER_TOP_START_RADIUS = "borderTopStartRadius";
  public static final String BORDER_TOP_WIDTH = "borderTopWidth";
  public static final String BORDER_WIDTH = "borderWidth";
  public static final String BOTTOM = "bottom";
  public static final String BOX_NONE = "box-none";
  public static final String COLLAPSABLE = "collapsable";
  public static final String COLOR = "color";
  public static final String DISPLAY = "display";
  public static final String ELEVATION = "elevation";
  public static final String ELLIPSIZE_MODE = "ellipsizeMode";
  public static final String ENABLED = "enabled";
  public static final String END = "end";
  public static final String FLEX = "flex";
  public static final String FLEX_BASIS = "flexBasis";
  public static final String FLEX_DIRECTION = "flexDirection";
  public static final String FLEX_GROW = "flexGrow";
  public static final String FLEX_SHRINK = "flexShrink";
  public static final String FLEX_WRAP = "flexWrap";
  public static final String FONT_FAMILY = "fontFamily";
  public static final String FONT_SIZE = "fontSize";
  public static final String FONT_STYLE = "fontStyle";
  public static final String FONT_WEIGHT = "fontWeight";
  public static final String HEIGHT = "height";
  public static final String HIDDEN = "hidden";
  public static final String IMPORTANT_FOR_ACCESSIBILITY = "importantForAccessibility";
  public static final String INCLUDE_FONT_PADDING = "includeFontPadding";
  public static final String JUSTIFY_CONTENT = "justifyContent";
  private static final HashSet<String> LAYOUT_ONLY_PROPS = new HashSet(Arrays.asList(new String[] { "alignSelf", "alignItems", "collapsable", "flex", "flexBasis", "flexDirection", "flexGrow", "flexShrink", "flexWrap", "justifyContent", "alignContent", "display", "position", "right", "top", "bottom", "left", "start", "end", "width", "height", "minWidth", "maxWidth", "minHeight", "maxHeight", "margin", "marginVertical", "marginHorizontal", "marginLeft", "marginRight", "marginTop", "marginBottom", "marginStart", "marginEnd", "padding", "paddingVertical", "paddingHorizontal", "paddingLeft", "paddingRight", "paddingTop", "paddingBottom", "paddingStart", "paddingEnd" }));
  public static final String LEFT = "left";
  public static final String LETTER_SPACING = "letterSpacing";
  public static final String LINE_HEIGHT = "lineHeight";
  public static final String MARGIN = "margin";
  public static final String MARGIN_BOTTOM = "marginBottom";
  public static final String MARGIN_END = "marginEnd";
  public static final String MARGIN_HORIZONTAL = "marginHorizontal";
  public static final String MARGIN_LEFT = "marginLeft";
  public static final String MARGIN_RIGHT = "marginRight";
  public static final String MARGIN_START = "marginStart";
  public static final String MARGIN_TOP = "marginTop";
  public static final String MARGIN_VERTICAL = "marginVertical";
  public static final String MAX_FONT_SIZE_MULTIPLIER = "maxFontSizeMultiplier";
  public static final String MAX_HEIGHT = "maxHeight";
  public static final String MAX_WIDTH = "maxWidth";
  public static final String MIN_HEIGHT = "minHeight";
  public static final String MIN_WIDTH = "minWidth";
  public static final String NATIVE_ID = "nativeID";
  public static final String NEEDS_OFFSCREEN_ALPHA_COMPOSITING = "needsOffscreenAlphaCompositing";
  public static final String NONE = "none";
  public static final String NUMBER_OF_LINES = "numberOfLines";
  public static final String ON = "on";
  public static final String ON_LAYOUT = "onLayout";
  public static final String OPACITY = "opacity";
  public static final String OVERFLOW = "overflow";
  public static final String PADDING = "padding";
  public static final String PADDING_BOTTOM = "paddingBottom";
  public static final String PADDING_END = "paddingEnd";
  public static final String PADDING_HORIZONTAL = "paddingHorizontal";
  public static final String PADDING_LEFT = "paddingLeft";
  public static final int[] PADDING_MARGIN_SPACING_TYPES = { 8, 7, 6, 4, 5, 1, 3, 0, 2 };
  public static final String PADDING_RIGHT = "paddingRight";
  public static final String PADDING_START = "paddingStart";
  public static final String PADDING_TOP = "paddingTop";
  public static final String PADDING_VERTICAL = "paddingVertical";
  public static final String POINTER_EVENTS = "pointerEvents";
  public static final String POSITION = "position";
  public static final int[] POSITION_SPACING_TYPES = { 4, 5, 1, 3 };
  public static final String RENDER_TO_HARDWARE_TEXTURE = "renderToHardwareTextureAndroid";
  public static final String RESIZE_METHOD = "resizeMethod";
  public static final String RESIZE_MODE = "resizeMode";
  public static final String RIGHT = "right";
  public static final String ROTATION = "rotation";
  public static final String SCALE_X = "scaleX";
  public static final String SCALE_Y = "scaleY";
  public static final String SCROLL = "scroll";
  public static final String START = "start";
  public static final String TEST_ID = "testID";
  public static final String TEXT_ALIGN = "textAlign";
  public static final String TEXT_ALIGN_VERTICAL = "textAlignVertical";
  public static final String TEXT_BREAK_STRATEGY = "textBreakStrategy";
  public static final String TEXT_DECORATION_LINE = "textDecorationLine";
  public static final String TOP = "top";
  public static final String TRANSFORM = "transform";
  public static final String TRANSLATE_X = "translateX";
  public static final String TRANSLATE_Y = "translateY";
  public static final String VIEW_CLASS_NAME = "RCTView";
  public static final String VISIBLE = "visible";
  public static final String WIDTH = "width";
  public static final String Z_INDEX = "zIndex";
  
  public ViewProps() {}
  
  public static boolean isLayoutOnly(ReadableMap paramReadableMap, String paramString)
  {
    boolean bool9 = LAYOUT_ONLY_PROPS.contains(paramString);
    boolean bool2 = true;
    boolean bool3 = true;
    boolean bool4 = true;
    boolean bool5 = true;
    boolean bool6 = true;
    boolean bool7 = true;
    boolean bool8 = true;
    boolean bool1 = true;
    if (bool9) {
      return true;
    }
    if ("pointerEvents".equals(paramString))
    {
      paramReadableMap = paramReadableMap.getString(paramString);
      if (!"auto".equals(paramReadableMap))
      {
        if ("box-none".equals(paramReadableMap)) {
          return true;
        }
        bool1 = false;
      }
      return bool1;
    }
    switch (paramString.hashCode())
    {
    default: 
      break;
    case 1349188574: 
      if (paramString.equals("borderRadius")) {
        i = 1;
      }
      break;
    case 741115130: 
      if (paramString.equals("borderWidth")) {
        i = 6;
      }
      break;
    case 529642498: 
      if (paramString.equals("overflow")) {
        i = 11;
      }
      break;
    case -223992013: 
      if (paramString.equals("borderLeftWidth")) {
        i = 7;
      }
      break;
    case -242276144: 
      if (paramString.equals("borderLeftColor")) {
        i = 2;
      }
      break;
    case -1267206133: 
      if (paramString.equals("opacity")) {
        i = 0;
      }
      break;
    case -1290574193: 
      if (paramString.equals("borderBottomWidth")) {
        i = 10;
      }
      break;
    case -1308858324: 
      if (paramString.equals("borderBottomColor")) {
        i = 5;
      }
      break;
    case -1452542531: 
      if (paramString.equals("borderTopWidth")) {
        i = 8;
      }
      break;
    case -1470826662: 
      if (paramString.equals("borderTopColor")) {
        i = 4;
      }
      break;
    case -1971292586: 
      if (paramString.equals("borderRightWidth")) {
        i = 9;
      }
      break;
    case -1989576717: 
      if (paramString.equals("borderRightColor")) {
        i = 3;
      }
      break;
    }
    int i = -1;
    switch (i)
    {
    default: 
      return false;
    case 11: 
      bool1 = bool2;
      if (!paramReadableMap.isNull("overflow"))
      {
        if ("visible".equals(paramReadableMap.getString("overflow"))) {
          return true;
        }
        bool1 = false;
      }
      return bool1;
    case 10: 
      bool1 = bool3;
      if (!paramReadableMap.isNull("borderBottomWidth"))
      {
        if (paramReadableMap.getDouble("borderBottomWidth") == 0.0D) {
          return true;
        }
        bool1 = false;
      }
      return bool1;
    case 9: 
      bool1 = bool4;
      if (!paramReadableMap.isNull("borderRightWidth"))
      {
        if (paramReadableMap.getDouble("borderRightWidth") == 0.0D) {
          return true;
        }
        bool1 = false;
      }
      return bool1;
    case 8: 
      bool1 = bool5;
      if (!paramReadableMap.isNull("borderTopWidth"))
      {
        if (paramReadableMap.getDouble("borderTopWidth") == 0.0D) {
          return true;
        }
        bool1 = false;
      }
      return bool1;
    case 7: 
      bool1 = bool6;
      if (!paramReadableMap.isNull("borderLeftWidth"))
      {
        if (paramReadableMap.getDouble("borderLeftWidth") == 0.0D) {
          return true;
        }
        bool1 = false;
      }
      return bool1;
    case 6: 
      bool1 = bool7;
      if (!paramReadableMap.isNull("borderWidth"))
      {
        if (paramReadableMap.getDouble("borderWidth") == 0.0D) {
          return true;
        }
        bool1 = false;
      }
      return bool1;
    case 5: 
      return (!paramReadableMap.isNull("borderBottomColor")) && (paramReadableMap.getInt("borderBottomColor") == 0);
    case 4: 
      return (!paramReadableMap.isNull("borderTopColor")) && (paramReadableMap.getInt("borderTopColor") == 0);
    case 3: 
      return (!paramReadableMap.isNull("borderRightColor")) && (paramReadableMap.getInt("borderRightColor") == 0);
    case 2: 
      return (!paramReadableMap.isNull("borderLeftColor")) && (paramReadableMap.getInt("borderLeftColor") == 0);
    case 1: 
      if ((paramReadableMap.hasKey("backgroundColor")) && (paramReadableMap.getInt("backgroundColor") != 0)) {
        return false;
      }
      return (!paramReadableMap.hasKey("borderWidth")) || (paramReadableMap.isNull("borderWidth")) || (paramReadableMap.getDouble("borderWidth") == 0.0D);
    }
    bool1 = bool8;
    if (!paramReadableMap.isNull("opacity"))
    {
      if (paramReadableMap.getDouble("opacity") == 1.0D) {
        return true;
      }
      bool1 = false;
    }
    return bool1;
  }
}
