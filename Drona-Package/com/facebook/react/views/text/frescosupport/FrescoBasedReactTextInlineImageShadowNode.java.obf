package com.facebook.react.views.text.frescosupport;

import android.content.Context;
import android.content.res.Resources;
import android.net.Uri;
import android.net.Uri.Builder;
import androidx.annotation.Nullable;
import com.facebook.drawee.controller.AbstractDraweeControllerBuilder;
import com.facebook.react.bridge.Dynamic;
import com.facebook.react.bridge.JSApplicationIllegalArgumentException;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableType;
import com.facebook.react.uimanager.ThemedReactContext;
import com.facebook.react.uimanager.annotations.ReactProp;
import com.facebook.react.views.text.ReactTextInlineImageShadowNode;
import com.facebook.react.views.text.TextInlineImageSpan;
import java.util.Locale;

public class FrescoBasedReactTextInlineImageShadowNode
  extends ReactTextInlineImageShadowNode
{
  @Nullable
  private final Object mCallerContext;
  private final AbstractDraweeControllerBuilder mDraweeControllerBuilder;
  private ReadableMap mHeaders;
  private float mHeight = NaN.0F;
  private int mTintColor = 0;
  @Nullable
  private Uri mUri;
  private float mWidth = NaN.0F;
  
  public FrescoBasedReactTextInlineImageShadowNode(AbstractDraweeControllerBuilder paramAbstractDraweeControllerBuilder, @Nullable Object paramObject)
  {
    mDraweeControllerBuilder = paramAbstractDraweeControllerBuilder;
    mCallerContext = paramObject;
  }
  
  @Nullable
  private static Uri getResourceDrawableUri(Context paramContext, @Nullable String paramString)
  {
    if ((paramString != null) && (!paramString.isEmpty()))
    {
      paramString = paramString.toLowerCase(Locale.getDefault()).replace("-", "_");
      int i = paramContext.getResources().getIdentifier(paramString, "drawable", paramContext.getPackageName());
      return new Uri.Builder().scheme("res").path(String.valueOf(i)).build();
    }
    return null;
  }
  
  public TextInlineImageSpan buildInlineImageSpan()
  {
    Resources localResources = getThemedContext().getResources();
    int i = (int)Math.ceil(mWidth);
    return new FrescoBasedReactTextInlineImageSpan(localResources, (int)Math.ceil(mHeight), i, mTintColor, getUri(), getHeaders(), getDraweeControllerBuilder(), getCallerContext());
  }
  
  @Nullable
  public Object getCallerContext()
  {
    return mCallerContext;
  }
  
  public AbstractDraweeControllerBuilder getDraweeControllerBuilder()
  {
    return mDraweeControllerBuilder;
  }
  
  public ReadableMap getHeaders()
  {
    return mHeaders;
  }
  
  @Nullable
  public Uri getUri()
  {
    return mUri;
  }
  
  public boolean isVirtual()
  {
    return true;
  }
  
  @ReactProp(name="headers")
  public void setHeaders(ReadableMap paramReadableMap)
  {
    mHeaders = paramReadableMap;
  }
  
  public void setHeight(Dynamic paramDynamic)
  {
    if (paramDynamic.getType() == ReadableType.Number)
    {
      mHeight = ((float)paramDynamic.asDouble());
      return;
    }
    throw new JSApplicationIllegalArgumentException("Inline images must not have percentage based height");
  }
  
  @ReactProp(name="src")
  public void setSource(@Nullable ReadableArray paramReadableArray)
  {
    String str2 = null;
    ReadableArray localReadableArray = null;
    String str1;
    if ((paramReadableArray != null) && (paramReadableArray.size() != 0)) {
      str1 = paramReadableArray.getMap(0).getString("uri");
    } else {
      str1 = null;
    }
    paramReadableArray = str2;
    if (str1 != null) {}
    for (;;)
    {
      try
      {
        paramReadableArray = Uri.parse(str1);
      }
      catch (Exception paramReadableArray)
      {
        continue;
      }
      try
      {
        str2 = paramReadableArray.getScheme();
        if (str2 != null) {}
      }
      catch (Exception localException) {}
    }
    localReadableArray = paramReadableArray;
    paramReadableArray = localReadableArray;
    if (localReadableArray == null) {
      paramReadableArray = getResourceDrawableUri(getThemedContext(), str1);
    }
    if (paramReadableArray != mUri) {
      markUpdated();
    }
    mUri = paramReadableArray;
  }
  
  @ReactProp(name="tintColor")
  public void setTintColor(int paramInt)
  {
    mTintColor = paramInt;
  }
  
  public void setWidth(Dynamic paramDynamic)
  {
    if (paramDynamic.getType() == ReadableType.Number)
    {
      mWidth = ((float)paramDynamic.asDouble());
      return;
    }
    throw new JSApplicationIllegalArgumentException("Inline images must not have percentage based width");
  }
}
