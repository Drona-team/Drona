package com.facebook.react.views.art;

import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.PorterDuff.Mode;
import android.graphics.SurfaceTexture;
import android.os.Build.VERSION;
import android.view.Surface;
import android.view.TextureView.SurfaceTextureListener;
import androidx.annotation.Nullable;
import com.facebook.common.logging.FLog;
import com.facebook.react.bridge.LifecycleEventListener;
import com.facebook.react.uimanager.LayoutShadowNode;
import com.facebook.react.uimanager.ReactShadowNode;
import com.facebook.react.uimanager.ThemedReactContext;
import com.facebook.react.uimanager.UIViewOperationQueue;
import com.facebook.react.uimanager.annotations.ReactProp;

public class ARTSurfaceViewShadowNode
  extends LayoutShadowNode
  implements TextureView.SurfaceTextureListener, LifecycleEventListener
{
  @Nullable
  private Integer mBackgroundColor;
  @Nullable
  private Surface mSurface;
  
  public ARTSurfaceViewShadowNode() {}
  
  private void drawOutput(boolean paramBoolean)
  {
    if ((mSurface != null) && (mSurface.isValid())) {}
    for (;;)
    {
      int i;
      try
      {
        Canvas localCanvas = mSurface.lockCanvas(null);
        localObject = PorterDuff.Mode.CLEAR;
        i = 0;
        localCanvas.drawColor(0, (PorterDuff.Mode)localObject);
        if (mBackgroundColor != null) {
          localCanvas.drawColor(mBackgroundColor.intValue());
        }
        localObject = new Paint();
        if (i < getChildCount())
        {
          ARTVirtualNode localARTVirtualNode = (ARTVirtualNode)getChildAt(i);
          localARTVirtualNode.draw(localCanvas, (Paint)localObject, 1.0F);
          if (paramBoolean)
          {
            localARTVirtualNode.markUpdated();
            break label182;
          }
          localARTVirtualNode.markUpdateSeen();
          break label182;
        }
        if (mSurface == null) {
          return;
        }
        mSurface.unlockCanvasAndPost(localCanvas);
        return;
      }
      catch (IllegalArgumentException|IllegalStateException localIllegalArgumentException)
      {
        Object localObject = new StringBuilder();
        ((StringBuilder)localObject).append(localIllegalArgumentException.getClass().getSimpleName());
        ((StringBuilder)localObject).append(" in Surface.unlockCanvasAndPost");
        FLog.e("ReactNative", ((StringBuilder)localObject).toString());
        return;
      }
      markChildrenUpdatesSeen(this);
      return;
      label182:
      i += 1;
    }
  }
  
  private void markChildrenUpdatesSeen(ReactShadowNode paramReactShadowNode)
  {
    int i = 0;
    while (i < paramReactShadowNode.getChildCount())
    {
      ReactShadowNode localReactShadowNode = paramReactShadowNode.getChildAt(i);
      localReactShadowNode.markUpdateSeen();
      markChildrenUpdatesSeen(localReactShadowNode);
      i += 1;
    }
  }
  
  public void dispose()
  {
    super.dispose();
    if (Build.VERSION.SDK_INT > 24) {
      getThemedContext().removeLifecycleEventListener(this);
    }
  }
  
  public boolean isVirtual()
  {
    return false;
  }
  
  public boolean isVirtualAnchor()
  {
    return true;
  }
  
  public void onCollectExtraUpdates(UIViewOperationQueue paramUIViewOperationQueue)
  {
    super.onCollectExtraUpdates(paramUIViewOperationQueue);
    drawOutput(false);
    paramUIViewOperationQueue.enqueueUpdateExtraData(getReactTag(), this);
  }
  
  public void onHostDestroy() {}
  
  public void onHostPause() {}
  
  public void onHostResume()
  {
    drawOutput(false);
  }
  
  public void onSurfaceTextureAvailable(SurfaceTexture paramSurfaceTexture, int paramInt1, int paramInt2)
  {
    mSurface = new Surface(paramSurfaceTexture);
    drawOutput(false);
  }
  
  public boolean onSurfaceTextureDestroyed(SurfaceTexture paramSurfaceTexture)
  {
    mSurface.release();
    mSurface = null;
    return true;
  }
  
  public void onSurfaceTextureSizeChanged(SurfaceTexture paramSurfaceTexture, int paramInt1, int paramInt2) {}
  
  public void onSurfaceTextureUpdated(SurfaceTexture paramSurfaceTexture) {}
  
  @ReactProp(customType="Color", name="backgroundColor")
  public void setBackgroundColor(Integer paramInteger)
  {
    mBackgroundColor = paramInteger;
    markUpdated();
  }
  
  public void setThemedContext(ThemedReactContext paramThemedReactContext)
  {
    super.setThemedContext(paramThemedReactContext);
    if (Build.VERSION.SDK_INT > 24) {
      paramThemedReactContext.addLifecycleEventListener(this);
    }
  }
  
  public void setupSurfaceTextureListener(ARTSurfaceView paramARTSurfaceView)
  {
    SurfaceTexture localSurfaceTexture = paramARTSurfaceView.getSurfaceTexture();
    paramARTSurfaceView.setSurfaceTextureListener(this);
    if ((localSurfaceTexture != null) && (mSurface == null))
    {
      mSurface = new Surface(localSurfaceTexture);
      drawOutput(true);
    }
  }
}
