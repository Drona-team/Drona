package com.facebook.imagepipeline.cache;

import bolts.Task;
import com.facebook.cache.common.CacheKey;
import com.facebook.cache.common.WriterCallback;
import com.facebook.cache.disk.FileCache;
import com.facebook.common.internal.Preconditions;
import com.facebook.common.logging.FLog;
import com.facebook.common.memory.PooledByteBufferFactory;
import com.facebook.common.memory.PooledByteStreams;
import com.facebook.common.references.CloseableReference;
import com.facebook.imagepipeline.image.EncodedImage;
import com.facebook.imagepipeline.systrace.FrescoSystrace;
import java.io.Closeable;
import java.io.IOException;
import java.io.OutputStream;
import java.util.concurrent.Callable;
import java.util.concurrent.CancellationException;
import java.util.concurrent.Executor;
import java.util.concurrent.atomic.AtomicBoolean;
import javax.annotation.Nullable;

public class BufferedDiskCache
{
  private static final Class<?> TAG = BufferedDiskCache.class;
  private final FileCache mFileCache;
  private final ImageCacheStatsTracker mImageCacheStatsTracker;
  private final PooledByteBufferFactory mPooledByteBufferFactory;
  private final PooledByteStreams mPooledByteStreams;
  private final Executor mReadExecutor;
  private final StagingArea mStagingArea;
  private final Executor mWriteExecutor;
  
  public BufferedDiskCache(FileCache paramFileCache, PooledByteBufferFactory paramPooledByteBufferFactory, PooledByteStreams paramPooledByteStreams, Executor paramExecutor1, Executor paramExecutor2, ImageCacheStatsTracker paramImageCacheStatsTracker)
  {
    mFileCache = paramFileCache;
    mPooledByteBufferFactory = paramPooledByteBufferFactory;
    mPooledByteStreams = paramPooledByteStreams;
    mReadExecutor = paramExecutor1;
    mWriteExecutor = paramExecutor2;
    mImageCacheStatsTracker = paramImageCacheStatsTracker;
    mStagingArea = StagingArea.getInstance();
  }
  
  private boolean checkInStagingAreaAndFileCache(CacheKey paramCacheKey)
  {
    EncodedImage localEncodedImage = mStagingArea.get(paramCacheKey);
    if (localEncodedImage != null)
    {
      localEncodedImage.close();
      FLog.v(TAG, "Found image for %s in staging area", paramCacheKey.getUriString());
      mImageCacheStatsTracker.onStagingAreaHit(paramCacheKey);
      return true;
    }
    FLog.v(TAG, "Did not find image for %s in staging area", paramCacheKey.getUriString());
    mImageCacheStatsTracker.onStagingAreaMiss();
    try
    {
      boolean bool = mFileCache.hasKey(paramCacheKey);
      return bool;
    }
    catch (Exception paramCacheKey)
    {
      for (;;) {}
    }
    return false;
  }
  
  private Task<Boolean> containsAsync(final CacheKey paramCacheKey)
  {
    try
    {
      Task localTask = Task.call(new Callable()
      {
        public Boolean call()
          throws Exception
        {
          return Boolean.valueOf(BufferedDiskCache.this.checkInStagingAreaAndFileCache(paramCacheKey));
        }
      }, mReadExecutor);
      return localTask;
    }
    catch (Exception localException)
    {
      FLog.w(TAG, localException, "Failed to schedule disk-cache read for %s", new Object[] { paramCacheKey.getUriString() });
      return Task.forError(localException);
    }
  }
  
  private Task<EncodedImage> foundPinnedImage(CacheKey paramCacheKey, EncodedImage paramEncodedImage)
  {
    FLog.v(TAG, "Found image for %s in staging area", paramCacheKey.getUriString());
    mImageCacheStatsTracker.onStagingAreaHit(paramCacheKey);
    return Task.forResult(paramEncodedImage);
  }
  
  private Task<EncodedImage> getAsync(final CacheKey paramCacheKey, final AtomicBoolean paramAtomicBoolean)
  {
    try
    {
      paramAtomicBoolean = Task.call(new Callable()
      {
        @Nullable
        public EncodedImage call()
          throws Exception
        {
          for (;;)
          {
            try
            {
              if (FrescoSystrace.isTracing()) {
                FrescoSystrace.beginSection("BufferedDiskCache#getAsync");
              }
              if (!paramAtomicBoolean.get())
              {
                localObject1 = mStagingArea.get(paramCacheKey);
                if (localObject1 != null)
                {
                  FLog.v(BufferedDiskCache.TAG, "Found image for %s in staging area", paramCacheKey.getUriString());
                  mImageCacheStatsTracker.onStagingAreaHit(paramCacheKey);
                }
                else
                {
                  FLog.v(BufferedDiskCache.TAG, "Did not find image for %s in staging area", paramCacheKey.getUriString());
                  mImageCacheStatsTracker.onStagingAreaMiss();
                }
              }
            }
            finally
            {
              Object localObject1;
              CloseableReference localCloseableReference;
              if (FrescoSystrace.isTracing()) {
                FrescoSystrace.endSection();
              }
            }
            try
            {
              localObject1 = BufferedDiskCache.this.readFromDiskCache(paramCacheKey);
              if (localObject1 == null)
              {
                if (FrescoSystrace.isTracing()) {
                  FrescoSystrace.endSection();
                }
                return null;
              }
              localCloseableReference = CloseableReference.of((Closeable)localObject1);
              try
              {
                localObject1 = new EncodedImage(localCloseableReference);
                CloseableReference.closeSafely(localCloseableReference);
                if (Thread.interrupted())
                {
                  FLog.v(BufferedDiskCache.TAG, "Host thread was interrupted, decreasing reference count");
                  if (localObject1 != null) {
                    ((EncodedImage)localObject1).close();
                  }
                  throw new InterruptedException();
                }
                if (FrescoSystrace.isTracing()) {
                  FrescoSystrace.endSection();
                }
                return localObject1;
              }
              finally
              {
                CloseableReference.closeSafely(localCloseableReference);
              }
            }
            catch (Exception localException) {}
          }
          if (FrescoSystrace.isTracing()) {
            FrescoSystrace.endSection();
          }
          return null;
          throw new CancellationException();
        }
      }, mReadExecutor);
      return paramAtomicBoolean;
    }
    catch (Exception paramAtomicBoolean)
    {
      FLog.w(TAG, paramAtomicBoolean, "Failed to schedule disk-cache read for %s", new Object[] { paramCacheKey.getUriString() });
    }
    return Task.forError(paramAtomicBoolean);
  }
  
  /* Error */
  @Nullable
  private com.facebook.common.memory.PooledByteBuffer readFromDiskCache(CacheKey paramCacheKey)
    throws IOException
  {
    // Byte code:
    //   0: getstatic 36	com/facebook/imagepipeline/cache/BufferedDiskCache:TAG	Ljava/lang/Class;
    //   3: ldc -84
    //   5: aload_1
    //   6: invokeinterface 111 1 0
    //   11: invokestatic 117	com/facebook/common/logging/FLog:v	(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Object;)V
    //   14: aload_0
    //   15: getfield 43	com/facebook/imagepipeline/cache/BufferedDiskCache:mFileCache	Lcom/facebook/cache/disk/FileCache;
    //   18: aload_1
    //   19: invokeinterface 176 2 0
    //   24: astore_3
    //   25: aload_3
    //   26: ifnonnull +28 -> 54
    //   29: getstatic 36	com/facebook/imagepipeline/cache/BufferedDiskCache:TAG	Ljava/lang/Class;
    //   32: ldc -78
    //   34: aload_1
    //   35: invokeinterface 111 1 0
    //   40: invokestatic 117	com/facebook/common/logging/FLog:v	(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Object;)V
    //   43: aload_0
    //   44: getfield 53	com/facebook/imagepipeline/cache/BufferedDiskCache:mImageCacheStatsTracker	Lcom/facebook/imagepipeline/cache/ImageCacheStatsTracker;
    //   47: invokeinterface 181 1 0
    //   52: aconst_null
    //   53: areturn
    //   54: getstatic 36	com/facebook/imagepipeline/cache/BufferedDiskCache:TAG	Ljava/lang/Class;
    //   57: ldc -73
    //   59: aload_1
    //   60: invokeinterface 111 1 0
    //   65: invokestatic 117	com/facebook/common/logging/FLog:v	(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Object;)V
    //   68: aload_0
    //   69: getfield 53	com/facebook/imagepipeline/cache/BufferedDiskCache:mImageCacheStatsTracker	Lcom/facebook/imagepipeline/cache/ImageCacheStatsTracker;
    //   72: aload_1
    //   73: invokeinterface 186 2 0
    //   78: aload_3
    //   79: invokeinterface 192 1 0
    //   84: astore_2
    //   85: aload_0
    //   86: getfield 45	com/facebook/imagepipeline/cache/BufferedDiskCache:mPooledByteBufferFactory	Lcom/facebook/common/memory/PooledByteBufferFactory;
    //   89: aload_2
    //   90: aload_3
    //   91: invokeinterface 196 1 0
    //   96: l2i
    //   97: invokeinterface 202 3 0
    //   102: astore_3
    //   103: aload_2
    //   104: invokevirtual 205	java/io/InputStream:close	()V
    //   107: getstatic 36	com/facebook/imagepipeline/cache/BufferedDiskCache:TAG	Ljava/lang/Class;
    //   110: ldc -49
    //   112: aload_1
    //   113: invokeinterface 111 1 0
    //   118: invokestatic 117	com/facebook/common/logging/FLog:v	(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Object;)V
    //   121: aload_3
    //   122: areturn
    //   123: astore_3
    //   124: aload_2
    //   125: invokevirtual 205	java/io/InputStream:close	()V
    //   128: aload_3
    //   129: athrow
    //   130: astore_2
    //   131: getstatic 36	com/facebook/imagepipeline/cache/BufferedDiskCache:TAG	Ljava/lang/Class;
    //   134: aload_2
    //   135: ldc -47
    //   137: iconst_1
    //   138: anewarray 4	java/lang/Object
    //   141: dup
    //   142: iconst_0
    //   143: aload_1
    //   144: invokeinterface 111 1 0
    //   149: aastore
    //   150: invokestatic 150	com/facebook/common/logging/FLog:w	(Ljava/lang/Class;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V
    //   153: aload_0
    //   154: getfield 53	com/facebook/imagepipeline/cache/BufferedDiskCache:mImageCacheStatsTracker	Lcom/facebook/imagepipeline/cache/ImageCacheStatsTracker;
    //   157: invokeinterface 212 1 0
    //   162: aload_2
    //   163: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	164	0	this	BufferedDiskCache
    //   0	164	1	paramCacheKey	CacheKey
    //   84	41	2	localInputStream	java.io.InputStream
    //   130	33	2	localIOException	IOException
    //   24	98	3	localObject1	Object
    //   123	6	3	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   85	103	123	finally
    //   0	25	130	java/io/IOException
    //   29	52	130	java/io/IOException
    //   54	85	130	java/io/IOException
    //   103	121	130	java/io/IOException
    //   124	130	130	java/io/IOException
  }
  
  private void writeToDiskCache(CacheKey paramCacheKey, final EncodedImage paramEncodedImage)
  {
    FLog.v(TAG, "About to write to disk-cache for key %s", paramCacheKey.getUriString());
    try
    {
      mFileCache.insert(paramCacheKey, new WriterCallback()
      {
        public void write(OutputStream paramAnonymousOutputStream)
          throws IOException
        {
          mPooledByteStreams.copy(paramEncodedImage.getInputStream(), paramAnonymousOutputStream);
        }
      });
      FLog.v(TAG, "Successful disk-cache write for key %s", paramCacheKey.getUriString());
      return;
    }
    catch (IOException paramEncodedImage)
    {
      FLog.w(TAG, paramEncodedImage, "Failed to write to disk-cache for key %s", new Object[] { paramCacheKey.getUriString() });
    }
  }
  
  public Task<Void> clearAll()
  {
    mStagingArea.clearAll();
    try
    {
      Task localTask = Task.call(new Callable()
      {
        public Void call()
          throws Exception
        {
          mStagingArea.clearAll();
          mFileCache.clearAll();
          return null;
        }
      }, mWriteExecutor);
      return localTask;
    }
    catch (Exception localException)
    {
      FLog.w(TAG, localException, "Failed to schedule disk-cache clear", new Object[0]);
      return Task.forError(localException);
    }
  }
  
  public Task<Boolean> contains(CacheKey paramCacheKey)
  {
    if (containsSync(paramCacheKey)) {
      return Task.forResult(Boolean.valueOf(true));
    }
    return containsAsync(paramCacheKey);
  }
  
  public boolean containsSync(CacheKey paramCacheKey)
  {
    return (mStagingArea.containsKey(paramCacheKey)) || (mFileCache.hasKeySync(paramCacheKey));
  }
  
  public boolean diskCheckSync(CacheKey paramCacheKey)
  {
    if (containsSync(paramCacheKey)) {
      return true;
    }
    return checkInStagingAreaAndFileCache(paramCacheKey);
  }
  
  public Task<EncodedImage> get(CacheKey paramCacheKey, AtomicBoolean paramAtomicBoolean)
  {
    try
    {
      if (FrescoSystrace.isTracing()) {
        FrescoSystrace.beginSection("BufferedDiskCache#get");
      }
      EncodedImage localEncodedImage = mStagingArea.get(paramCacheKey);
      if (localEncodedImage != null)
      {
        paramCacheKey = foundPinnedImage(paramCacheKey, localEncodedImage);
        return paramCacheKey;
      }
      paramCacheKey = getAsync(paramCacheKey, paramAtomicBoolean);
      return paramCacheKey;
    }
    finally
    {
      if (FrescoSystrace.isTracing()) {
        FrescoSystrace.endSection();
      }
    }
  }
  
  public long getSize()
  {
    return mFileCache.getSize();
  }
  
  public void put(final CacheKey paramCacheKey, EncodedImage paramEncodedImage)
  {
    try
    {
      if (FrescoSystrace.isTracing()) {
        FrescoSystrace.beginSection("BufferedDiskCache#put");
      }
      Preconditions.checkNotNull(paramCacheKey);
      Preconditions.checkArgument(EncodedImage.isValid(paramEncodedImage));
      mStagingArea.put(paramCacheKey, paramEncodedImage);
      final EncodedImage localEncodedImage = EncodedImage.cloneOrNull(paramEncodedImage);
      try
      {
        mWriteExecutor.execute(new Runnable()
        {
          public void run()
          {
            try
            {
              if (FrescoSystrace.isTracing()) {
                FrescoSystrace.beginSection("BufferedDiskCache#putAsync");
              }
              BufferedDiskCache.this.writeToDiskCache(paramCacheKey, localEncodedImage);
              return;
            }
            finally
            {
              mStagingArea.remove(paramCacheKey, localEncodedImage);
              EncodedImage.closeSafely(localEncodedImage);
              if (FrescoSystrace.isTracing()) {
                FrescoSystrace.endSection();
              }
            }
          }
        });
      }
      catch (Exception localException)
      {
        FLog.w(TAG, localException, "Failed to schedule disk-cache write for %s", new Object[] { paramCacheKey.getUriString() });
        mStagingArea.remove(paramCacheKey, paramEncodedImage);
        EncodedImage.closeSafely(localEncodedImage);
      }
      return;
    }
    finally
    {
      if (FrescoSystrace.isTracing()) {
        FrescoSystrace.endSection();
      }
    }
  }
  
  public Task<Void> remove(final CacheKey paramCacheKey)
  {
    Preconditions.checkNotNull(paramCacheKey);
    mStagingArea.remove(paramCacheKey);
    try
    {
      Task localTask = Task.call(new Callable()
      {
        public Void call()
          throws Exception
        {
          try
          {
            if (FrescoSystrace.isTracing()) {
              FrescoSystrace.beginSection("BufferedDiskCache#remove");
            }
            mStagingArea.remove(paramCacheKey);
            mFileCache.remove(paramCacheKey);
            return null;
          }
          finally
          {
            if (FrescoSystrace.isTracing()) {
              FrescoSystrace.endSection();
            }
          }
        }
      }, mWriteExecutor);
      return localTask;
    }
    catch (Exception localException)
    {
      FLog.w(TAG, localException, "Failed to schedule disk-cache remove for %s", new Object[] { paramCacheKey.getUriString() });
      return Task.forError(localException);
    }
  }
}
