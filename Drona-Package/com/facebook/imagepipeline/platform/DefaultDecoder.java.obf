package com.facebook.imagepipeline.platform;

import android.annotation.TargetApi;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.graphics.ColorSpace;
import android.graphics.Rect;
import android.os.Build.VERSION;
import androidx.core.util.Pools.SynchronizedPool;
import com.facebook.common.internal.Preconditions;
import com.facebook.common.internal.VisibleForTesting;
import com.facebook.common.references.CloseableReference;
import com.facebook.common.streams.LimitedInputStream;
import com.facebook.common.streams.TailAppendingInputStream;
import com.facebook.imagepipeline.image.EncodedImage;
import com.facebook.imagepipeline.memory.BitmapPool;
import java.io.InputStream;
import java.nio.ByteBuffer;
import javax.annotation.Nullable;
import javax.annotation.concurrent.ThreadSafe;

@TargetApi(21)
@ThreadSafe
public abstract class DefaultDecoder
  implements PlatformDecoder
{
  private static final int DECODE_BUFFER_SIZE = 16384;
  private static final byte[] EOI_TAIL = { -1, -39 };
  private static final Class<?> TAG = DefaultDecoder.class;
  private final BitmapPool mBitmapPool;
  @VisibleForTesting
  final Pools.SynchronizedPool<ByteBuffer> mDecodeBuffers;
  @Nullable
  private final PreverificationHelper mPreverificationHelper;
  
  public DefaultDecoder(BitmapPool paramBitmapPool, int paramInt, Pools.SynchronizedPool paramSynchronizedPool)
  {
    PreverificationHelper localPreverificationHelper;
    if (Build.VERSION.SDK_INT >= 26) {
      localPreverificationHelper = new PreverificationHelper();
    } else {
      localPreverificationHelper = null;
    }
    mPreverificationHelper = localPreverificationHelper;
    mBitmapPool = paramBitmapPool;
    mDecodeBuffers = paramSynchronizedPool;
    int i = 0;
    while (i < paramInt)
    {
      mDecodeBuffers.release(ByteBuffer.allocate(16384));
      i += 1;
    }
  }
  
  /* Error */
  private CloseableReference<Bitmap> decodeFromStream(InputStream paramInputStream, BitmapFactory.Options paramOptions, @Nullable Rect paramRect, @Nullable ColorSpace paramColorSpace)
  {
    // Byte code:
    //   0: aload_1
    //   1: invokestatic 80	com/facebook/common/internal/Preconditions:checkNotNull	(Ljava/lang/Object;)Ljava/lang/Object;
    //   4: pop
    //   5: aload_2
    //   6: getfield 85	android/graphics/BitmapFactory$Options:outWidth	I
    //   9: istore 5
    //   11: aload_2
    //   12: getfield 88	android/graphics/BitmapFactory$Options:outHeight	I
    //   15: istore 6
    //   17: aload_3
    //   18: ifnull +25 -> 43
    //   21: aload_3
    //   22: invokevirtual 94	android/graphics/Rect:width	()I
    //   25: aload_2
    //   26: getfield 97	android/graphics/BitmapFactory$Options:inSampleSize	I
    //   29: idiv
    //   30: istore 5
    //   32: aload_3
    //   33: invokevirtual 100	android/graphics/Rect:height	()I
    //   36: aload_2
    //   37: getfield 97	android/graphics/BitmapFactory$Options:inSampleSize	I
    //   40: idiv
    //   41: istore 6
    //   43: getstatic 45	android/os/Build$VERSION:SDK_INT	I
    //   46: bipush 26
    //   48: if_icmplt +30 -> 78
    //   51: aload_0
    //   52: getfield 50	com/facebook/imagepipeline/platform/DefaultDecoder:mPreverificationHelper	Lcom/facebook/imagepipeline/platform/PreverificationHelper;
    //   55: ifnull +23 -> 78
    //   58: aload_0
    //   59: getfield 50	com/facebook/imagepipeline/platform/DefaultDecoder:mPreverificationHelper	Lcom/facebook/imagepipeline/platform/PreverificationHelper;
    //   62: aload_2
    //   63: getfield 104	android/graphics/BitmapFactory$Options:inPreferredConfig	Landroid/graphics/Bitmap$Config;
    //   66: invokevirtual 108	com/facebook/imagepipeline/platform/PreverificationHelper:shouldUseHardwareBitmapConfig	(Landroid/graphics/Bitmap$Config;)Z
    //   69: ifeq +9 -> 78
    //   72: iconst_1
    //   73: istore 7
    //   75: goto +6 -> 81
    //   78: iconst_0
    //   79: istore 7
    //   81: aload_3
    //   82: ifnonnull +19 -> 101
    //   85: iload 7
    //   87: ifeq +14 -> 101
    //   90: aload_2
    //   91: iconst_0
    //   92: putfield 112	android/graphics/BitmapFactory$Options:inMutable	Z
    //   95: aconst_null
    //   96: astore 9
    //   98: goto +51 -> 149
    //   101: aload_3
    //   102: ifnull +15 -> 117
    //   105: iload 7
    //   107: ifeq +10 -> 117
    //   110: aload_2
    //   111: getstatic 117	android/graphics/Bitmap$Config:ARGB_8888	Landroid/graphics/Bitmap$Config;
    //   114: putfield 104	android/graphics/BitmapFactory$Options:inPreferredConfig	Landroid/graphics/Bitmap$Config;
    //   117: aload_0
    //   118: iload 5
    //   120: iload 6
    //   122: aload_2
    //   123: invokevirtual 121	com/facebook/imagepipeline/platform/DefaultDecoder:getBitmapSize	(IILandroid/graphics/BitmapFactory$Options;)I
    //   126: istore 7
    //   128: aload_0
    //   129: getfield 52	com/facebook/imagepipeline/platform/DefaultDecoder:mBitmapPool	Lcom/facebook/imagepipeline/memory/BitmapPool;
    //   132: iload 7
    //   134: invokeinterface 127 2 0
    //   139: checkcast 129	android/graphics/Bitmap
    //   142: astore 9
    //   144: aload 9
    //   146: ifnull +357 -> 503
    //   149: aload_2
    //   150: aload 9
    //   152: putfield 133	android/graphics/BitmapFactory$Options:inBitmap	Landroid/graphics/Bitmap;
    //   155: getstatic 45	android/os/Build$VERSION:SDK_INT	I
    //   158: bipush 26
    //   160: if_icmplt +26 -> 186
    //   163: aload 4
    //   165: astore 8
    //   167: aload 4
    //   169: ifnonnull +11 -> 180
    //   172: getstatic 139	android/graphics/ColorSpace$Named:SRGB	Landroid/graphics/ColorSpace$Named;
    //   175: invokestatic 144	android/graphics/ColorSpace:get	(Landroid/graphics/ColorSpace$Named;)Landroid/graphics/ColorSpace;
    //   178: astore 8
    //   180: aload_2
    //   181: aload 8
    //   183: putfield 148	android/graphics/BitmapFactory$Options:inPreferredColorSpace	Landroid/graphics/ColorSpace;
    //   186: aload_0
    //   187: getfield 54	com/facebook/imagepipeline/platform/DefaultDecoder:mDecodeBuffers	Landroidx/core/util/Pools$SynchronizedPool;
    //   190: invokevirtual 152	androidx/core/util/Pools$SynchronizedPool:acquire	()Ljava/lang/Object;
    //   193: checkcast 56	java/nio/ByteBuffer
    //   196: astore 4
    //   198: aload 4
    //   200: astore 10
    //   202: aload 4
    //   204: ifnonnull +11 -> 215
    //   207: sipush 16384
    //   210: invokestatic 60	java/nio/ByteBuffer:allocate	(I)Ljava/nio/ByteBuffer;
    //   213: astore 10
    //   215: aload_2
    //   216: aload 10
    //   218: invokevirtual 156	java/nio/ByteBuffer:array	()[B
    //   221: putfield 159	android/graphics/BitmapFactory$Options:inTempStorage	[B
    //   224: aload_3
    //   225: ifnull +306 -> 531
    //   228: aload 9
    //   230: ifnull +301 -> 531
    //   233: aload 9
    //   235: iload 5
    //   237: iload 6
    //   239: aload_2
    //   240: getfield 104	android/graphics/BitmapFactory$Options:inPreferredConfig	Landroid/graphics/Bitmap$Config;
    //   243: invokevirtual 163	android/graphics/Bitmap:reconfigure	(IILandroid/graphics/Bitmap$Config;)V
    //   246: aload_1
    //   247: iconst_1
    //   248: invokestatic 169	android/graphics/BitmapRegionDecoder:newInstance	(Ljava/io/InputStream;Z)Landroid/graphics/BitmapRegionDecoder;
    //   251: astore 8
    //   253: aload 8
    //   255: astore 4
    //   257: aload 8
    //   259: aload_3
    //   260: aload_2
    //   261: invokevirtual 173	android/graphics/BitmapRegionDecoder:decodeRegion	(Landroid/graphics/Rect;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;
    //   264: astore 11
    //   266: aload 11
    //   268: astore_3
    //   269: aload 8
    //   271: ifnull +69 -> 340
    //   274: aload 8
    //   276: invokevirtual 176	android/graphics/BitmapRegionDecoder:recycle	()V
    //   279: aload 11
    //   281: astore_3
    //   282: goto +58 -> 340
    //   285: astore_2
    //   286: aconst_null
    //   287: astore 4
    //   289: goto +39 -> 328
    //   292: aconst_null
    //   293: astore 8
    //   295: aload 8
    //   297: astore 4
    //   299: getstatic 31	com/facebook/imagepipeline/platform/DefaultDecoder:TAG	Ljava/lang/Class;
    //   302: ldc -78
    //   304: iconst_1
    //   305: anewarray 4	java/lang/Object
    //   308: dup
    //   309: iconst_0
    //   310: aload_3
    //   311: aastore
    //   312: invokestatic 184	com/facebook/common/logging/FLog:e	(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Object;)V
    //   315: aload 8
    //   317: ifnull +214 -> 531
    //   320: aload 8
    //   322: invokevirtual 176	android/graphics/BitmapRegionDecoder:recycle	()V
    //   325: goto +206 -> 531
    //   328: aload 4
    //   330: ifnull +8 -> 338
    //   333: aload 4
    //   335: invokevirtual 176	android/graphics/BitmapRegionDecoder:recycle	()V
    //   338: aload_2
    //   339: athrow
    //   340: aload_3
    //   341: astore 4
    //   343: aload_3
    //   344: ifnonnull +11 -> 355
    //   347: aload_1
    //   348: aconst_null
    //   349: aload_2
    //   350: invokestatic 190	android/graphics/BitmapFactory:decodeStream	(Ljava/io/InputStream;Landroid/graphics/Rect;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;
    //   353: astore 4
    //   355: aload_0
    //   356: getfield 54	com/facebook/imagepipeline/platform/DefaultDecoder:mDecodeBuffers	Landroidx/core/util/Pools$SynchronizedPool;
    //   359: aload 10
    //   361: invokevirtual 66	androidx/core/util/Pools$SynchronizedPool:release	(Ljava/lang/Object;)Z
    //   364: pop
    //   365: aload 9
    //   367: ifnull +37 -> 404
    //   370: aload 9
    //   372: aload 4
    //   374: if_acmpne +6 -> 380
    //   377: goto +27 -> 404
    //   380: aload_0
    //   381: getfield 52	com/facebook/imagepipeline/platform/DefaultDecoder:mBitmapPool	Lcom/facebook/imagepipeline/memory/BitmapPool;
    //   384: aload 9
    //   386: invokeinterface 193 2 0
    //   391: aload 4
    //   393: invokevirtual 194	android/graphics/Bitmap:recycle	()V
    //   396: new 196	java/lang/IllegalStateException
    //   399: dup
    //   400: invokespecial 197	java/lang/IllegalStateException:<init>	()V
    //   403: athrow
    //   404: aload 4
    //   406: aload_0
    //   407: getfield 52	com/facebook/imagepipeline/platform/DefaultDecoder:mBitmapPool	Lcom/facebook/imagepipeline/memory/BitmapPool;
    //   410: invokestatic 203	com/facebook/common/references/CloseableReference:of	(Ljava/lang/Object;Lcom/facebook/common/references/ResourceReleaser;)Lcom/facebook/common/references/CloseableReference;
    //   413: areturn
    //   414: astore_1
    //   415: goto +76 -> 491
    //   418: astore_1
    //   419: aload 9
    //   421: ifnull +14 -> 435
    //   424: aload_0
    //   425: getfield 52	com/facebook/imagepipeline/platform/DefaultDecoder:mBitmapPool	Lcom/facebook/imagepipeline/memory/BitmapPool;
    //   428: aload 9
    //   430: invokeinterface 193 2 0
    //   435: aload_1
    //   436: athrow
    //   437: astore_2
    //   438: aload 9
    //   440: ifnull +14 -> 454
    //   443: aload_0
    //   444: getfield 52	com/facebook/imagepipeline/platform/DefaultDecoder:mBitmapPool	Lcom/facebook/imagepipeline/memory/BitmapPool;
    //   447: aload 9
    //   449: invokeinterface 193 2 0
    //   454: aload_1
    //   455: invokevirtual 208	java/io/InputStream:reset	()V
    //   458: aload_1
    //   459: invokestatic 211	android/graphics/BitmapFactory:decodeStream	(Ljava/io/InputStream;)Landroid/graphics/Bitmap;
    //   462: astore_1
    //   463: aload_1
    //   464: ifnull +23 -> 487
    //   467: aload_1
    //   468: invokestatic 217	com/facebook/imagepipeline/bitmaps/SimpleBitmapReleaser:getInstance	()Lcom/facebook/imagepipeline/bitmaps/SimpleBitmapReleaser;
    //   471: invokestatic 203	com/facebook/common/references/CloseableReference:of	(Ljava/lang/Object;Lcom/facebook/common/references/ResourceReleaser;)Lcom/facebook/common/references/CloseableReference;
    //   474: astore_1
    //   475: aload_0
    //   476: getfield 54	com/facebook/imagepipeline/platform/DefaultDecoder:mDecodeBuffers	Landroidx/core/util/Pools$SynchronizedPool;
    //   479: aload 10
    //   481: invokevirtual 66	androidx/core/util/Pools$SynchronizedPool:release	(Ljava/lang/Object;)Z
    //   484: pop
    //   485: aload_1
    //   486: areturn
    //   487: aload_2
    //   488: athrow
    //   489: aload_2
    //   490: athrow
    //   491: aload_0
    //   492: getfield 54	com/facebook/imagepipeline/platform/DefaultDecoder:mDecodeBuffers	Landroidx/core/util/Pools$SynchronizedPool;
    //   495: aload 10
    //   497: invokevirtual 66	androidx/core/util/Pools$SynchronizedPool:release	(Ljava/lang/Object;)Z
    //   500: pop
    //   501: aload_1
    //   502: athrow
    //   503: new 219	java/lang/NullPointerException
    //   506: dup
    //   507: ldc -35
    //   509: invokespecial 224	java/lang/NullPointerException:<init>	(Ljava/lang/String;)V
    //   512: athrow
    //   513: astore 4
    //   515: goto -223 -> 292
    //   518: astore 4
    //   520: goto -225 -> 295
    //   523: astore_1
    //   524: goto -35 -> 489
    //   527: astore_2
    //   528: goto -200 -> 328
    //   531: aconst_null
    //   532: astore_3
    //   533: goto -193 -> 340
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	536	0	this	DefaultDecoder
    //   0	536	1	paramInputStream	InputStream
    //   0	536	2	paramOptions	BitmapFactory.Options
    //   0	536	3	paramRect	Rect
    //   0	536	4	paramColorSpace	ColorSpace
    //   9	227	5	i	int
    //   15	223	6	j	int
    //   73	60	7	k	int
    //   165	156	8	localObject1	Object
    //   96	352	9	localBitmap1	Bitmap
    //   200	296	10	localObject2	Object
    //   264	16	11	localBitmap2	Bitmap
    // Exception table:
    //   from	to	target	type
    //   233	253	285	finally
    //   215	224	414	finally
    //   274	279	414	finally
    //   320	325	414	finally
    //   333	338	414	finally
    //   338	340	414	finally
    //   347	355	414	finally
    //   424	435	414	finally
    //   435	437	414	finally
    //   443	454	414	finally
    //   454	463	414	finally
    //   467	475	414	finally
    //   487	489	414	finally
    //   489	491	414	finally
    //   215	224	418	java/lang/RuntimeException
    //   274	279	418	java/lang/RuntimeException
    //   320	325	418	java/lang/RuntimeException
    //   333	338	418	java/lang/RuntimeException
    //   338	340	418	java/lang/RuntimeException
    //   347	355	418	java/lang/RuntimeException
    //   215	224	437	java/lang/IllegalArgumentException
    //   274	279	437	java/lang/IllegalArgumentException
    //   320	325	437	java/lang/IllegalArgumentException
    //   333	338	437	java/lang/IllegalArgumentException
    //   338	340	437	java/lang/IllegalArgumentException
    //   347	355	437	java/lang/IllegalArgumentException
    //   233	253	513	java/io/IOException
    //   257	266	518	java/io/IOException
    //   454	463	523	java/io/IOException
    //   467	475	523	java/io/IOException
    //   487	489	523	java/io/IOException
    //   257	266	527	finally
    //   299	315	527	finally
  }
  
  private static BitmapFactory.Options getDecodeOptionsForStream(EncodedImage paramEncodedImage, Bitmap.Config paramConfig)
  {
    BitmapFactory.Options localOptions = new BitmapFactory.Options();
    inSampleSize = paramEncodedImage.getSampleSize();
    inJustDecodeBounds = true;
    BitmapFactory.decodeStream(paramEncodedImage.getInputStream(), null, localOptions);
    if ((outWidth != -1) && (outHeight != -1))
    {
      inJustDecodeBounds = false;
      inDither = true;
      inPreferredConfig = paramConfig;
      inMutable = true;
      return localOptions;
    }
    throw new IllegalArgumentException();
  }
  
  public CloseableReference<Bitmap> decodeFromEncodedImage(EncodedImage paramEncodedImage, Bitmap.Config paramConfig, @Nullable Rect paramRect)
  {
    return decodeFromEncodedImageWithColorSpace(paramEncodedImage, paramConfig, paramRect, null);
  }
  
  public CloseableReference<Bitmap> decodeFromEncodedImageWithColorSpace(EncodedImage paramEncodedImage, Bitmap.Config paramConfig, @Nullable Rect paramRect, @Nullable ColorSpace paramColorSpace)
  {
    paramConfig = getDecodeOptionsForStream(paramEncodedImage, paramConfig);
    int i;
    if (inPreferredConfig != Bitmap.Config.ARGB_8888) {
      i = 1;
    } else {
      i = 0;
    }
    try
    {
      paramConfig = decodeFromStream(paramEncodedImage.getInputStream(), paramConfig, paramRect, paramColorSpace);
      return paramConfig;
    }
    catch (RuntimeException paramConfig)
    {
      if (i != 0) {
        return decodeFromEncodedImageWithColorSpace(paramEncodedImage, Bitmap.Config.ARGB_8888, paramRect, paramColorSpace);
      }
      throw paramConfig;
    }
  }
  
  public CloseableReference<Bitmap> decodeJPEGFromEncodedImage(EncodedImage paramEncodedImage, Bitmap.Config paramConfig, @Nullable Rect paramRect, int paramInt)
  {
    return decodeJPEGFromEncodedImageWithColorSpace(paramEncodedImage, paramConfig, paramRect, paramInt, null);
  }
  
  public CloseableReference<Bitmap> decodeJPEGFromEncodedImageWithColorSpace(EncodedImage paramEncodedImage, Bitmap.Config paramConfig, @Nullable Rect paramRect, int paramInt, @Nullable ColorSpace paramColorSpace)
  {
    boolean bool = paramEncodedImage.isCompleteAt(paramInt);
    BitmapFactory.Options localOptions = getDecodeOptionsForStream(paramEncodedImage, paramConfig);
    InputStream localInputStream = paramEncodedImage.getInputStream();
    Preconditions.checkNotNull(localInputStream);
    paramConfig = localInputStream;
    if (paramEncodedImage.getSize() > paramInt) {
      paramConfig = new LimitedInputStream(localInputStream, paramInt);
    }
    if (!bool) {
      paramConfig = new TailAppendingInputStream(paramConfig, EOI_TAIL);
    }
    int i;
    if (inPreferredConfig != Bitmap.Config.ARGB_8888) {
      i = 1;
    } else {
      i = 0;
    }
    try
    {
      paramConfig = decodeFromStream(paramConfig, localOptions, paramRect, paramColorSpace);
      return paramConfig;
    }
    catch (RuntimeException paramConfig)
    {
      if (i != 0) {
        return decodeJPEGFromEncodedImageWithColorSpace(paramEncodedImage, Bitmap.Config.ARGB_8888, paramRect, paramInt, paramColorSpace);
      }
      throw paramConfig;
    }
  }
  
  protected CloseableReference<Bitmap> decodeStaticImageFromStream(InputStream paramInputStream, BitmapFactory.Options paramOptions, @Nullable Rect paramRect)
  {
    return decodeFromStream(paramInputStream, paramOptions, paramRect, null);
  }
  
  public abstract int getBitmapSize(int paramInt1, int paramInt2, BitmapFactory.Options paramOptions);
}
