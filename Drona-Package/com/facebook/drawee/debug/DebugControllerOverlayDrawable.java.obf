package com.facebook.drawee.debug;

import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.drawable.Drawable;
import com.facebook.common.internal.VisibleForTesting;
import com.facebook.drawee.debug.listener.ImageLoadingTimeListener;
import com.facebook.drawee.drawable.ScalingUtils.ScaleType;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.Set;
import javax.annotation.Nullable;

public class DebugControllerOverlayDrawable
  extends Drawable
  implements ImageLoadingTimeListener
{
  private static final float IMAGE_SIZE_THRESHOLD_NOT_OK = 0.5F;
  private static final float IMAGE_SIZE_THRESHOLD_OK = 0.1F;
  private static final int MAX_LINE_WIDTH_EM = 8;
  private static final int MAX_NUMBER_OF_LINES = 9;
  private static final int MAX_TEXT_SIZE_PX = 40;
  private static final int MIN_TEXT_SIZE_PX = 10;
  private static final String NO_CONTROLLER_ID = "none";
  private static final int OUTLINE_COLOR = -26624;
  private static final int OUTLINE_STROKE_WIDTH_PX = 2;
  @VisibleForTesting
  static final int OVERLAY_COLOR_IMAGE_ALMOST_OK = 1728026624;
  @VisibleForTesting
  static final int OVERLAY_COLOR_IMAGE_NOT_OK = 1727284022;
  @VisibleForTesting
  static final int OVERLAY_COLOR_IMAGE_OK = 1716301648;
  private static final int TEXT_COLOR = -1;
  private static final int TEXT_LINE_SPACING_PX = 8;
  private static final int TEXT_PADDING_PX = 10;
  private HashMap<String, String> mAdditionalData = new HashMap();
  private String mControllerId;
  private int mCurrentTextXPx;
  private int mCurrentTextYPx;
  private long mFinalImageTimeMs;
  private int mFrameCount;
  private int mHeightPx;
  private String mImageFormat;
  private String mImageId;
  private int mImageSizeBytes;
  private int mLineIncrementPx;
  private int mLoopCount;
  private final Matrix mMatrix = new Matrix();
  private String mOrigin;
  private final Paint mPaint = new Paint(1);
  private final Rect mRect = new Rect();
  private final RectF mRectF = new RectF();
  private ScalingUtils.ScaleType mScaleType;
  private int mStartTextXPx;
  private int mStartTextYPx;
  private int mTextGravity = 80;
  private int mWidthPx;
  
  public DebugControllerOverlayDrawable()
  {
    reset();
  }
  
  private void addDebugText(Canvas paramCanvas, String paramString, @Nullable Object... paramVarArgs)
  {
    if (paramVarArgs == null) {
      paramCanvas.drawText(paramString, mCurrentTextXPx, mCurrentTextYPx, mPaint);
    } else {
      paramCanvas.drawText(String.format(paramString, paramVarArgs), mCurrentTextXPx, mCurrentTextYPx, mPaint);
    }
    mCurrentTextYPx += mLineIncrementPx;
  }
  
  private void prepareDebugTextParameters(Rect paramRect, int paramInt1, int paramInt2)
  {
    paramInt1 = Math.min(40, Math.max(10, Math.min(paramRect.width() / paramInt2, paramRect.height() / paramInt1)));
    mPaint.setTextSize(paramInt1);
    mLineIncrementPx = (paramInt1 + 8);
    if (mTextGravity == 80) {
      mLineIncrementPx *= -1;
    }
    mStartTextXPx = (left + 10);
    if (mTextGravity == 80) {
      paramInt1 = bottom - 10;
    } else {
      paramInt1 = top + 10 + 10;
    }
    mStartTextYPx = paramInt1;
  }
  
  public void addAdditionalData(String paramString1, String paramString2)
  {
    mAdditionalData.put(paramString1, paramString2);
  }
  
  @VisibleForTesting
  int determineOverlayColor(int paramInt1, int paramInt2, @Nullable ScalingUtils.ScaleType paramScaleType)
  {
    int m = getBounds().width();
    int k = getBounds().height();
    if ((m > 0) && (k > 0) && (paramInt1 > 0))
    {
      if (paramInt2 <= 0) {
        return 1727284022;
      }
      int j = m;
      int i = k;
      if (paramScaleType != null)
      {
        Rect localRect = mRect;
        mRect.top = 0;
        left = 0;
        mRect.right = m;
        mRect.bottom = k;
        mMatrix.reset();
        paramScaleType.getTransform(mMatrix, mRect, paramInt1, paramInt2, 0.0F, 0.0F);
        paramScaleType = mRectF;
        mRectF.top = 0.0F;
        left = 0.0F;
        mRectF.right = paramInt1;
        mRectF.bottom = paramInt2;
        mMatrix.mapRect(mRectF);
        j = (int)mRectF.width();
        i = (int)mRectF.height();
        j = Math.min(m, j);
        i = Math.min(k, i);
      }
      float f1 = j;
      float f2 = i;
      paramInt1 = Math.abs(paramInt1 - j);
      paramInt2 = Math.abs(paramInt2 - i);
      float f3 = paramInt1;
      if ((f3 < f1 * 0.1F) && (paramInt2 < 0.1F * f2)) {
        return 1716301648;
      }
      if ((f3 < f1 * 0.5F) && (paramInt2 < f2 * 0.5F)) {
        return 1728026624;
      }
      return 1727284022;
    }
    return 1727284022;
  }
  
  public void draw(Canvas paramCanvas)
  {
    Object localObject = getBounds();
    mPaint.setStyle(Paint.Style.STROKE);
    mPaint.setStrokeWidth(2.0F);
    mPaint.setColor(38912);
    paramCanvas.drawRect(left, top, right, bottom, mPaint);
    mPaint.setStyle(Paint.Style.FILL);
    mPaint.setColor(determineOverlayColor(mWidthPx, mHeightPx, mScaleType));
    paramCanvas.drawRect(left, top, right, bottom, mPaint);
    mPaint.setStyle(Paint.Style.FILL);
    mPaint.setStrokeWidth(0.0F);
    mPaint.setColor(-1);
    mCurrentTextXPx = mStartTextXPx;
    mCurrentTextYPx = mStartTextYPx;
    if (mImageId != null) {
      addDebugText(paramCanvas, "IDs: %s, %s", new Object[] { mControllerId, mImageId });
    } else {
      addDebugText(paramCanvas, "ID: %s", new Object[] { mControllerId });
    }
    addDebugText(paramCanvas, "D: %dx%d", new Object[] { Integer.valueOf(((Rect)localObject).width()), Integer.valueOf(((Rect)localObject).height()) });
    addDebugText(paramCanvas, "I: %dx%d", new Object[] { Integer.valueOf(mWidthPx), Integer.valueOf(mHeightPx) });
    addDebugText(paramCanvas, "I: %d KiB", new Object[] { Integer.valueOf(mImageSizeBytes / 1024) });
    if (mImageFormat != null) {
      addDebugText(paramCanvas, "i format: %s", new Object[] { mImageFormat });
    }
    if (mFrameCount > 0) {
      addDebugText(paramCanvas, "anim: f %d, l %d", new Object[] { Integer.valueOf(mFrameCount), Integer.valueOf(mLoopCount) });
    }
    if (mScaleType != null) {
      addDebugText(paramCanvas, "scale: %s", new Object[] { mScaleType });
    }
    if (mFinalImageTimeMs >= 0L) {
      addDebugText(paramCanvas, "t: %d ms", new Object[] { Long.valueOf(mFinalImageTimeMs) });
    }
    if (mOrigin != null) {
      addDebugText(paramCanvas, "origin: %s", new Object[] { mOrigin });
    }
    localObject = mAdditionalData.entrySet().iterator();
    while (((Iterator)localObject).hasNext())
    {
      Map.Entry localEntry = (Map.Entry)((Iterator)localObject).next();
      addDebugText(paramCanvas, "%s: %s", new Object[] { localEntry.getKey(), localEntry.getValue() });
    }
  }
  
  public int getOpacity()
  {
    return -3;
  }
  
  protected void onBoundsChange(Rect paramRect)
  {
    super.onBoundsChange(paramRect);
    prepareDebugTextParameters(paramRect, 9, 8);
  }
  
  public void onFinalImageSet(long paramLong)
  {
    mFinalImageTimeMs = paramLong;
    invalidateSelf();
  }
  
  public void reset()
  {
    mWidthPx = -1;
    mHeightPx = -1;
    mImageSizeBytes = -1;
    mAdditionalData = new HashMap();
    mFrameCount = -1;
    mLoopCount = -1;
    mImageFormat = null;
    setControllerId(null);
    mFinalImageTimeMs = -1L;
    mOrigin = null;
    invalidateSelf();
  }
  
  public void setAlpha(int paramInt) {}
  
  public void setAnimationInfo(int paramInt1, int paramInt2)
  {
    mFrameCount = paramInt1;
    mLoopCount = paramInt2;
    invalidateSelf();
  }
  
  public void setColorFilter(ColorFilter paramColorFilter) {}
  
  public void setControllerId(@Nullable String paramString)
  {
    if (paramString == null) {
      paramString = "none";
    }
    mControllerId = paramString;
    invalidateSelf();
  }
  
  public void setDimensions(int paramInt1, int paramInt2)
  {
    mWidthPx = paramInt1;
    mHeightPx = paramInt2;
    invalidateSelf();
  }
  
  public void setFinalImageTimeMs(long paramLong)
  {
    mFinalImageTimeMs = paramLong;
  }
  
  public void setImageFormat(@Nullable String paramString)
  {
    mImageFormat = paramString;
  }
  
  public void setImageId(@Nullable String paramString)
  {
    mImageId = paramString;
    invalidateSelf();
  }
  
  public void setImageSize(int paramInt)
  {
    mImageSizeBytes = paramInt;
  }
  
  public void setOrigin(String paramString)
  {
    mOrigin = paramString;
    invalidateSelf();
  }
  
  public void setScaleType(ScalingUtils.ScaleType paramScaleType)
  {
    mScaleType = paramScaleType;
  }
  
  public void setTextGravity(int paramInt)
  {
    mTextGravity = paramInt;
    invalidateSelf();
  }
}
