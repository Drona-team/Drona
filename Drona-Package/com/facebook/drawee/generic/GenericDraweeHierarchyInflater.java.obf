package com.facebook.drawee.generic;

import android.content.Context;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.drawable.Drawable;
import android.os.Build.VERSION;
import android.util.AttributeSet;
import com.facebook.drawee.R.styleable;
import com.facebook.drawee.drawable.AutoRotateDrawable;
import com.facebook.drawee.drawable.ScalingUtils.ScaleType;
import com.facebook.imagepipeline.systrace.FrescoSystrace;
import com.facebook.infer.annotation.ReturnsOwnership;
import javax.annotation.Nullable;

public class GenericDraweeHierarchyInflater
{
  public GenericDraweeHierarchyInflater() {}
  
  @Nullable
  private static Drawable getDrawable(Context paramContext, TypedArray paramTypedArray, int paramInt)
  {
    paramInt = paramTypedArray.getResourceId(paramInt, 0);
    if (paramInt == 0) {
      return null;
    }
    return paramContext.getResources().getDrawable(paramInt);
  }
  
  @ReturnsOwnership
  private static RoundingParams getRoundingParams(GenericDraweeHierarchyBuilder paramGenericDraweeHierarchyBuilder)
  {
    if (paramGenericDraweeHierarchyBuilder.getRoundingParams() == null) {
      paramGenericDraweeHierarchyBuilder.setRoundingParams(new RoundingParams());
    }
    return paramGenericDraweeHierarchyBuilder.getRoundingParams();
  }
  
  @Nullable
  private static ScalingUtils.ScaleType getScaleTypeFromXml(TypedArray paramTypedArray, int paramInt)
  {
    switch (paramTypedArray.getInt(paramInt, -2))
    {
    default: 
      throw new RuntimeException("XML attribute not specified!");
    case 8: 
      return ScalingUtils.ScaleType.FIT_BOTTOM_START;
    case 7: 
      return ScalingUtils.ScaleType.FOCUS_CROP;
    case 6: 
      return ScalingUtils.ScaleType.CENTER_CROP;
    case 5: 
      return ScalingUtils.ScaleType.CENTER_INSIDE;
    case 4: 
      return ScalingUtils.ScaleType.CENTER;
    case 3: 
      return ScalingUtils.ScaleType.FIT_END;
    case 2: 
      return ScalingUtils.ScaleType.FIT_CENTER;
    case 1: 
      return ScalingUtils.ScaleType.FIT_START;
    case 0: 
      return ScalingUtils.ScaleType.FIT_XY;
    }
    return null;
  }
  
  public static GenericDraweeHierarchyBuilder inflateBuilder(Context paramContext, @Nullable AttributeSet paramAttributeSet)
  {
    if (FrescoSystrace.isTracing()) {
      FrescoSystrace.beginSection("GenericDraweeHierarchyBuilder#inflateBuilder");
    }
    paramContext = updateBuilder(new GenericDraweeHierarchyBuilder(paramContext.getResources()), paramContext, paramAttributeSet);
    if (FrescoSystrace.isTracing()) {
      FrescoSystrace.endSection();
    }
    return paramContext;
  }
  
  public static GenericDraweeHierarchy inflateHierarchy(Context paramContext, @Nullable AttributeSet paramAttributeSet)
  {
    return inflateBuilder(paramContext, paramAttributeSet).build();
  }
  
  public static GenericDraweeHierarchyBuilder updateBuilder(GenericDraweeHierarchyBuilder paramGenericDraweeHierarchyBuilder, Context paramContext, @Nullable AttributeSet paramAttributeSet)
  {
    TypedArray localTypedArray;
    if (paramAttributeSet != null) {
      localTypedArray = paramContext.obtainStyledAttributes(paramAttributeSet, R.styleable.GenericDraweeHierarchy);
    }
    label1171:
    for (;;)
    {
      int i;
      int i1;
      int i2;
      try
      {
        int m = localTypedArray.getIndexCount();
        boolean bool8 = true;
        j = 0;
        k = 0;
        boolean bool7 = true;
        boolean bool6 = true;
        boolean bool5 = true;
        boolean bool4 = true;
        boolean bool3 = true;
        boolean bool2 = true;
        boolean bool1 = true;
        i = 0;
        paramAttributeSet = paramContext;
        int n;
        if (k < m) {
          try
          {
            n = localTypedArray.getIndex(k);
            if (n == R.styleable.GenericDraweeHierarchy_actualImageScaleType)
            {
              paramGenericDraweeHierarchyBuilder.setActualImageScaleType(getScaleTypeFromXml(localTypedArray, n));
              break label1171;
            }
            if (n == R.styleable.GenericDraweeHierarchy_placeholderImage)
            {
              paramGenericDraweeHierarchyBuilder.setPlaceholderImage(getDrawable(paramAttributeSet, localTypedArray, n));
              break label1171;
            }
            if (n == R.styleable.GenericDraweeHierarchy_pressedStateOverlayImage)
            {
              paramGenericDraweeHierarchyBuilder.setPressedStateOverlay(getDrawable(paramAttributeSet, localTypedArray, n));
              break label1171;
            }
            if (n == R.styleable.GenericDraweeHierarchy_progressBarImage)
            {
              paramGenericDraweeHierarchyBuilder.setProgressBarImage(getDrawable(paramAttributeSet, localTypedArray, n));
              break label1171;
            }
            if (n == R.styleable.GenericDraweeHierarchy_fadeDuration)
            {
              paramGenericDraweeHierarchyBuilder.setFadeDuration(localTypedArray.getInt(n, 0));
              break label1171;
            }
            if (n == R.styleable.GenericDraweeHierarchy_viewAspectRatio)
            {
              paramGenericDraweeHierarchyBuilder.setDesiredAspectRatio(localTypedArray.getFloat(n, 0.0F));
              break label1171;
            }
            if (n == R.styleable.GenericDraweeHierarchy_placeholderImageScaleType)
            {
              paramGenericDraweeHierarchyBuilder.setPlaceholderImageScaleType(getScaleTypeFromXml(localTypedArray, n));
              break label1171;
            }
            if (n == R.styleable.GenericDraweeHierarchy_retryImage)
            {
              paramGenericDraweeHierarchyBuilder.setRetryImage(getDrawable(paramAttributeSet, localTypedArray, n));
              break label1171;
            }
            if (n == R.styleable.GenericDraweeHierarchy_retryImageScaleType)
            {
              paramGenericDraweeHierarchyBuilder.setRetryImageScaleType(getScaleTypeFromXml(localTypedArray, n));
              break label1171;
            }
            if (n == R.styleable.GenericDraweeHierarchy_failureImage)
            {
              paramGenericDraweeHierarchyBuilder.setFailureImage(getDrawable(paramAttributeSet, localTypedArray, n));
              break label1171;
            }
            if (n == R.styleable.GenericDraweeHierarchy_failureImageScaleType)
            {
              paramGenericDraweeHierarchyBuilder.setFailureImageScaleType(getScaleTypeFromXml(localTypedArray, n));
              break label1171;
            }
            if (n == R.styleable.GenericDraweeHierarchy_progressBarImageScaleType)
            {
              paramGenericDraweeHierarchyBuilder.setProgressBarImageScaleType(getScaleTypeFromXml(localTypedArray, n));
              break label1171;
            }
            if (n == R.styleable.GenericDraweeHierarchy_progressBarAutoRotateInterval)
            {
              j = localTypedArray.getInteger(n, j);
              break;
            }
            if (n == R.styleable.GenericDraweeHierarchy_backgroundImage)
            {
              paramGenericDraweeHierarchyBuilder.setBackground(getDrawable(paramAttributeSet, localTypedArray, n));
              break label1171;
            }
            if (n == R.styleable.GenericDraweeHierarchy_overlayImage)
            {
              paramGenericDraweeHierarchyBuilder.setOverlay(getDrawable(paramAttributeSet, localTypedArray, n));
              break label1171;
            }
            if (n == R.styleable.GenericDraweeHierarchy_roundAsCircle)
            {
              getRoundingParams(paramGenericDraweeHierarchyBuilder).setRoundAsCircle(localTypedArray.getBoolean(n, false));
              break label1171;
            }
            if (n == R.styleable.GenericDraweeHierarchy_roundedCornerRadius)
            {
              i = localTypedArray.getDimensionPixelSize(n, i);
              break;
            }
            if (n == R.styleable.GenericDraweeHierarchy_roundTopLeft)
            {
              bool7 = localTypedArray.getBoolean(n, bool7);
              break label1177;
            }
            if (n == R.styleable.GenericDraweeHierarchy_roundTopRight)
            {
              bool4 = localTypedArray.getBoolean(n, bool4);
              break label1177;
            }
            if (n == R.styleable.GenericDraweeHierarchy_roundBottomLeft)
            {
              bool8 = localTypedArray.getBoolean(n, bool8);
              break label1177;
            }
            if (n == R.styleable.GenericDraweeHierarchy_roundBottomRight)
            {
              bool3 = localTypedArray.getBoolean(n, bool3);
              break label1177;
            }
            if (n == R.styleable.GenericDraweeHierarchy_roundTopStart)
            {
              bool6 = localTypedArray.getBoolean(n, bool6);
              break label1177;
            }
            if (n == R.styleable.GenericDraweeHierarchy_roundTopEnd)
            {
              bool5 = localTypedArray.getBoolean(n, bool5);
              break label1177;
            }
            if (n == R.styleable.GenericDraweeHierarchy_roundBottomStart)
            {
              bool1 = localTypedArray.getBoolean(n, bool1);
              break label1177;
            }
            if (n == R.styleable.GenericDraweeHierarchy_roundBottomEnd)
            {
              bool2 = localTypedArray.getBoolean(n, bool2);
              break label1177;
            }
            if (n == R.styleable.GenericDraweeHierarchy_roundWithOverlayColor)
            {
              getRoundingParams(paramGenericDraweeHierarchyBuilder).setOverlayColor(localTypedArray.getColor(n, 0));
              break label1171;
            }
            if (n == R.styleable.GenericDraweeHierarchy_roundingBorderWidth)
            {
              getRoundingParams(paramGenericDraweeHierarchyBuilder).setBorderWidth(localTypedArray.getDimensionPixelSize(n, 0));
              break label1171;
            }
            if (n == R.styleable.GenericDraweeHierarchy_roundingBorderColor)
            {
              getRoundingParams(paramGenericDraweeHierarchyBuilder).setBorderColor(localTypedArray.getColor(n, 0));
              break label1171;
            }
            if (n != R.styleable.GenericDraweeHierarchy_roundingBorderPadding) {
              break label1171;
            }
            getRoundingParams(paramGenericDraweeHierarchyBuilder).setPadding(localTypedArray.getDimensionPixelSize(n, 0));
            k += 1;
          }
          finally
          {
            continue;
          }
        }
        localTypedArray.recycle();
        if ((Build.VERSION.SDK_INT >= 17) && (paramContext.getResources().getConfiguration().getLayoutDirection() == 1))
        {
          if ((bool7) && (bool5)) {
            k = 1;
          } else {
            k = 0;
          }
          if ((bool4) && (bool6)) {
            m = 1;
          } else {
            m = 0;
          }
          if ((bool3) && (bool1)) {
            n = 1;
          } else {
            n = 0;
          }
          i1 = k;
          i2 = m;
          i3 = n;
          if (!bool8) {
            continue;
          }
          i1 = k;
          i2 = m;
          i3 = n;
          if (!bool2) {
            continue;
          }
        }
        else
        {
          if ((bool7) && (bool6)) {
            k = 1;
          } else {
            k = 0;
          }
          if ((bool4) && (bool5)) {
            m = 1;
          } else {
            m = 0;
          }
          if ((bool3) && (bool2)) {
            n = 1;
          } else {
            n = 0;
          }
          i1 = k;
          i2 = m;
          i3 = n;
          if (!bool8) {
            continue;
          }
          i1 = k;
          i2 = m;
          i3 = n;
          if (!bool1) {
            continue;
          }
        }
        int i4 = 1;
        i1 = k;
        i2 = m;
        i3 = n;
        k = i4;
        continue;
        k = 0;
      }
      finally
      {
        localTypedArray.recycle();
        if (Build.VERSION.SDK_INT >= 17) {
          paramContext.getResources().getConfiguration().getLayoutDirection();
        }
      }
      int i3 = 1;
      int k = 1;
      int j = 0;
      if ((paramGenericDraweeHierarchyBuilder.getProgressBarImage() != null) && (j > 0)) {
        paramGenericDraweeHierarchyBuilder.setProgressBarImage(new AutoRotateDrawable(paramGenericDraweeHierarchyBuilder.getProgressBarImage(), j));
      }
      if (i > 0)
      {
        paramContext = getRoundingParams(paramGenericDraweeHierarchyBuilder);
        float f1;
        if (i1 != 0) {
          f1 = i;
        } else {
          f1 = 0.0F;
        }
        float f2;
        if (i2 != 0) {
          f2 = i;
        } else {
          f2 = 0.0F;
        }
        float f3;
        if (i3 != 0) {
          f3 = i;
        } else {
          f3 = 0.0F;
        }
        float f4;
        if (k != 0) {
          f4 = i;
        } else {
          f4 = 0.0F;
        }
        paramContext.setCornersRadii(f1, f2, f3, f4);
      }
      return paramGenericDraweeHierarchyBuilder;
    }
    label1177:
    for (;;)
    {
      break;
    }
  }
}
