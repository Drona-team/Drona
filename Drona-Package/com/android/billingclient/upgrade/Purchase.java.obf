package com.android.billingclient.api;

import android.text.TextUtils;
import androidx.annotation.Nullable;
import java.lang.annotation.Annotation;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.util.List;
import org.json.JSONException;
import org.json.JSONObject;

public class Purchase
{
  private final String mOriginalJson;
  private final JSONObject mParsedJson;
  private final String mSignature;
  
  public Purchase(String paramString1, String paramString2)
    throws JSONException
  {
    mOriginalJson = paramString1;
    mSignature = paramString2;
    mParsedJson = new JSONObject(mOriginalJson);
  }
  
  public boolean equals(Object paramObject)
  {
    if (this == paramObject) {
      return true;
    }
    if (!(paramObject instanceof Purchase)) {
      return false;
    }
    paramObject = (Purchase)paramObject;
    return (TextUtils.equals(mOriginalJson, paramObject.getOriginalJson())) && (TextUtils.equals(mSignature, paramObject.getSignature()));
  }
  
  @Nullable
  public String getDeveloperPayload()
  {
    return mParsedJson.optString("developerPayload");
  }
  
  public String getOrderId()
  {
    return mParsedJson.optString("orderId");
  }
  
  public String getOriginalJson()
  {
    return mOriginalJson;
  }
  
  public String getPackageName()
  {
    return mParsedJson.optString("packageName");
  }
  
  public int getPurchaseState()
  {
    if (mParsedJson.optInt("purchaseState", 1) != 4) {
      return 1;
    }
    return 2;
  }
  
  public long getPurchaseTime()
  {
    return mParsedJson.optLong("purchaseTime");
  }
  
  public String getPurchaseToken()
  {
    return mParsedJson.optString("token", mParsedJson.optString("purchaseToken"));
  }
  
  public String getSignature()
  {
    return mSignature;
  }
  
  public String getSku()
  {
    return mParsedJson.optString("productId");
  }
  
  public int hashCode()
  {
    return mOriginalJson.hashCode();
  }
  
  public boolean isAcknowledged()
  {
    return mParsedJson.optBoolean("acknowledged", true);
  }
  
  public boolean isAutoRenewing()
  {
    return mParsedJson.optBoolean("autoRenewing");
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Purchase. Json: ");
    localStringBuilder.append(mOriginalJson);
    return localStringBuilder.toString();
  }
  
  @Retention(RetentionPolicy.SOURCE)
  public static @interface PurchaseState
  {
    public static final int PENDING = 2;
    public static final int PURCHASED = 1;
    public static final int UNSPECIFIED_STATE = 0;
  }
  
  public static class PurchasesResult
  {
    private BillingResult mBillingResult;
    private List<Purchase> mPurchaseList;
    
    public PurchasesResult(BillingResult paramBillingResult, List<Purchase> paramList)
    {
      mPurchaseList = paramList;
      mBillingResult = paramBillingResult;
    }
    
    public BillingResult getBillingResult()
    {
      return mBillingResult;
    }
    
    public List<Purchase> getPurchasesList()
    {
      return mPurchaseList;
    }
    
    public int getResponseCode()
    {
      return getBillingResult().getResponseCode();
    }
  }
}
