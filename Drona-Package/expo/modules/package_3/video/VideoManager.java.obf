package expo.modules.av.video;

import android.content.Context;
import androidx.annotation.Nullable;
import com.yqritc.scalablevideoview.ScalableType;
import java.util.HashMap;
import java.util.Map;
import org.unimodules.core.ExportedModule;
import org.unimodules.core.ModuleRegistry;
import org.unimodules.core.Promise;
import org.unimodules.core.interfaces.ExpoMethod;
import org.unimodules.core.interfaces.services.UIManager;
import org.unimodules.core.interfaces.services.UIManager.UIBlock;

public class VideoManager
  extends ExportedModule
{
  private static final String NAME = "ExpoVideoManager";
  private ModuleRegistry mModuleRegistry;
  
  public VideoManager(Context paramContext)
  {
    super(paramContext);
  }
  
  private void tryRunWithVideoView(Integer paramInteger, final VideoViewCallback paramVideoViewCallback, final Promise paramPromise)
  {
    ((UIManager)mModuleRegistry.getModule(UIManager.class)).addUIBlock(paramInteger.intValue(), new UIManager.UIBlock()
    {
      public void reject(Throwable paramAnonymousThrowable)
      {
        paramPromise.reject("E_VIDEO_TAGINCORRECT", "Invalid view returned from registry.");
      }
      
      public void resolve(VideoViewWrapper paramAnonymousVideoViewWrapper)
      {
        paramVideoViewCallback.runWithVideoView(paramAnonymousVideoViewWrapper.getVideoViewInstance());
      }
    }, VideoViewWrapper.class);
  }
  
  public Map<String, Object> getConstants()
  {
    HashMap localHashMap = new HashMap();
    localHashMap.put("ScaleNone", Integer.toString(ScalableType.LEFT_TOP.ordinal()));
    localHashMap.put("ScaleToFill", Integer.toString(ScalableType.FIT_XY.ordinal()));
    localHashMap.put("ScaleAspectFit", Integer.toString(ScalableType.FIT_CENTER.ordinal()));
    localHashMap.put("ScaleAspectFill", Integer.toString(ScalableType.CENTER_CROP.ordinal()));
    return localHashMap;
  }
  
  public String getName()
  {
    return "ExpoVideoManager";
  }
  
  public void onCreate(ModuleRegistry paramModuleRegistry)
  {
    mModuleRegistry = paramModuleRegistry;
  }
  
  @ExpoMethod
  public void setFullscreen(Integer paramInteger, final Boolean paramBoolean, final Promise paramPromise)
  {
    tryRunWithVideoView(paramInteger, new VideoViewCallback()
    {
      public void runWithVideoView(final VideoView paramAnonymousVideoView)
      {
        FullscreenVideoPlayerPresentationChangeProgressListener local1 = new FullscreenVideoPlayerPresentationChangeProgressListener()
        {
          public void onFullscreenPlayerDidDismiss()
          {
            val$promise.resolve(paramAnonymousVideoView.getStatus());
          }
          
          public void onFullscreenPlayerDidPresent()
          {
            val$promise.resolve(paramAnonymousVideoView.getStatus());
          }
          
          void onFullscreenPlayerPresentationError(@Nullable String paramAnonymous2String)
          {
            StringBuilder localStringBuilder = new StringBuilder();
            localStringBuilder.append("This presentation change has been interrupted by an error.");
            if (paramAnonymous2String != null)
            {
              localStringBuilder.append(" ");
              localStringBuilder.append(paramAnonymous2String);
            }
            val$promise.reject("E_FULLSCREEN_VIDEO_PLAYER", localStringBuilder.toString());
          }
          
          public void onFullscreenPlayerPresentationInterrupted()
          {
            val$promise.reject("E_FULLSCREEN_VIDEO_PLAYER", "This presentation change has been interrupted by a newer change request.");
          }
          
          public void onFullscreenPlayerPresentationTriedToInterrupt()
          {
            val$promise.reject("E_FULLSCREEN_VIDEO_PLAYER", "This presentation change tries to interrupt an older request. Await the old request and then try again.");
          }
        };
        if (paramBoolean.booleanValue())
        {
          paramAnonymousVideoView.ensureFullscreenPlayerIsPresented(local1);
          return;
        }
        paramAnonymousVideoView.ensureFullscreenPlayerIsDismissed(local1);
      }
    }, paramPromise);
  }
  
  private static abstract interface VideoViewCallback
  {
    public abstract void runWithVideoView(VideoView paramVideoView);
  }
}
