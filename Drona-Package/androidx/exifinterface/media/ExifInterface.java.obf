package androidx.exifinterface.media;

import android.content.res.AssetManager.AssetInputStream;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.location.Location;
import android.media.MediaDataSource;
import android.media.MediaMetadataRetriever;
import android.os.Build.VERSION;
import android.system.Os;
import android.system.OsConstants;
import android.util.Log;
import android.util.Pair;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.RestrictTo;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.Closeable;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.annotation.Annotation;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.charset.Charset;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map.Entry;
import java.util.Set;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class ExifInterface
{
  public static final short ALTITUDE_ABOVE_SEA_LEVEL = 0;
  public static final short ALTITUDE_BELOW_SEA_LEVEL = 1;
  static final Charset ASCII;
  public static final int[] BITS_PER_SAMPLE_GREYSCALE_1;
  public static final int[] BITS_PER_SAMPLE_GREYSCALE_2;
  public static final int[] BITS_PER_SAMPLE_RGB;
  static final short BYTE_ALIGN_II = 18761;
  static final short BYTE_ALIGN_MM = 19789;
  public static final int COLOR_SPACE_S_RGB = 1;
  public static final int COLOR_SPACE_UNCALIBRATED = 65535;
  public static final short CONTRAST_HARD = 2;
  public static final short CONTRAST_NORMAL = 0;
  public static final short CONTRAST_SOFT = 1;
  public static final int DATA_DEFLATE_ZIP = 8;
  public static final int DATA_HUFFMAN_COMPRESSED = 2;
  public static final int DATA_JPEG = 6;
  public static final int DATA_JPEG_COMPRESSED = 7;
  public static final int DATA_LOSSY_JPEG = 34892;
  public static final int DATA_PACK_BITS_COMPRESSED = 32773;
  public static final int DATA_UNCOMPRESSED = 1;
  private static final boolean DEBUG = Log.isLoggable("ExifInterface", 3);
  static final byte[] EXIF_ASCII_PREFIX;
  private static final ExifTag[] EXIF_POINTER_TAGS;
  static final ExifTag[][] EXIF_TAGS;
  public static final short EXPOSURE_MODE_AUTO = 0;
  public static final short EXPOSURE_MODE_AUTO_BRACKET = 2;
  public static final short EXPOSURE_MODE_MANUAL = 1;
  public static final short EXPOSURE_PROGRAM_ACTION = 6;
  public static final short EXPOSURE_PROGRAM_APERTURE_PRIORITY = 3;
  public static final short EXPOSURE_PROGRAM_CREATIVE = 5;
  public static final short EXPOSURE_PROGRAM_LANDSCAPE_MODE = 8;
  public static final short EXPOSURE_PROGRAM_MANUAL = 1;
  public static final short EXPOSURE_PROGRAM_NORMAL = 2;
  public static final short EXPOSURE_PROGRAM_NOT_DEFINED = 0;
  public static final short EXPOSURE_PROGRAM_PORTRAIT_MODE = 7;
  public static final short EXPOSURE_PROGRAM_SHUTTER_PRIORITY = 4;
  public static final short FILE_SOURCE_DSC = 3;
  public static final short FILE_SOURCE_OTHER = 0;
  public static final short FILE_SOURCE_REFLEX_SCANNER = 2;
  public static final short FILE_SOURCE_TRANSPARENT_SCANNER = 1;
  public static final short FLAG_FLASH_FIRED = 1;
  public static final short FLAG_FLASH_MODE_AUTO = 24;
  public static final short FLAG_FLASH_MODE_COMPULSORY_FIRING = 8;
  public static final short FLAG_FLASH_MODE_COMPULSORY_SUPPRESSION = 16;
  public static final short FLAG_FLASH_NO_FLASH_FUNCTION = 32;
  public static final short FLAG_FLASH_RED_EYE_SUPPORTED = 64;
  public static final short FLAG_FLASH_RETURN_LIGHT_DETECTED = 6;
  public static final short FLAG_FLASH_RETURN_LIGHT_NOT_DETECTED = 4;
  private static final List<Integer> FLIPPED_ROTATION_ORDER;
  public static final short FORMAT_CHUNKY = 1;
  public static final short FORMAT_PLANAR = 2;
  public static final short GAIN_CONTROL_HIGH_GAIN_DOWN = 4;
  public static final short GAIN_CONTROL_HIGH_GAIN_UP = 2;
  public static final short GAIN_CONTROL_LOW_GAIN_DOWN = 3;
  public static final short GAIN_CONTROL_LOW_GAIN_UP = 1;
  public static final short GAIN_CONTROL_NONE = 0;
  public static final String GPS_DIRECTION_MAGNETIC = "M";
  public static final String GPS_DIRECTION_TRUE = "T";
  public static final String GPS_DISTANCE_KILOMETERS = "K";
  public static final String GPS_DISTANCE_MILES = "M";
  public static final String GPS_DISTANCE_NAUTICAL_MILES = "N";
  public static final String GPS_MEASUREMENT_2D = "2";
  public static final String GPS_MEASUREMENT_3D = "3";
  public static final short GPS_MEASUREMENT_DIFFERENTIAL_CORRECTED = 1;
  public static final String GPS_MEASUREMENT_INTERRUPTED = "V";
  public static final String GPS_MEASUREMENT_IN_PROGRESS = "A";
  public static final short GPS_MEASUREMENT_NO_DIFFERENTIAL = 0;
  public static final String GPS_SPEED_KILOMETERS_PER_HOUR = "K";
  public static final String GPS_SPEED_KNOTS = "N";
  public static final String GPS_SPEED_MILES_PER_HOUR = "M";
  private static final byte[] HEIF_BRAND_HEIC;
  private static final byte[] HEIF_BRAND_MIF1;
  private static final byte[] HEIF_TYPE_FTYP;
  static final byte[] IDENTIFIER_EXIF_APP1;
  private static final byte[] IDENTIFIER_XMP_APP1;
  private static final ExifTag[] IFD_EXIF_TAGS;
  private static final int IFD_FORMAT_BYTE = 1;
  static final int[] IFD_FORMAT_BYTES_PER_FORMAT;
  private static final int IFD_FORMAT_DOUBLE = 12;
  private static final int IFD_FORMAT_IFD = 13;
  static final String[] IFD_FORMAT_NAMES;
  private static final int IFD_FORMAT_SBYTE = 6;
  private static final int IFD_FORMAT_SINGLE = 11;
  private static final int IFD_FORMAT_SLONG = 9;
  private static final int IFD_FORMAT_SRATIONAL = 10;
  private static final int IFD_FORMAT_SSHORT = 8;
  private static final int IFD_FORMAT_STRING = 2;
  private static final int IFD_FORMAT_ULONG = 4;
  private static final int IFD_FORMAT_UNDEFINED = 7;
  private static final int IFD_FORMAT_URATIONAL = 5;
  private static final int IFD_FORMAT_USHORT = 3;
  private static final ExifTag[] IFD_GPS_TAGS;
  private static final ExifTag[] IFD_INTEROPERABILITY_TAGS;
  private static final int IFD_OFFSET = 8;
  private static final ExifTag[] IFD_THUMBNAIL_TAGS;
  private static final ExifTag[] IFD_TIFF_TAGS;
  private static final int IFD_TYPE_EXIF = 1;
  private static final int IFD_TYPE_GPS = 2;
  private static final int IFD_TYPE_INTEROPERABILITY = 3;
  private static final int IFD_TYPE_ORF_CAMERA_SETTINGS = 7;
  private static final int IFD_TYPE_ORF_IMAGE_PROCESSING = 8;
  private static final int IFD_TYPE_ORF_MAKER_NOTE = 6;
  private static final int IFD_TYPE_PEF = 9;
  static final int IFD_TYPE_PREVIEW = 5;
  static final int IFD_TYPE_PRIMARY = 0;
  static final int IFD_TYPE_THUMBNAIL = 4;
  private static final int IMAGE_TYPE_ARW = 1;
  private static final int IMAGE_TYPE_CR2 = 2;
  private static final int IMAGE_TYPE_DNG = 3;
  private static final int IMAGE_TYPE_HEIF = 12;
  private static final int IMAGE_TYPE_JPEG = 4;
  private static final int IMAGE_TYPE_NEF = 5;
  private static final int IMAGE_TYPE_NRW = 6;
  private static final int IMAGE_TYPE_ORF = 7;
  private static final int IMAGE_TYPE_PEF = 8;
  private static final int IMAGE_TYPE_RAF = 9;
  private static final int IMAGE_TYPE_RW2 = 10;
  private static final int IMAGE_TYPE_SRW = 11;
  private static final int IMAGE_TYPE_UNKNOWN = 0;
  private static final ExifTag JPEG_INTERCHANGE_FORMAT_LENGTH_TAG;
  private static final ExifTag JPEG_INTERCHANGE_FORMAT_TAG;
  static final byte[] JPEG_SIGNATURE;
  public static final String LATITUDE_NORTH = "N";
  public static final String LATITUDE_SOUTH = "S";
  public static final short LIGHT_SOURCE_CLOUDY_WEATHER = 10;
  public static final short LIGHT_SOURCE_COOL_WHITE_FLUORESCENT = 14;
  public static final short LIGHT_SOURCE_D50 = 23;
  public static final short LIGHT_SOURCE_D55 = 20;
  public static final short LIGHT_SOURCE_D65 = 21;
  public static final short LIGHT_SOURCE_D75 = 22;
  public static final short LIGHT_SOURCE_DAYLIGHT = 1;
  public static final short LIGHT_SOURCE_DAYLIGHT_FLUORESCENT = 12;
  public static final short LIGHT_SOURCE_DAY_WHITE_FLUORESCENT = 13;
  public static final short LIGHT_SOURCE_FINE_WEATHER = 9;
  public static final short LIGHT_SOURCE_FLASH = 4;
  public static final short LIGHT_SOURCE_FLUORESCENT = 2;
  public static final short LIGHT_SOURCE_ISO_STUDIO_TUNGSTEN = 24;
  public static final short LIGHT_SOURCE_OTHER = 255;
  public static final short LIGHT_SOURCE_SHADE = 11;
  public static final short LIGHT_SOURCE_STANDARD_LIGHT_A = 17;
  public static final short LIGHT_SOURCE_STANDARD_LIGHT_B = 18;
  public static final short LIGHT_SOURCE_STANDARD_LIGHT_C = 19;
  public static final short LIGHT_SOURCE_TUNGSTEN = 3;
  public static final short LIGHT_SOURCE_UNKNOWN = 0;
  public static final short LIGHT_SOURCE_WARM_WHITE_FLUORESCENT = 16;
  public static final short LIGHT_SOURCE_WHITE_FLUORESCENT = 15;
  public static final String LONGITUDE_EAST = "E";
  public static final String LONGITUDE_WEST = "W";
  static final byte MARKER = -1;
  static final byte MARKER_APP1 = -31;
  private static final byte MARKER_COM = -2;
  static final byte MARKER_EOI = -39;
  private static final byte MARKER_SOF0 = -64;
  private static final byte MARKER_SOF1 = -63;
  private static final byte MARKER_SOF10 = -54;
  private static final byte MARKER_SOF11 = -53;
  private static final byte MARKER_SOF13 = -51;
  private static final byte MARKER_SOF14 = -50;
  private static final byte MARKER_SOF15 = -49;
  private static final byte MARKER_SOF2 = -62;
  private static final byte MARKER_SOF3 = -61;
  private static final byte MARKER_SOF5 = -59;
  private static final byte MARKER_SOF6 = -58;
  private static final byte MARKER_SOF7 = -57;
  private static final byte MARKER_SOF9 = -55;
  private static final byte MARKER_SOI = -40;
  private static final byte MARKER_SOS = -38;
  private static final int MAX_THUMBNAIL_SIZE = 512;
  public static final short METERING_MODE_AVERAGE = 1;
  public static final short METERING_MODE_CENTER_WEIGHT_AVERAGE = 2;
  public static final short METERING_MODE_MULTI_SPOT = 4;
  public static final short METERING_MODE_OTHER = 255;
  public static final short METERING_MODE_PARTIAL = 6;
  public static final short METERING_MODE_PATTERN = 5;
  public static final short METERING_MODE_SPOT = 3;
  public static final short METERING_MODE_UNKNOWN = 0;
  private static final ExifTag[] ORF_CAMERA_SETTINGS_TAGS;
  private static final ExifTag[] ORF_IMAGE_PROCESSING_TAGS;
  private static final byte[] ORF_MAKER_NOTE_HEADER_1;
  private static final int ORF_MAKER_NOTE_HEADER_1_SIZE = 8;
  private static final byte[] ORF_MAKER_NOTE_HEADER_2;
  private static final int ORF_MAKER_NOTE_HEADER_2_SIZE = 12;
  private static final ExifTag[] ORF_MAKER_NOTE_TAGS;
  private static final short ORF_SIGNATURE_1 = 20306;
  private static final short ORF_SIGNATURE_2 = 21330;
  public static final int ORIENTATION_FLIP_HORIZONTAL = 2;
  public static final int ORIENTATION_FLIP_VERTICAL = 4;
  public static final int ORIENTATION_NORMAL = 1;
  public static final int ORIENTATION_ROTATE_180 = 3;
  public static final int ORIENTATION_ROTATE_270 = 8;
  public static final int ORIENTATION_ROTATE_90 = 6;
  public static final int ORIENTATION_TRANSPOSE = 5;
  public static final int ORIENTATION_TRANSVERSE = 7;
  public static final int ORIENTATION_UNDEFINED = 0;
  public static final int ORIGINAL_RESOLUTION_IMAGE = 0;
  private static final int PEF_MAKER_NOTE_SKIP_SIZE = 6;
  private static final String PEF_SIGNATURE = "PENTAX";
  private static final ExifTag[] PEF_TAGS;
  public static final int PHOTOMETRIC_INTERPRETATION_BLACK_IS_ZERO = 1;
  public static final int PHOTOMETRIC_INTERPRETATION_RGB = 2;
  public static final int PHOTOMETRIC_INTERPRETATION_WHITE_IS_ZERO = 0;
  public static final int PHOTOMETRIC_INTERPRETATION_YCBCR = 6;
  private static final int RAF_INFO_SIZE = 160;
  private static final int RAF_JPEG_LENGTH_VALUE_SIZE = 4;
  private static final int RAF_OFFSET_TO_JPEG_IMAGE_OFFSET = 84;
  private static final String RAF_SIGNATURE = "FUJIFILMCCD-RAW";
  public static final int REDUCED_RESOLUTION_IMAGE = 1;
  public static final short RENDERED_PROCESS_CUSTOM = 1;
  public static final short RENDERED_PROCESS_NORMAL = 0;
  public static final short RESOLUTION_UNIT_CENTIMETERS = 3;
  public static final short RESOLUTION_UNIT_INCHES = 2;
  private static final List<Integer> ROTATION_ORDER = Arrays.asList(new Integer[] { Integer.valueOf(1), Integer.valueOf(6), Integer.valueOf(3), Integer.valueOf(8) });
  private static final short RW2_SIGNATURE = 85;
  public static final short SATURATION_HIGH = 0;
  public static final short SATURATION_LOW = 0;
  public static final short SATURATION_NORMAL = 0;
  public static final short SCENE_CAPTURE_TYPE_LANDSCAPE = 1;
  public static final short SCENE_CAPTURE_TYPE_NIGHT = 3;
  public static final short SCENE_CAPTURE_TYPE_PORTRAIT = 2;
  public static final short SCENE_CAPTURE_TYPE_STANDARD = 0;
  public static final short SCENE_TYPE_DIRECTLY_PHOTOGRAPHED = 1;
  public static final short SENSITIVITY_TYPE_ISO_SPEED = 3;
  public static final short SENSITIVITY_TYPE_REI = 2;
  public static final short SENSITIVITY_TYPE_REI_AND_ISO = 6;
  public static final short SENSITIVITY_TYPE_SOS = 1;
  public static final short SENSITIVITY_TYPE_SOS_AND_ISO = 5;
  public static final short SENSITIVITY_TYPE_SOS_AND_REI = 4;
  public static final short SENSITIVITY_TYPE_SOS_AND_REI_AND_ISO = 7;
  public static final short SENSITIVITY_TYPE_UNKNOWN = 0;
  public static final short SENSOR_TYPE_COLOR_SEQUENTIAL = 5;
  public static final short SENSOR_TYPE_COLOR_SEQUENTIAL_LINEAR = 8;
  public static final short SENSOR_TYPE_NOT_DEFINED = 1;
  public static final short SENSOR_TYPE_ONE_CHIP = 2;
  public static final short SENSOR_TYPE_THREE_CHIP = 4;
  public static final short SENSOR_TYPE_TRILINEAR = 7;
  public static final short SENSOR_TYPE_TWO_CHIP = 3;
  public static final short SHARPNESS_HARD = 2;
  public static final short SHARPNESS_NORMAL = 0;
  public static final short SHARPNESS_SOFT = 1;
  private static final int SIGNATURE_CHECK_SIZE = 5000;
  static final byte START_CODE = 42;
  public static final short SUBJECT_DISTANCE_RANGE_CLOSE_VIEW = 2;
  public static final short SUBJECT_DISTANCE_RANGE_DISTANT_VIEW = 3;
  public static final short SUBJECT_DISTANCE_RANGE_MACRO = 1;
  public static final short SUBJECT_DISTANCE_RANGE_UNKNOWN = 0;
  private static final String TAG = "ExifInterface";
  public static final String TAG_APERTURE_VALUE = "ApertureValue";
  public static final String TAG_ARTIST = "Artist";
  public static final String TAG_BITS_PER_SAMPLE = "BitsPerSample";
  public static final String TAG_BODY_SERIAL_NUMBER = "BodySerialNumber";
  public static final String TAG_BRIGHTNESS_VALUE = "BrightnessValue";
  @Deprecated
  public static final String TAG_CAMARA_OWNER_NAME = "CameraOwnerName";
  public static final String TAG_CAMERA_OWNER_NAME = "CameraOwnerName";
  public static final String TAG_CFA_PATTERN = "CFAPattern";
  public static final String TAG_COLOR_SPACE = "ColorSpace";
  public static final String TAG_COMPONENTS_CONFIGURATION = "ComponentsConfiguration";
  public static final String TAG_COMPRESSED_BITS_PER_PIXEL = "CompressedBitsPerPixel";
  public static final String TAG_COMPRESSION = "Compression";
  public static final String TAG_CONTRAST = "Contrast";
  public static final String TAG_COPYRIGHT = "Copyright";
  public static final String TAG_CUSTOM_RENDERED = "CustomRendered";
  public static final String TAG_DATETIME = "DateTime";
  public static final String TAG_DATETIME_DIGITIZED = "DateTimeDigitized";
  public static final String TAG_DATETIME_ORIGINAL = "DateTimeOriginal";
  public static final String TAG_DEFAULT_CROP_SIZE = "DefaultCropSize";
  public static final String TAG_DEVICE_SETTING_DESCRIPTION = "DeviceSettingDescription";
  public static final String TAG_DIGITAL_ZOOM_RATIO = "DigitalZoomRatio";
  public static final String TAG_DNG_VERSION = "DNGVersion";
  private static final String TAG_EXIF_IFD_POINTER = "ExifIFDPointer";
  public static final String TAG_EXIF_VERSION = "ExifVersion";
  public static final String TAG_EXPOSURE_BIAS_VALUE = "ExposureBiasValue";
  public static final String TAG_EXPOSURE_INDEX = "ExposureIndex";
  public static final String TAG_EXPOSURE_MODE = "ExposureMode";
  public static final String TAG_EXPOSURE_PROGRAM = "ExposureProgram";
  public static final String TAG_EXPOSURE_TIME = "ExposureTime";
  public static final String TAG_FILE_SOURCE = "FileSource";
  public static final String TAG_FLASH = "Flash";
  public static final String TAG_FLASHPIX_VERSION = "FlashpixVersion";
  public static final String TAG_FLASH_ENERGY = "FlashEnergy";
  public static final String TAG_FOCAL_LENGTH = "FocalLength";
  public static final String TAG_FOCAL_LENGTH_IN_35MM_FILM = "FocalLengthIn35mmFilm";
  public static final String TAG_FOCAL_PLANE_RESOLUTION_UNIT = "FocalPlaneResolutionUnit";
  public static final String TAG_FOCAL_PLANE_X_RESOLUTION = "FocalPlaneXResolution";
  public static final String TAG_FOCAL_PLANE_Y_RESOLUTION = "FocalPlaneYResolution";
  public static final String TAG_F_NUMBER = "FNumber";
  public static final String TAG_GAIN_CONTROL = "GainControl";
  public static final String TAG_GAMMA = "Gamma";
  public static final String TAG_GPS_ALTITUDE = "GPSAltitude";
  public static final String TAG_GPS_ALTITUDE_REF = "GPSAltitudeRef";
  public static final String TAG_GPS_AREA_INFORMATION = "GPSAreaInformation";
  public static final String TAG_GPS_DATESTAMP = "GPSDateStamp";
  public static final String TAG_GPS_DEST_BEARING = "GPSDestBearing";
  public static final String TAG_GPS_DEST_BEARING_REF = "GPSDestBearingRef";
  public static final String TAG_GPS_DEST_DISTANCE = "GPSDestDistance";
  public static final String TAG_GPS_DEST_DISTANCE_REF = "GPSDestDistanceRef";
  public static final String TAG_GPS_DEST_LATITUDE = "GPSDestLatitude";
  public static final String TAG_GPS_DEST_LATITUDE_REF = "GPSDestLatitudeRef";
  public static final String TAG_GPS_DEST_LONGITUDE = "GPSDestLongitude";
  public static final String TAG_GPS_DEST_LONGITUDE_REF = "GPSDestLongitudeRef";
  public static final String TAG_GPS_DIFFERENTIAL = "GPSDifferential";
  public static final String TAG_GPS_DOP = "GPSDOP";
  public static final String TAG_GPS_H_POSITIONING_ERROR = "GPSHPositioningError";
  public static final String TAG_GPS_IMG_DIRECTION = "GPSImgDirection";
  public static final String TAG_GPS_IMG_DIRECTION_REF = "GPSImgDirectionRef";
  private static final String TAG_GPS_INFO_IFD_POINTER = "GPSInfoIFDPointer";
  public static final String TAG_GPS_LATITUDE = "GPSLatitude";
  public static final String TAG_GPS_LATITUDE_REF = "GPSLatitudeRef";
  public static final String TAG_GPS_LONGITUDE = "GPSLongitude";
  public static final String TAG_GPS_LONGITUDE_REF = "GPSLongitudeRef";
  public static final String TAG_GPS_MAP_DATUM = "GPSMapDatum";
  public static final String TAG_GPS_MEASURE_MODE = "GPSMeasureMode";
  public static final String TAG_GPS_PROCESSING_METHOD = "GPSProcessingMethod";
  public static final String TAG_GPS_SATELLITES = "GPSSatellites";
  public static final String TAG_GPS_SPEED = "GPSSpeed";
  public static final String TAG_GPS_SPEED_REF = "GPSSpeedRef";
  public static final String TAG_GPS_STATUS = "GPSStatus";
  public static final String TAG_GPS_TIMESTAMP = "GPSTimeStamp";
  public static final String TAG_GPS_TRACK = "GPSTrack";
  public static final String TAG_GPS_TRACK_REF = "GPSTrackRef";
  public static final String TAG_GPS_VERSION_ID = "GPSVersionID";
  private static final String TAG_HAS_THUMBNAIL = "HasThumbnail";
  public static final String TAG_IMAGE_DESCRIPTION = "ImageDescription";
  public static final String TAG_IMAGE_LENGTH = "ImageLength";
  public static final String TAG_IMAGE_UNIQUE_ID = "ImageUniqueID";
  public static final String TAG_IMAGE_WIDTH = "ImageWidth";
  private static final String TAG_INTEROPERABILITY_IFD_POINTER = "InteroperabilityIFDPointer";
  public static final String TAG_INTEROPERABILITY_INDEX = "InteroperabilityIndex";
  public static final String TAG_ISO_SPEED = "ISOSpeed";
  public static final String TAG_ISO_SPEED_LATITUDE_YYY = "ISOSpeedLatitudeyyy";
  public static final String TAG_ISO_SPEED_LATITUDE_ZZZ = "ISOSpeedLatitudezzz";
  @Deprecated
  public static final String TAG_ISO_SPEED_RATINGS = "ISOSpeedRatings";
  public static final String TAG_JPEG_INTERCHANGE_FORMAT = "JPEGInterchangeFormat";
  public static final String TAG_JPEG_INTERCHANGE_FORMAT_LENGTH = "JPEGInterchangeFormatLength";
  public static final String TAG_LENS_MAKE = "LensMake";
  public static final String TAG_LENS_MODEL = "LensModel";
  public static final String TAG_LENS_SERIAL_NUMBER = "LensSerialNumber";
  public static final String TAG_LENS_SPECIFICATION = "LensSpecification";
  public static final String TAG_LIGHT_SOURCE = "LightSource";
  public static final String TAG_MAKE = "Make";
  public static final String TAG_MAKER_NOTE = "MakerNote";
  public static final String TAG_MAX_APERTURE_VALUE = "MaxApertureValue";
  public static final String TAG_METERING_MODE = "MeteringMode";
  public static final String TAG_MODEL = "Model";
  public static final String TAG_NEW_SUBFILE_TYPE = "NewSubfileType";
  public static final String TAG_OECF = "OECF";
  public static final String TAG_ORF_ASPECT_FRAME = "AspectFrame";
  private static final String TAG_ORF_CAMERA_SETTINGS_IFD_POINTER = "CameraSettingsIFDPointer";
  private static final String TAG_ORF_IMAGE_PROCESSING_IFD_POINTER = "ImageProcessingIFDPointer";
  public static final String TAG_ORF_PREVIEW_IMAGE_LENGTH = "PreviewImageLength";
  public static final String TAG_ORF_PREVIEW_IMAGE_START = "PreviewImageStart";
  public static final String TAG_ORF_THUMBNAIL_IMAGE = "ThumbnailImage";
  public static final String TAG_ORIENTATION = "Orientation";
  public static final String TAG_PHOTOGRAPHIC_SENSITIVITY = "PhotographicSensitivity";
  public static final String TAG_PHOTOMETRIC_INTERPRETATION = "PhotometricInterpretation";
  public static final String TAG_PIXEL_X_DIMENSION = "PixelXDimension";
  public static final String TAG_PIXEL_Y_DIMENSION = "PixelYDimension";
  public static final String TAG_PLANAR_CONFIGURATION = "PlanarConfiguration";
  public static final String TAG_PRIMARY_CHROMATICITIES = "PrimaryChromaticities";
  private static final ExifTag TAG_RAF_IMAGE_SIZE;
  public static final String TAG_RECOMMENDED_EXPOSURE_INDEX = "RecommendedExposureIndex";
  public static final String TAG_REFERENCE_BLACK_WHITE = "ReferenceBlackWhite";
  public static final String TAG_RELATED_SOUND_FILE = "RelatedSoundFile";
  public static final String TAG_RESOLUTION_UNIT = "ResolutionUnit";
  public static final String TAG_ROWS_PER_STRIP = "RowsPerStrip";
  public static final String TAG_RW2_ISO = "ISO";
  public static final String TAG_RW2_JPG_FROM_RAW = "JpgFromRaw";
  public static final String TAG_RW2_SENSOR_BOTTOM_BORDER = "SensorBottomBorder";
  public static final String TAG_RW2_SENSOR_LEFT_BORDER = "SensorLeftBorder";
  public static final String TAG_RW2_SENSOR_RIGHT_BORDER = "SensorRightBorder";
  public static final String TAG_RW2_SENSOR_TOP_BORDER = "SensorTopBorder";
  public static final String TAG_SAMPLES_PER_PIXEL = "SamplesPerPixel";
  public static final String TAG_SATURATION = "Saturation";
  public static final String TAG_SCENE_CAPTURE_TYPE = "SceneCaptureType";
  public static final String TAG_SCENE_TYPE = "SceneType";
  public static final String TAG_SENSING_METHOD = "SensingMethod";
  public static final String TAG_SENSITIVITY_TYPE = "SensitivityType";
  public static final String TAG_SHARPNESS = "Sharpness";
  public static final String TAG_SHUTTER_SPEED_VALUE = "ShutterSpeedValue";
  public static final String TAG_SOFTWARE = "Software";
  public static final String TAG_SPATIAL_FREQUENCY_RESPONSE = "SpatialFrequencyResponse";
  public static final String TAG_SPECTRAL_SENSITIVITY = "SpectralSensitivity";
  public static final String TAG_STANDARD_OUTPUT_SENSITIVITY = "StandardOutputSensitivity";
  public static final String TAG_STRIP_BYTE_COUNTS = "StripByteCounts";
  public static final String TAG_STRIP_OFFSETS = "StripOffsets";
  public static final String TAG_SUBFILE_TYPE = "SubfileType";
  public static final String TAG_SUBJECT_AREA = "SubjectArea";
  public static final String TAG_SUBJECT_DISTANCE = "SubjectDistance";
  public static final String TAG_SUBJECT_DISTANCE_RANGE = "SubjectDistanceRange";
  public static final String TAG_SUBJECT_LOCATION = "SubjectLocation";
  public static final String TAG_SUBSEC_TIME = "SubSecTime";
  public static final String TAG_SUBSEC_TIME_DIGITIZED = "SubSecTimeDigitized";
  public static final String TAG_SUBSEC_TIME_ORIGINAL = "SubSecTimeOriginal";
  private static final String TAG_SUB_IFD_POINTER = "SubIFDPointer";
  private static final String TAG_THUMBNAIL_DATA = "ThumbnailData";
  public static final String TAG_THUMBNAIL_IMAGE_LENGTH = "ThumbnailImageLength";
  public static final String TAG_THUMBNAIL_IMAGE_WIDTH = "ThumbnailImageWidth";
  private static final String TAG_THUMBNAIL_LENGTH = "ThumbnailLength";
  private static final String TAG_THUMBNAIL_OFFSET = "ThumbnailOffset";
  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY})
  public static final String TAG_THUMBNAIL_ORIENTATION = "ThumbnailOrientation";
  public static final String TAG_TRANSFER_FUNCTION = "TransferFunction";
  public static final String TAG_USER_COMMENT = "UserComment";
  public static final String TAG_WHITE_BALANCE = "WhiteBalance";
  public static final String TAG_WHITE_POINT = "WhitePoint";
  public static final String TAG_XMP = "Xmp";
  public static final String TAG_X_RESOLUTION = "XResolution";
  public static final String TAG_Y_CB_CR_COEFFICIENTS = "YCbCrCoefficients";
  public static final String TAG_Y_CB_CR_POSITIONING = "YCbCrPositioning";
  public static final String TAG_Y_CB_CR_SUB_SAMPLING = "YCbCrSubSampling";
  public static final String TAG_Y_RESOLUTION = "YResolution";
  @Deprecated
  public static final int WHITEBALANCE_AUTO = 0;
  @Deprecated
  public static final int WHITEBALANCE_MANUAL = 1;
  public static final short WHITE_BALANCE_AUTO = 0;
  public static final short WHITE_BALANCE_MANUAL = 1;
  public static final short Y_CB_CR_POSITIONING_CENTERED = 1;
  public static final short Y_CB_CR_POSITIONING_CO_SITED = 2;
  private static final HashMap<Integer, Integer> sExifPointerTagMap;
  private static final HashMap<Integer, ExifTag>[] sExifTagMapsForReading;
  private static final HashMap<String, ExifTag>[] sExifTagMapsForWriting;
  private static SimpleDateFormat sFormatter;
  private static final Pattern sGpsTimestampPattern = Pattern.compile("^([0-9][0-9]):([0-9][0-9]):([0-9][0-9])$");
  private static final Pattern sNonZeroTimePattern;
  private static final HashSet<String> sTagSetForCompatibility;
  private AssetManager.AssetInputStream mAssetInputStream;
  private final HashMap<String, ExifAttribute>[] mAttributes = new HashMap[EXIF_TAGS.length];
  private Set<Integer> mAttributesOffsets = new HashSet(EXIF_TAGS.length);
  private ByteOrder mExifByteOrder = ByteOrder.BIG_ENDIAN;
  private int mExifOffset;
  private String mFilename;
  private boolean mHasThumbnail;
  private boolean mIsSupportedFile;
  private int mMimeType;
  private boolean mModified;
  private int mOrfMakerNoteOffset;
  private int mOrfThumbnailLength;
  private int mOrfThumbnailOffset;
  private int mRw2JpgFromRawOffset;
  private FileDescriptor mSeekableFileDescriptor;
  private byte[] mThumbnailBytes;
  private int mThumbnailCompression;
  private int mThumbnailLength;
  private int mThumbnailOffset;
  
  static
  {
    FLIPPED_ROTATION_ORDER = Arrays.asList(new Integer[] { Integer.valueOf(2), Integer.valueOf(7), Integer.valueOf(4), Integer.valueOf(5) });
    BITS_PER_SAMPLE_RGB = new int[] { 8, 8, 8 };
    BITS_PER_SAMPLE_GREYSCALE_1 = new int[] { 4 };
    BITS_PER_SAMPLE_GREYSCALE_2 = new int[] { 8 };
    JPEG_SIGNATURE = new byte[] { -1, -40, -1 };
    HEIF_TYPE_FTYP = new byte[] { 102, 116, 121, 112 };
    HEIF_BRAND_MIF1 = new byte[] { 109, 105, 102, 49 };
    HEIF_BRAND_HEIC = new byte[] { 104, 101, 105, 99 };
    ORF_MAKER_NOTE_HEADER_1 = new byte[] { 79, 76, 89, 77, 80, 0 };
    ORF_MAKER_NOTE_HEADER_2 = new byte[] { 79, 76, 89, 77, 80, 85, 83, 0, 73, 73 };
    IFD_FORMAT_NAMES = new String[] { "", "BYTE", "STRING", "USHORT", "ULONG", "URATIONAL", "SBYTE", "UNDEFINED", "SSHORT", "SLONG", "SRATIONAL", "SINGLE", "DOUBLE", "IFD" };
    IFD_FORMAT_BYTES_PER_FORMAT = new int[] { 0, 1, 1, 2, 4, 8, 1, 1, 2, 4, 8, 4, 8, 1 };
    EXIF_ASCII_PREFIX = new byte[] { 65, 83, 67, 73, 73, 0, 0, 0 };
    IFD_TIFF_TAGS = new ExifTag[] { new ExifTag("NewSubfileType", 254, 4), new ExifTag("SubfileType", 255, 4), new ExifTag("ImageWidth", 256, 3, 4), new ExifTag("ImageLength", 257, 3, 4), new ExifTag("BitsPerSample", 258, 3), new ExifTag("Compression", 259, 3), new ExifTag("PhotometricInterpretation", 262, 3), new ExifTag("ImageDescription", 270, 2), new ExifTag("Make", 271, 2), new ExifTag("Model", 272, 2), new ExifTag("StripOffsets", 273, 3, 4), new ExifTag("Orientation", 274, 3), new ExifTag("SamplesPerPixel", 277, 3), new ExifTag("RowsPerStrip", 278, 3, 4), new ExifTag("StripByteCounts", 279, 3, 4), new ExifTag("XResolution", 282, 5), new ExifTag("YResolution", 283, 5), new ExifTag("PlanarConfiguration", 284, 3), new ExifTag("ResolutionUnit", 296, 3), new ExifTag("TransferFunction", 301, 3), new ExifTag("Software", 305, 2), new ExifTag("DateTime", 306, 2), new ExifTag("Artist", 315, 2), new ExifTag("WhitePoint", 318, 5), new ExifTag("PrimaryChromaticities", 319, 5), new ExifTag("SubIFDPointer", 330, 4), new ExifTag("JPEGInterchangeFormat", 513, 4), new ExifTag("JPEGInterchangeFormatLength", 514, 4), new ExifTag("YCbCrCoefficients", 529, 5), new ExifTag("YCbCrSubSampling", 530, 3), new ExifTag("YCbCrPositioning", 531, 3), new ExifTag("ReferenceBlackWhite", 532, 5), new ExifTag("Copyright", 33432, 2), new ExifTag("ExifIFDPointer", 34665, 4), new ExifTag("GPSInfoIFDPointer", 34853, 4), new ExifTag("SensorTopBorder", 4, 4), new ExifTag("SensorLeftBorder", 5, 4), new ExifTag("SensorBottomBorder", 6, 4), new ExifTag("SensorRightBorder", 7, 4), new ExifTag("ISO", 23, 3), new ExifTag("JpgFromRaw", 46, 7), new ExifTag("Xmp", 700, 1) };
    IFD_EXIF_TAGS = new ExifTag[] { new ExifTag("ExposureTime", 33434, 5), new ExifTag("FNumber", 33437, 5), new ExifTag("ExposureProgram", 34850, 3), new ExifTag("SpectralSensitivity", 34852, 2), new ExifTag("PhotographicSensitivity", 34855, 3), new ExifTag("OECF", 34856, 7), new ExifTag("ExifVersion", 36864, 2), new ExifTag("DateTimeOriginal", 36867, 2), new ExifTag("DateTimeDigitized", 36868, 2), new ExifTag("ComponentsConfiguration", 37121, 7), new ExifTag("CompressedBitsPerPixel", 37122, 5), new ExifTag("ShutterSpeedValue", 37377, 10), new ExifTag("ApertureValue", 37378, 5), new ExifTag("BrightnessValue", 37379, 10), new ExifTag("ExposureBiasValue", 37380, 10), new ExifTag("MaxApertureValue", 37381, 5), new ExifTag("SubjectDistance", 37382, 5), new ExifTag("MeteringMode", 37383, 3), new ExifTag("LightSource", 37384, 3), new ExifTag("Flash", 37385, 3), new ExifTag("FocalLength", 37386, 5), new ExifTag("SubjectArea", 37396, 3), new ExifTag("MakerNote", 37500, 7), new ExifTag("UserComment", 37510, 7), new ExifTag("SubSecTime", 37520, 2), new ExifTag("SubSecTimeOriginal", 37521, 2), new ExifTag("SubSecTimeDigitized", 37522, 2), new ExifTag("FlashpixVersion", 40960, 7), new ExifTag("ColorSpace", 40961, 3), new ExifTag("PixelXDimension", 40962, 3, 4), new ExifTag("PixelYDimension", 40963, 3, 4), new ExifTag("RelatedSoundFile", 40964, 2), new ExifTag("InteroperabilityIFDPointer", 40965, 4), new ExifTag("FlashEnergy", 41483, 5), new ExifTag("SpatialFrequencyResponse", 41484, 7), new ExifTag("FocalPlaneXResolution", 41486, 5), new ExifTag("FocalPlaneYResolution", 41487, 5), new ExifTag("FocalPlaneResolutionUnit", 41488, 3), new ExifTag("SubjectLocation", 41492, 3), new ExifTag("ExposureIndex", 41493, 5), new ExifTag("SensingMethod", 41495, 3), new ExifTag("FileSource", 41728, 7), new ExifTag("SceneType", 41729, 7), new ExifTag("CFAPattern", 41730, 7), new ExifTag("CustomRendered", 41985, 3), new ExifTag("ExposureMode", 41986, 3), new ExifTag("WhiteBalance", 41987, 3), new ExifTag("DigitalZoomRatio", 41988, 5), new ExifTag("FocalLengthIn35mmFilm", 41989, 3), new ExifTag("SceneCaptureType", 41990, 3), new ExifTag("GainControl", 41991, 3), new ExifTag("Contrast", 41992, 3), new ExifTag("Saturation", 41993, 3), new ExifTag("Sharpness", 41994, 3), new ExifTag("DeviceSettingDescription", 41995, 7), new ExifTag("SubjectDistanceRange", 41996, 3), new ExifTag("ImageUniqueID", 42016, 2), new ExifTag("DNGVersion", 50706, 1), new ExifTag("DefaultCropSize", 50720, 3, 4) };
    IFD_GPS_TAGS = new ExifTag[] { new ExifTag("GPSVersionID", 0, 1), new ExifTag("GPSLatitudeRef", 1, 2), new ExifTag("GPSLatitude", 2, 5), new ExifTag("GPSLongitudeRef", 3, 2), new ExifTag("GPSLongitude", 4, 5), new ExifTag("GPSAltitudeRef", 5, 1), new ExifTag("GPSAltitude", 6, 5), new ExifTag("GPSTimeStamp", 7, 5), new ExifTag("GPSSatellites", 8, 2), new ExifTag("GPSStatus", 9, 2), new ExifTag("GPSMeasureMode", 10, 2), new ExifTag("GPSDOP", 11, 5), new ExifTag("GPSSpeedRef", 12, 2), new ExifTag("GPSSpeed", 13, 5), new ExifTag("GPSTrackRef", 14, 2), new ExifTag("GPSTrack", 15, 5), new ExifTag("GPSImgDirectionRef", 16, 2), new ExifTag("GPSImgDirection", 17, 5), new ExifTag("GPSMapDatum", 18, 2), new ExifTag("GPSDestLatitudeRef", 19, 2), new ExifTag("GPSDestLatitude", 20, 5), new ExifTag("GPSDestLongitudeRef", 21, 2), new ExifTag("GPSDestLongitude", 22, 5), new ExifTag("GPSDestBearingRef", 23, 2), new ExifTag("GPSDestBearing", 24, 5), new ExifTag("GPSDestDistanceRef", 25, 2), new ExifTag("GPSDestDistance", 26, 5), new ExifTag("GPSProcessingMethod", 27, 7), new ExifTag("GPSAreaInformation", 28, 7), new ExifTag("GPSDateStamp", 29, 2), new ExifTag("GPSDifferential", 30, 3) };
    IFD_INTEROPERABILITY_TAGS = new ExifTag[] { new ExifTag("InteroperabilityIndex", 1, 2) };
    IFD_THUMBNAIL_TAGS = new ExifTag[] { new ExifTag("NewSubfileType", 254, 4), new ExifTag("SubfileType", 255, 4), new ExifTag("ThumbnailImageWidth", 256, 3, 4), new ExifTag("ThumbnailImageLength", 257, 3, 4), new ExifTag("BitsPerSample", 258, 3), new ExifTag("Compression", 259, 3), new ExifTag("PhotometricInterpretation", 262, 3), new ExifTag("ImageDescription", 270, 2), new ExifTag("Make", 271, 2), new ExifTag("Model", 272, 2), new ExifTag("StripOffsets", 273, 3, 4), new ExifTag("ThumbnailOrientation", 274, 3), new ExifTag("SamplesPerPixel", 277, 3), new ExifTag("RowsPerStrip", 278, 3, 4), new ExifTag("StripByteCounts", 279, 3, 4), new ExifTag("XResolution", 282, 5), new ExifTag("YResolution", 283, 5), new ExifTag("PlanarConfiguration", 284, 3), new ExifTag("ResolutionUnit", 296, 3), new ExifTag("TransferFunction", 301, 3), new ExifTag("Software", 305, 2), new ExifTag("DateTime", 306, 2), new ExifTag("Artist", 315, 2), new ExifTag("WhitePoint", 318, 5), new ExifTag("PrimaryChromaticities", 319, 5), new ExifTag("SubIFDPointer", 330, 4), new ExifTag("JPEGInterchangeFormat", 513, 4), new ExifTag("JPEGInterchangeFormatLength", 514, 4), new ExifTag("YCbCrCoefficients", 529, 5), new ExifTag("YCbCrSubSampling", 530, 3), new ExifTag("YCbCrPositioning", 531, 3), new ExifTag("ReferenceBlackWhite", 532, 5), new ExifTag("Copyright", 33432, 2), new ExifTag("ExifIFDPointer", 34665, 4), new ExifTag("GPSInfoIFDPointer", 34853, 4), new ExifTag("DNGVersion", 50706, 1), new ExifTag("DefaultCropSize", 50720, 3, 4) };
    TAG_RAF_IMAGE_SIZE = new ExifTag("StripOffsets", 273, 3);
    ORF_MAKER_NOTE_TAGS = new ExifTag[] { new ExifTag("ThumbnailImage", 256, 7), new ExifTag("CameraSettingsIFDPointer", 8224, 4), new ExifTag("ImageProcessingIFDPointer", 8256, 4) };
    ORF_CAMERA_SETTINGS_TAGS = new ExifTag[] { new ExifTag("PreviewImageStart", 257, 4), new ExifTag("PreviewImageLength", 258, 4) };
    ORF_IMAGE_PROCESSING_TAGS = new ExifTag[] { new ExifTag("AspectFrame", 4371, 3) };
    PEF_TAGS = new ExifTag[] { new ExifTag("ColorSpace", 55, 3) };
    EXIF_TAGS = new ExifTag[][] { IFD_TIFF_TAGS, IFD_EXIF_TAGS, IFD_GPS_TAGS, IFD_INTEROPERABILITY_TAGS, IFD_THUMBNAIL_TAGS, IFD_TIFF_TAGS, ORF_MAKER_NOTE_TAGS, ORF_CAMERA_SETTINGS_TAGS, ORF_IMAGE_PROCESSING_TAGS, PEF_TAGS };
    EXIF_POINTER_TAGS = new ExifTag[] { new ExifTag("SubIFDPointer", 330, 4), new ExifTag("ExifIFDPointer", 34665, 4), new ExifTag("GPSInfoIFDPointer", 34853, 4), new ExifTag("InteroperabilityIFDPointer", 40965, 4), new ExifTag("CameraSettingsIFDPointer", 8224, 1), new ExifTag("ImageProcessingIFDPointer", 8256, 1) };
    JPEG_INTERCHANGE_FORMAT_TAG = new ExifTag("JPEGInterchangeFormat", 513, 4);
    JPEG_INTERCHANGE_FORMAT_LENGTH_TAG = new ExifTag("JPEGInterchangeFormatLength", 514, 4);
    sExifTagMapsForReading = new HashMap[EXIF_TAGS.length];
    sExifTagMapsForWriting = new HashMap[EXIF_TAGS.length];
    sTagSetForCompatibility = new HashSet(Arrays.asList(new String[] { "FNumber", "DigitalZoomRatio", "ExposureTime", "SubjectDistance", "GPSTimeStamp" }));
    sExifPointerTagMap = new HashMap();
    ASCII = Charset.forName("US-ASCII");
    IDENTIFIER_EXIF_APP1 = "Exif\000\000".getBytes(ASCII);
    IDENTIFIER_XMP_APP1 = "http://ns.adobe.com/xap/1.0/\000".getBytes(ASCII);
    sFormatter = new SimpleDateFormat("yyyy:MM:dd HH:mm:ss");
    sFormatter.setTimeZone(TimeZone.getTimeZone("UTC"));
    int i = 0;
    while (i < EXIF_TAGS.length)
    {
      sExifTagMapsForReading[i] = new HashMap();
      sExifTagMapsForWriting[i] = new HashMap();
      ExifTag[] arrayOfExifTag = EXIF_TAGS[i];
      int k = arrayOfExifTag.length;
      int j = 0;
      while (j < k)
      {
        ExifTag localExifTag = arrayOfExifTag[j];
        sExifTagMapsForReading[i].put(Integer.valueOf(number), localExifTag);
        sExifTagMapsForWriting[i].put(name, localExifTag);
        j += 1;
      }
      i += 1;
    }
    sExifPointerTagMap.put(Integer.valueOf(EXIF_POINTER_TAGS0number), Integer.valueOf(5));
    sExifPointerTagMap.put(Integer.valueOf(EXIF_POINTER_TAGS1number), Integer.valueOf(1));
    sExifPointerTagMap.put(Integer.valueOf(EXIF_POINTER_TAGS2number), Integer.valueOf(2));
    sExifPointerTagMap.put(Integer.valueOf(EXIF_POINTER_TAGS3number), Integer.valueOf(3));
    sExifPointerTagMap.put(Integer.valueOf(EXIF_POINTER_TAGS4number), Integer.valueOf(7));
    sExifPointerTagMap.put(Integer.valueOf(EXIF_POINTER_TAGS5number), Integer.valueOf(8));
    sNonZeroTimePattern = Pattern.compile(".*[1-9].*");
  }
  
  public ExifInterface(@NonNull File paramFile)
    throws IOException
  {
    if (paramFile != null)
    {
      initForFilename(paramFile.getAbsolutePath());
      return;
    }
    throw new NullPointerException("file cannot be null");
  }
  
  /* Error */
  public ExifInterface(@NonNull FileDescriptor paramFileDescriptor)
    throws IOException
  {
    // Byte code:
    //   0: aload_0
    //   1: invokespecial 1195	java/lang/Object:<init>	()V
    //   4: aload_0
    //   5: getstatic 1099	androidx/exifinterface/media/ExifInterface:EXIF_TAGS	[[Landroidx/exifinterface/media/ExifInterface$ExifTag;
    //   8: arraylength
    //   9: anewarray 1107	java/util/HashMap
    //   12: putfield 1197	androidx/exifinterface/media/ExifInterface:mAttributes	[Ljava/util/HashMap;
    //   15: aload_0
    //   16: new 1113	java/util/HashSet
    //   19: dup
    //   20: getstatic 1099	androidx/exifinterface/media/ExifInterface:EXIF_TAGS	[[Landroidx/exifinterface/media/ExifInterface$ExifTag;
    //   23: arraylength
    //   24: invokespecial 1200	java/util/HashSet:<init>	(I)V
    //   27: putfield 1202	androidx/exifinterface/media/ExifInterface:mAttributesOffsets	Ljava/util/Set;
    //   30: aload_0
    //   31: getstatic 1207	java/nio/ByteOrder:BIG_ENDIAN	Ljava/nio/ByteOrder;
    //   34: putfield 1209	androidx/exifinterface/media/ExifInterface:mExifByteOrder	Ljava/nio/ByteOrder;
    //   37: aload_1
    //   38: ifnull +120 -> 158
    //   41: aconst_null
    //   42: astore 4
    //   44: aload_0
    //   45: aconst_null
    //   46: putfield 1230	androidx/exifinterface/media/ExifInterface:mAssetInputStream	Landroid/content/res/AssetManager$AssetInputStream;
    //   49: aload_0
    //   50: aconst_null
    //   51: putfield 1232	androidx/exifinterface/media/ExifInterface:mFilename	Ljava/lang/String;
    //   54: iconst_0
    //   55: istore_2
    //   56: getstatic 1237	android/os/Build$VERSION:SDK_INT	I
    //   59: bipush 21
    //   61: if_icmplt +38 -> 99
    //   64: aload_1
    //   65: invokestatic 1241	androidx/exifinterface/media/ExifInterface:isSeekableFD	(Ljava/io/FileDescriptor;)Z
    //   68: ifeq +31 -> 99
    //   71: aload_0
    //   72: aload_1
    //   73: putfield 1243	androidx/exifinterface/media/ExifInterface:mSeekableFileDescriptor	Ljava/io/FileDescriptor;
    //   76: aload_1
    //   77: invokestatic 1249	android/system/Os:dup	(Ljava/io/FileDescriptor;)Ljava/io/FileDescriptor;
    //   80: astore_1
    //   81: iconst_1
    //   82: istore_2
    //   83: goto +21 -> 104
    //   86: astore_1
    //   87: new 1193	java/io/IOException
    //   90: dup
    //   91: ldc_w 1251
    //   94: aload_1
    //   95: invokespecial 1254	java/io/IOException:<init>	(Ljava/lang/String;Ljava/lang/Throwable;)V
    //   98: athrow
    //   99: aload_0
    //   100: aconst_null
    //   101: putfield 1243	androidx/exifinterface/media/ExifInterface:mSeekableFileDescriptor	Ljava/io/FileDescriptor;
    //   104: new 1256	java/io/FileInputStream
    //   107: dup
    //   108: aload_1
    //   109: invokespecial 1258	java/io/FileInputStream:<init>	(Ljava/io/FileDescriptor;)V
    //   112: astore 5
    //   114: aload_0
    //   115: aload 5
    //   117: invokespecial 1262	androidx/exifinterface/media/ExifInterface:loadAttributes	(Ljava/io/InputStream;)V
    //   120: aload 5
    //   122: invokestatic 1266	androidx/exifinterface/media/ExifInterface:closeQuietly	(Ljava/io/Closeable;)V
    //   125: iload_2
    //   126: ifeq +7 -> 133
    //   129: aload_1
    //   130: invokestatic 1269	androidx/exifinterface/media/ExifInterface:closeFileDescriptor	(Ljava/io/FileDescriptor;)V
    //   133: return
    //   134: astore_3
    //   135: aload 5
    //   137: astore 4
    //   139: goto +4 -> 143
    //   142: astore_3
    //   143: aload 4
    //   145: invokestatic 1266	androidx/exifinterface/media/ExifInterface:closeQuietly	(Ljava/io/Closeable;)V
    //   148: iload_2
    //   149: ifeq +7 -> 156
    //   152: aload_1
    //   153: invokestatic 1269	androidx/exifinterface/media/ExifInterface:closeFileDescriptor	(Ljava/io/FileDescriptor;)V
    //   156: aload_3
    //   157: athrow
    //   158: new 1220	java/lang/NullPointerException
    //   161: dup
    //   162: ldc_w 1271
    //   165: invokespecial 1223	java/lang/NullPointerException:<init>	(Ljava/lang/String;)V
    //   168: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	169	0	this	ExifInterface
    //   0	169	1	paramFileDescriptor	FileDescriptor
    //   55	94	2	i	int
    //   134	1	3	localObject1	Object
    //   142	15	3	localObject2	Object
    //   42	102	4	localObject3	Object
    //   112	24	5	localFileInputStream	FileInputStream
    // Exception table:
    //   from	to	target	type
    //   76	81	86	java/lang/Exception
    //   114	120	134	finally
    //   104	114	142	finally
  }
  
  public ExifInterface(@NonNull InputStream paramInputStream)
    throws IOException
  {
    if (paramInputStream != null)
    {
      mFilename = null;
      if ((paramInputStream instanceof AssetManager.AssetInputStream))
      {
        mAssetInputStream = ((AssetManager.AssetInputStream)paramInputStream);
        mSeekableFileDescriptor = null;
      }
      else
      {
        if ((paramInputStream instanceof FileInputStream))
        {
          FileInputStream localFileInputStream = (FileInputStream)paramInputStream;
          if (isSeekableFD(localFileInputStream.getFD()))
          {
            mAssetInputStream = null;
            mSeekableFileDescriptor = localFileInputStream.getFD();
            break label117;
          }
        }
        mAssetInputStream = null;
        mSeekableFileDescriptor = null;
      }
      label117:
      loadAttributes(paramInputStream);
      return;
    }
    throw new NullPointerException("inputStream cannot be null");
  }
  
  public ExifInterface(@NonNull String paramString)
    throws IOException
  {
    if (paramString != null)
    {
      initForFilename(paramString);
      return;
    }
    throw new NullPointerException("filename cannot be null");
  }
  
  private void addDefaultValuesForCompatibility()
  {
    String str = getAttribute("DateTimeOriginal");
    if ((str != null) && (getAttribute("DateTime") == null)) {
      mAttributes[0].put("DateTime", ExifAttribute.createString(str));
    }
    if (getAttribute("ImageWidth") == null) {
      mAttributes[0].put("ImageWidth", ExifAttribute.createULong(0L, mExifByteOrder));
    }
    if (getAttribute("ImageLength") == null) {
      mAttributes[0].put("ImageLength", ExifAttribute.createULong(0L, mExifByteOrder));
    }
    if (getAttribute("Orientation") == null) {
      mAttributes[0].put("Orientation", ExifAttribute.createULong(0L, mExifByteOrder));
    }
    if (getAttribute("LightSource") == null) {
      mAttributes[1].put("LightSource", ExifAttribute.createULong(0L, mExifByteOrder));
    }
  }
  
  private static void closeFileDescriptor(FileDescriptor paramFileDescriptor)
  {
    if (Build.VERSION.SDK_INT >= 21) {}
    try
    {
      Os.close(paramFileDescriptor);
      return;
    }
    catch (Exception paramFileDescriptor)
    {
      for (;;) {}
    }
    Log.e("ExifInterface", "Error closing fd.");
    return;
    Log.e("ExifInterface", "closeFileDescriptor is called in API < 21, which must be wrong.");
  }
  
  private static void closeQuietly(Closeable paramCloseable)
  {
    if (paramCloseable != null) {}
    try
    {
      paramCloseable.close();
      return;
    }
    catch (RuntimeException paramCloseable)
    {
      throw paramCloseable;
      return;
    }
    catch (Exception paramCloseable) {}
  }
  
  private String convertDecimalDegree(double paramDouble)
  {
    long l1 = paramDouble;
    paramDouble -= l1;
    long l2 = (paramDouble * 60.0D);
    long l3 = Math.round((paramDouble - l2 / 60.0D) * 3600.0D * 1.0E7D);
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(l1);
    localStringBuilder.append("/1,");
    localStringBuilder.append(l2);
    localStringBuilder.append("/1,");
    localStringBuilder.append(l3);
    localStringBuilder.append("/10000000");
    return localStringBuilder.toString();
  }
  
  private static double convertRationalLatLonToDouble(String paramString1, String paramString2)
  {
    try
    {
      paramString1 = paramString1.split(",", -1);
      String[] arrayOfString = paramString1[0].split("/", -1);
      double d1 = Double.parseDouble(arrayOfString[0].trim()) / Double.parseDouble(arrayOfString[1].trim());
      arrayOfString = paramString1[1].split("/", -1);
      double d2 = Double.parseDouble(arrayOfString[0].trim()) / Double.parseDouble(arrayOfString[1].trim());
      paramString1 = paramString1[2].split("/", -1);
      double d3 = Double.parseDouble(paramString1[0].trim()) / Double.parseDouble(paramString1[1].trim());
      d1 = d1 + d2 / 60.0D + d3 / 3600.0D;
      if ((!paramString2.equals("S")) && (!paramString2.equals("W")))
      {
        if (!paramString2.equals("N"))
        {
          if (paramString2.equals("E")) {
            return d1;
          }
          throw new IllegalArgumentException();
        }
        return d1;
      }
      return -d1;
    }
    catch (NumberFormatException|ArrayIndexOutOfBoundsException paramString1)
    {
      for (;;) {}
    }
    throw new IllegalArgumentException();
  }
  
  private static long[] convertToLongArray(Object paramObject)
  {
    if ((paramObject instanceof int[]))
    {
      paramObject = (int[])paramObject;
      long[] arrayOfLong = new long[paramObject.length];
      int i = 0;
      while (i < paramObject.length)
      {
        arrayOfLong[i] = paramObject[i];
        i += 1;
      }
      return arrayOfLong;
    }
    if ((paramObject instanceof long[])) {
      return (long[])paramObject;
    }
    return null;
  }
  
  private static int copy(InputStream paramInputStream, OutputStream paramOutputStream)
    throws IOException
  {
    byte[] arrayOfByte = new byte['?'];
    int i = 0;
    for (;;)
    {
      int j = paramInputStream.read(arrayOfByte);
      if (j == -1) {
        break;
      }
      i += j;
      paramOutputStream.write(arrayOfByte, 0, j);
    }
    return i;
  }
  
  @Nullable
  private ExifAttribute getExifAttribute(@NonNull String paramString)
  {
    if (paramString != null)
    {
      String str = paramString;
      if ("ISOSpeedRatings".equals(paramString))
      {
        if (DEBUG) {
          Log.d("ExifInterface", "getExifAttribute: Replacing TAG_ISO_SPEED_RATINGS with TAG_PHOTOGRAPHIC_SENSITIVITY.");
        }
        str = "PhotographicSensitivity";
      }
      int i = 0;
      while (i < EXIF_TAGS.length)
      {
        paramString = (ExifAttribute)mAttributes[i].get(str);
        if (paramString != null) {
          return paramString;
        }
        i += 1;
      }
      return null;
    }
    throw new NullPointerException("tag shouldn't be null");
  }
  
  private void getHeifAttributes(final ByteOrderedDataInputStream paramByteOrderedDataInputStream)
    throws IOException
  {
    MediaMetadataRetriever localMediaMetadataRetriever = new MediaMetadataRetriever();
    for (;;)
    {
      try
      {
        if (Build.VERSION.SDK_INT >= 23)
        {
          localMediaMetadataRetriever.setDataSource(new MediaDataSource()
          {
            long mPosition;
            
            public void close()
              throws IOException
            {}
            
            public long getSize()
              throws IOException
            {
              return -1L;
            }
            
            public int readAt(long paramAnonymousLong, byte[] paramAnonymousArrayOfByte, int paramAnonymousInt1, int paramAnonymousInt2)
              throws IOException
            {
              if (paramAnonymousInt2 == 0) {
                return 0;
              }
              if (paramAnonymousLong < 0L) {
                return -1;
              }
              try
              {
                if (mPosition != paramAnonymousLong)
                {
                  if ((mPosition >= 0L) && (paramAnonymousLong >= mPosition + paramByteOrderedDataInputStream.available())) {
                    return -1;
                  }
                  paramByteOrderedDataInputStream.seek(paramAnonymousLong);
                  mPosition = paramAnonymousLong;
                }
                int i = paramAnonymousInt2;
                if (paramAnonymousInt2 > paramByteOrderedDataInputStream.available()) {
                  i = paramByteOrderedDataInputStream.available();
                }
                paramAnonymousInt1 = paramByteOrderedDataInputStream.read(paramAnonymousArrayOfByte, paramAnonymousInt1, i);
                if (paramAnonymousInt1 >= 0)
                {
                  mPosition += paramAnonymousInt1;
                  return paramAnonymousInt1;
                }
              }
              catch (IOException paramAnonymousArrayOfByte)
              {
                for (;;) {}
              }
              mPosition = -1L;
              return -1;
            }
          });
        }
        else if (mSeekableFileDescriptor != null)
        {
          localMediaMetadataRetriever.setDataSource(mSeekableFileDescriptor);
        }
        else
        {
          if (mFilename == null) {
            continue;
          }
          localMediaMetadataRetriever.setDataSource(mFilename);
        }
        Object localObject2 = localMediaMetadataRetriever.extractMetadata(33);
        String str3 = localMediaMetadataRetriever.extractMetadata(34);
        localObject1 = localMediaMetadataRetriever.extractMetadata(26);
        str1 = localMediaMetadataRetriever.extractMetadata(17);
        boolean bool = "yes".equals(localObject1);
        String str2 = null;
        if (bool)
        {
          str2 = localMediaMetadataRetriever.extractMetadata(29);
          str1 = localMediaMetadataRetriever.extractMetadata(30);
          localObject1 = localMediaMetadataRetriever.extractMetadata(31);
        }
        else
        {
          if (!"yes".equals(str1)) {
            break label537;
          }
          str2 = localMediaMetadataRetriever.extractMetadata(18);
          str1 = localMediaMetadataRetriever.extractMetadata(19);
          localObject1 = localMediaMetadataRetriever.extractMetadata(24);
        }
        if (str2 != null) {
          mAttributes[0].put("ImageWidth", ExifAttribute.createUShort(Integer.parseInt(str2), mExifByteOrder));
        }
        if (str1 != null) {
          mAttributes[0].put("ImageLength", ExifAttribute.createUShort(Integer.parseInt(str1), mExifByteOrder));
        }
        int j;
        if (localObject1 != null)
        {
          i = 1;
          j = Integer.parseInt((String)localObject1);
          if (j == 90) {
            break label558;
          }
          if (j == 180) {
            break label553;
          }
          if (j == 270) {
            break label547;
          }
          mAttributes[0].put("Orientation", ExifAttribute.createUShort(i, mExifByteOrder));
        }
        if ((localObject2 != null) && (str3 != null))
        {
          i = Integer.parseInt((String)localObject2);
          j = Integer.parseInt(str3);
          if (j > 6)
          {
            paramByteOrderedDataInputStream.seek(i);
            localObject2 = new byte[6];
            if (paramByteOrderedDataInputStream.read((byte[])localObject2) == 6)
            {
              i = j - 6;
              if (Arrays.equals((byte[])localObject2, IDENTIFIER_EXIF_APP1))
              {
                localObject2 = new byte[i];
                if (paramByteOrderedDataInputStream.read((byte[])localObject2) == i) {
                  readExifSegment((byte[])localObject2, 0);
                } else {
                  throw new IOException("Can't read exif");
                }
              }
              else
              {
                throw new IOException("Invalid identifier");
              }
            }
            else
            {
              throw new IOException("Can't read identifier");
            }
          }
          else
          {
            throw new IOException("Invalid exif length");
          }
        }
        if (DEBUG)
        {
          paramByteOrderedDataInputStream = new StringBuilder();
          paramByteOrderedDataInputStream.append("Heif meta: ");
          paramByteOrderedDataInputStream.append(str2);
          paramByteOrderedDataInputStream.append("x");
          paramByteOrderedDataInputStream.append(str1);
          paramByteOrderedDataInputStream.append(", rotation ");
          paramByteOrderedDataInputStream.append((String)localObject1);
          Log.d("ExifInterface", paramByteOrderedDataInputStream.toString());
        }
        return;
        return;
      }
      finally
      {
        localMediaMetadataRetriever.release();
      }
      label537:
      String str1 = null;
      Object localObject1 = str1;
      continue;
      label547:
      int i = 8;
      continue;
      label553:
      i = 3;
      continue;
      label558:
      i = 6;
    }
  }
  
  private void getJpegAttributes(ByteOrderedDataInputStream paramByteOrderedDataInputStream, int paramInt1, int paramInt2)
    throws IOException
  {
    Object localObject;
    if (DEBUG)
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("getJpegAttributes starting with: ");
      ((StringBuilder)localObject).append(paramByteOrderedDataInputStream);
      Log.d("ExifInterface", ((StringBuilder)localObject).toString());
    }
    paramByteOrderedDataInputStream.setByteOrder(ByteOrder.BIG_ENDIAN);
    paramByteOrderedDataInputStream.seek(paramInt1);
    int i = paramByteOrderedDataInputStream.readByte();
    if (i == -1)
    {
      if (paramByteOrderedDataInputStream.readByte() == -40)
      {
        for (paramInt1 = paramInt1 + 1 + 1;; paramInt1 = i + paramInt1)
        {
          i = paramByteOrderedDataInputStream.readByte();
          if (i != -1) {
            break label772;
          }
          int m = paramByteOrderedDataInputStream.readByte();
          if (DEBUG)
          {
            localObject = new StringBuilder();
            ((StringBuilder)localObject).append("Found JPEG segment indicator: ");
            ((StringBuilder)localObject).append(Integer.toHexString(m & 0xFF));
            Log.d("ExifInterface", ((StringBuilder)localObject).toString());
          }
          if ((m == -39) || (m == -38)) {
            break label763;
          }
          int j = paramByteOrderedDataInputStream.readUnsignedShort() - 2;
          i = paramInt1 + 1 + 1 + 2;
          if (DEBUG)
          {
            localObject = new StringBuilder();
            ((StringBuilder)localObject).append("JPEG segment: ");
            ((StringBuilder)localObject).append(Integer.toHexString(m & 0xFF));
            ((StringBuilder)localObject).append(" (length: ");
            ((StringBuilder)localObject).append(j + 2);
            ((StringBuilder)localObject).append(")");
            Log.d("ExifInterface", ((StringBuilder)localObject).toString());
          }
          if (j < 0) {
            break label752;
          }
          int k;
          if (m != -31)
          {
            k = j;
            paramInt1 = i;
            if (m != -2) {
              switch (m)
              {
              default: 
                switch (m)
                {
                default: 
                  switch (m)
                  {
                  default: 
                    switch (m)
                    {
                    default: 
                      paramInt1 = j;
                    }
                    break;
                  }
                  break;
                }
                break;
              case -64: 
              case -63: 
              case -62: 
              case -61: 
                if (paramByteOrderedDataInputStream.skipBytes(1) == 1)
                {
                  mAttributes[paramInt2].put("ImageLength", ExifAttribute.createULong(paramByteOrderedDataInputStream.readUnsignedShort(), mExifByteOrder));
                  mAttributes[paramInt2].put("ImageWidth", ExifAttribute.createULong(paramByteOrderedDataInputStream.readUnsignedShort(), mExifByteOrder));
                  paramInt1 = j - 5;
                  break;
                }
                throw new IOException("Invalid SOFx");
              }
            }
          }
          else
          {
            localObject = new byte[j];
            paramByteOrderedDataInputStream.readFully((byte[])localObject);
            long l;
            if (startsWith((byte[])localObject, IDENTIFIER_EXIF_APP1))
            {
              l = i + IDENTIFIER_EXIF_APP1.length;
              readExifSegment(Arrays.copyOfRange((byte[])localObject, IDENTIFIER_EXIF_APP1.length, localObject.length), paramInt2);
              mExifOffset = ((int)l);
            }
            else if (startsWith((byte[])localObject, IDENTIFIER_XMP_APP1))
            {
              l = i + IDENTIFIER_XMP_APP1.length;
              localObject = Arrays.copyOfRange((byte[])localObject, IDENTIFIER_XMP_APP1.length, localObject.length);
              if (getAttribute("Xmp") == null) {
                mAttributes[0].put("Xmp", new ExifAttribute(1, localObject.length, l, (byte[])localObject));
              }
            }
            paramInt1 = j + i;
            k = 0;
          }
          localObject = new byte[k];
          if (paramByteOrderedDataInputStream.read((byte[])localObject) != k) {
            break label741;
          }
          if (getAttribute("UserComment") == null) {
            mAttributes[1].put("UserComment", ExifAttribute.createString(new String((byte[])localObject, ASCII)));
          }
          j = 0;
          i = paramInt1;
          paramInt1 = j;
          if (paramInt1 < 0) {
            break label730;
          }
          if (paramByteOrderedDataInputStream.skipBytes(paramInt1) != paramInt1) {
            break;
          }
        }
        throw new IOException("Invalid JPEG segment");
        label730:
        throw new IOException("Invalid length");
        label741:
        throw new IOException("Invalid exif");
        label752:
        throw new IOException("Invalid length");
        label763:
        paramByteOrderedDataInputStream.setByteOrder(mExifByteOrder);
        return;
        label772:
        paramByteOrderedDataInputStream = new StringBuilder();
        paramByteOrderedDataInputStream.append("Invalid marker:");
        paramByteOrderedDataInputStream.append(Integer.toHexString(i & 0xFF));
        throw new IOException(paramByteOrderedDataInputStream.toString());
      }
      paramByteOrderedDataInputStream = new StringBuilder();
      paramByteOrderedDataInputStream.append("Invalid marker: ");
      paramByteOrderedDataInputStream.append(Integer.toHexString(i & 0xFF));
      throw new IOException(paramByteOrderedDataInputStream.toString());
    }
    paramByteOrderedDataInputStream = new StringBuilder();
    paramByteOrderedDataInputStream.append("Invalid marker: ");
    paramByteOrderedDataInputStream.append(Integer.toHexString(i & 0xFF));
    throw new IOException(paramByteOrderedDataInputStream.toString());
  }
  
  private int getMimeType(BufferedInputStream paramBufferedInputStream)
    throws IOException
  {
    paramBufferedInputStream.mark(5000);
    byte[] arrayOfByte = new byte['?'];
    paramBufferedInputStream.read(arrayOfByte);
    paramBufferedInputStream.reset();
    if (isJpegFormat(arrayOfByte)) {
      return 4;
    }
    if (isRafFormat(arrayOfByte)) {
      return 9;
    }
    if (isHeifFormat(arrayOfByte)) {
      return 12;
    }
    if (isOrfFormat(arrayOfByte)) {
      return 7;
    }
    if (isRw2Format(arrayOfByte)) {
      return 10;
    }
    return 0;
  }
  
  private void getOrfAttributes(ByteOrderedDataInputStream paramByteOrderedDataInputStream)
    throws IOException
  {
    getRawAttributes(paramByteOrderedDataInputStream);
    paramByteOrderedDataInputStream = (ExifAttribute)mAttributes[1].get("MakerNote");
    if (paramByteOrderedDataInputStream != null)
    {
      paramByteOrderedDataInputStream = new ByteOrderedDataInputStream(bytes);
      paramByteOrderedDataInputStream.setByteOrder(mExifByteOrder);
      Object localObject = new byte[ORF_MAKER_NOTE_HEADER_1.length];
      paramByteOrderedDataInputStream.readFully((byte[])localObject);
      paramByteOrderedDataInputStream.seek(0L);
      byte[] arrayOfByte = new byte[ORF_MAKER_NOTE_HEADER_2.length];
      paramByteOrderedDataInputStream.readFully(arrayOfByte);
      if (Arrays.equals((byte[])localObject, ORF_MAKER_NOTE_HEADER_1)) {
        paramByteOrderedDataInputStream.seek(8L);
      } else if (Arrays.equals(arrayOfByte, ORF_MAKER_NOTE_HEADER_2)) {
        paramByteOrderedDataInputStream.seek(12L);
      }
      readImageFileDirectory(paramByteOrderedDataInputStream, 6);
      paramByteOrderedDataInputStream = (ExifAttribute)mAttributes[7].get("PreviewImageStart");
      localObject = (ExifAttribute)mAttributes[7].get("PreviewImageLength");
      if ((paramByteOrderedDataInputStream != null) && (localObject != null))
      {
        mAttributes[5].put("JPEGInterchangeFormat", paramByteOrderedDataInputStream);
        mAttributes[5].put("JPEGInterchangeFormatLength", localObject);
      }
      paramByteOrderedDataInputStream = (ExifAttribute)mAttributes[8].get("AspectFrame");
      if (paramByteOrderedDataInputStream != null)
      {
        paramByteOrderedDataInputStream = (int[])paramByteOrderedDataInputStream.getValue(mExifByteOrder);
        if ((paramByteOrderedDataInputStream != null) && (paramByteOrderedDataInputStream.length == 4))
        {
          if ((paramByteOrderedDataInputStream[2] > paramByteOrderedDataInputStream[0]) && (paramByteOrderedDataInputStream[3] > paramByteOrderedDataInputStream[1]))
          {
            int m = paramByteOrderedDataInputStream[2] - paramByteOrderedDataInputStream[0] + 1;
            int k = paramByteOrderedDataInputStream[3] - paramByteOrderedDataInputStream[1] + 1;
            int j = m;
            int i = k;
            if (m < k)
            {
              j = m + k;
              i = j - k;
              j -= i;
            }
            paramByteOrderedDataInputStream = ExifAttribute.createUShort(j, mExifByteOrder);
            localObject = ExifAttribute.createUShort(i, mExifByteOrder);
            mAttributes[0].put("ImageWidth", paramByteOrderedDataInputStream);
            mAttributes[0].put("ImageLength", localObject);
          }
        }
        else
        {
          localObject = new StringBuilder();
          ((StringBuilder)localObject).append("Invalid aspect frame values. frame=");
          ((StringBuilder)localObject).append(Arrays.toString(paramByteOrderedDataInputStream));
          Log.w("ExifInterface", ((StringBuilder)localObject).toString());
          return;
        }
      }
    }
  }
  
  private void getRafAttributes(ByteOrderedDataInputStream paramByteOrderedDataInputStream)
    throws IOException
  {
    paramByteOrderedDataInputStream.skipBytes(84);
    Object localObject = new byte[4];
    byte[] arrayOfByte = new byte[4];
    paramByteOrderedDataInputStream.read((byte[])localObject);
    paramByteOrderedDataInputStream.skipBytes(4);
    paramByteOrderedDataInputStream.read(arrayOfByte);
    int i = ByteBuffer.wrap((byte[])localObject).getInt();
    int j = ByteBuffer.wrap(arrayOfByte).getInt();
    getJpegAttributes(paramByteOrderedDataInputStream, i, 5);
    paramByteOrderedDataInputStream.seek(j);
    paramByteOrderedDataInputStream.setByteOrder(ByteOrder.BIG_ENDIAN);
    j = paramByteOrderedDataInputStream.readInt();
    if (DEBUG)
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("numberOfDirectoryEntry: ");
      ((StringBuilder)localObject).append(j);
      Log.d("ExifInterface", ((StringBuilder)localObject).toString());
    }
    i = 0;
    while (i < j)
    {
      int k = paramByteOrderedDataInputStream.readUnsignedShort();
      int m = paramByteOrderedDataInputStream.readUnsignedShort();
      if (k == TAG_RAF_IMAGE_SIZEnumber)
      {
        i = paramByteOrderedDataInputStream.readShort();
        j = paramByteOrderedDataInputStream.readShort();
        paramByteOrderedDataInputStream = ExifAttribute.createUShort(i, mExifByteOrder);
        localObject = ExifAttribute.createUShort(j, mExifByteOrder);
        mAttributes[0].put("ImageLength", paramByteOrderedDataInputStream);
        mAttributes[0].put("ImageWidth", localObject);
        if (DEBUG)
        {
          paramByteOrderedDataInputStream = new StringBuilder();
          paramByteOrderedDataInputStream.append("Updated to length: ");
          paramByteOrderedDataInputStream.append(i);
          paramByteOrderedDataInputStream.append(", width: ");
          paramByteOrderedDataInputStream.append(j);
          Log.d("ExifInterface", paramByteOrderedDataInputStream.toString());
        }
        return;
      }
      paramByteOrderedDataInputStream.skipBytes(m);
      i += 1;
    }
  }
  
  private void getRawAttributes(ByteOrderedDataInputStream paramByteOrderedDataInputStream)
    throws IOException
  {
    parseTiffHeaders(paramByteOrderedDataInputStream, paramByteOrderedDataInputStream.available());
    readImageFileDirectory(paramByteOrderedDataInputStream, 0);
    updateImageSizeValues(paramByteOrderedDataInputStream, 0);
    updateImageSizeValues(paramByteOrderedDataInputStream, 5);
    updateImageSizeValues(paramByteOrderedDataInputStream, 4);
    validateImages(paramByteOrderedDataInputStream);
    if (mMimeType == 8)
    {
      paramByteOrderedDataInputStream = (ExifAttribute)mAttributes[1].get("MakerNote");
      if (paramByteOrderedDataInputStream != null)
      {
        paramByteOrderedDataInputStream = new ByteOrderedDataInputStream(bytes);
        paramByteOrderedDataInputStream.setByteOrder(mExifByteOrder);
        paramByteOrderedDataInputStream.seek(6L);
        readImageFileDirectory(paramByteOrderedDataInputStream, 9);
        paramByteOrderedDataInputStream = (ExifAttribute)mAttributes[9].get("ColorSpace");
        if (paramByteOrderedDataInputStream != null) {
          mAttributes[1].put("ColorSpace", paramByteOrderedDataInputStream);
        }
      }
    }
  }
  
  private void getRw2Attributes(ByteOrderedDataInputStream paramByteOrderedDataInputStream)
    throws IOException
  {
    getRawAttributes(paramByteOrderedDataInputStream);
    if ((ExifAttribute)mAttributes[0].get("JpgFromRaw") != null) {
      getJpegAttributes(paramByteOrderedDataInputStream, mRw2JpgFromRawOffset, 5);
    }
    paramByteOrderedDataInputStream = (ExifAttribute)mAttributes[0].get("ISO");
    ExifAttribute localExifAttribute = (ExifAttribute)mAttributes[1].get("PhotographicSensitivity");
    if ((paramByteOrderedDataInputStream != null) && (localExifAttribute == null)) {
      mAttributes[1].put("PhotographicSensitivity", paramByteOrderedDataInputStream);
    }
  }
  
  private static Pair<Integer, Integer> guessDataFormat(String paramString)
  {
    boolean bool = paramString.contains(",");
    int i = 1;
    Object localObject;
    if (bool)
    {
      String[] arrayOfString = paramString.split(",", -1);
      localObject = guessDataFormat(arrayOfString[0]);
      paramString = (String)localObject;
      if (((Integer)first).intValue() == 2) {
        return localObject;
      }
      while (i < arrayOfString.length)
      {
        localObject = guessDataFormat(arrayOfString[i]);
        int j;
        if ((!((Integer)first).equals(first)) && (!((Integer)second).equals(first))) {
          j = -1;
        } else {
          j = ((Integer)first).intValue();
        }
        int k;
        if ((((Integer)second).intValue() != -1) && ((((Integer)first).equals(second)) || (((Integer)second).equals(second)))) {
          k = ((Integer)second).intValue();
        } else {
          k = -1;
        }
        if ((j == -1) && (k == -1)) {
          return new Pair(Integer.valueOf(2), Integer.valueOf(-1));
        }
        if (j == -1) {
          paramString = new Pair(Integer.valueOf(k), Integer.valueOf(-1));
        } else if (k == -1) {
          paramString = new Pair(Integer.valueOf(j), Integer.valueOf(-1));
        }
        i += 1;
      }
      return paramString;
    }
    if (paramString.contains("/"))
    {
      paramString = paramString.split("/", -1);
      if (paramString.length != 2) {}
    }
    try
    {
      l1 = Double.parseDouble(paramString[0]);
      l2 = Double.parseDouble(paramString[1]);
      if (l1 < 0L) {
        break label366;
      }
      if (l2 >= 0L) {
        break label548;
      }
    }
    catch (NumberFormatException paramString)
    {
      for (;;)
      {
        long l1;
        long l2;
        continue;
        if (l1 <= 2147483647L) {
          if (l2 <= 2147483647L) {}
        }
      }
    }
    return new Pair(Integer.valueOf(10), Integer.valueOf(5));
    return new Pair(Integer.valueOf(5), Integer.valueOf(-1));
    label366:
    paramString = new Pair(Integer.valueOf(10), Integer.valueOf(-1));
    return paramString;
    return new Pair(Integer.valueOf(2), Integer.valueOf(-1));
    try
    {
      localObject = Long.valueOf(Long.parseLong(paramString));
      if ((((Long)localObject).longValue() >= 0L) && (((Long)localObject).longValue() <= 65535L)) {
        return new Pair(Integer.valueOf(3), Integer.valueOf(4));
      }
      if (((Long)localObject).longValue() < 0L) {
        return new Pair(Integer.valueOf(9), Integer.valueOf(-1));
      }
      localObject = new Pair(Integer.valueOf(4), Integer.valueOf(-1));
      return localObject;
    }
    catch (NumberFormatException localNumberFormatException)
    {
      label519:
      for (;;) {}
    }
    try
    {
      Double.parseDouble(paramString);
      paramString = new Pair(Integer.valueOf(12), Integer.valueOf(-1));
      return paramString;
    }
    catch (NumberFormatException paramString)
    {
      break label519;
    }
    return new Pair(Integer.valueOf(2), Integer.valueOf(-1));
  }
  
  private void handleThumbnailFromJfif(ByteOrderedDataInputStream paramByteOrderedDataInputStream, HashMap paramHashMap)
    throws IOException
  {
    ExifAttribute localExifAttribute = (ExifAttribute)paramHashMap.get("JPEGInterchangeFormat");
    paramHashMap = (ExifAttribute)paramHashMap.get("JPEGInterchangeFormatLength");
    if ((localExifAttribute != null) && (paramHashMap != null))
    {
      int j = localExifAttribute.getIntValue(mExifByteOrder);
      int k = Math.min(paramHashMap.getIntValue(mExifByteOrder), paramByteOrderedDataInputStream.getLength() - j);
      int i;
      if ((mMimeType != 4) && (mMimeType != 9) && (mMimeType != 10))
      {
        i = j;
        if (mMimeType == 7) {
          i = j + mOrfMakerNoteOffset;
        }
      }
      else
      {
        i = j + mExifOffset;
      }
      if (DEBUG)
      {
        paramHashMap = new StringBuilder();
        paramHashMap.append("Setting thumbnail attributes with offset: ");
        paramHashMap.append(i);
        paramHashMap.append(", length: ");
        paramHashMap.append(k);
        Log.d("ExifInterface", paramHashMap.toString());
      }
      if ((i > 0) && (k > 0))
      {
        mHasThumbnail = true;
        mThumbnailOffset = i;
        mThumbnailLength = k;
        if ((mFilename == null) && (mAssetInputStream == null) && (mSeekableFileDescriptor == null))
        {
          paramHashMap = new byte[k];
          paramByteOrderedDataInputStream.seek(i);
          paramByteOrderedDataInputStream.readFully(paramHashMap);
          mThumbnailBytes = paramHashMap;
        }
      }
    }
  }
  
  private void handleThumbnailFromStrips(ByteOrderedDataInputStream paramByteOrderedDataInputStream, HashMap paramHashMap)
    throws IOException
  {
    Object localObject1 = (ExifAttribute)paramHashMap.get("StripOffsets");
    Object localObject2 = (ExifAttribute)paramHashMap.get("StripByteCounts");
    if ((localObject1 != null) && (localObject2 != null))
    {
      paramHashMap = convertToLongArray(((ExifAttribute)localObject1).getValue(mExifByteOrder));
      localObject1 = convertToLongArray(((ExifAttribute)localObject2).getValue(mExifByteOrder));
      if (paramHashMap == null)
      {
        Log.w("ExifInterface", "stripOffsets should not be null.");
        return;
      }
      if (localObject1 == null)
      {
        Log.w("ExifInterface", "stripByteCounts should not be null.");
        return;
      }
      int j = localObject1.length;
      long l = 0L;
      int i = 0;
      while (i < j)
      {
        l += localObject1[i];
        i += 1;
      }
      localObject2 = new byte[(int)l];
      j = 0;
      int k = 0;
      i = 0;
      while (j < paramHashMap.length)
      {
        int n = (int)paramHashMap[j];
        int m = (int)localObject1[j];
        n -= k;
        if (n < 0) {
          Log.d("ExifInterface", "Invalid strip offset value");
        }
        paramByteOrderedDataInputStream.seek(n);
        byte[] arrayOfByte = new byte[m];
        paramByteOrderedDataInputStream.read(arrayOfByte);
        k = k + n + m;
        System.arraycopy(arrayOfByte, 0, localObject2, i, arrayOfByte.length);
        i += arrayOfByte.length;
        j += 1;
      }
      mHasThumbnail = true;
      mThumbnailBytes = ((byte[])localObject2);
      mThumbnailLength = localObject2.length;
    }
  }
  
  /* Error */
  private void initForFilename(String paramString)
    throws IOException
  {
    // Byte code:
    //   0: aload_1
    //   1: ifnull +71 -> 72
    //   4: aload_0
    //   5: aconst_null
    //   6: putfield 1230	androidx/exifinterface/media/ExifInterface:mAssetInputStream	Landroid/content/res/AssetManager$AssetInputStream;
    //   9: aload_0
    //   10: aload_1
    //   11: putfield 1232	androidx/exifinterface/media/ExifInterface:mFilename	Ljava/lang/String;
    //   14: new 1256	java/io/FileInputStream
    //   17: dup
    //   18: aload_1
    //   19: invokespecial 1719	java/io/FileInputStream:<init>	(Ljava/lang/String;)V
    //   22: astore_1
    //   23: aload_1
    //   24: invokevirtual 1277	java/io/FileInputStream:getFD	()Ljava/io/FileDescriptor;
    //   27: invokestatic 1241	androidx/exifinterface/media/ExifInterface:isSeekableFD	(Ljava/io/FileDescriptor;)Z
    //   30: ifeq +14 -> 44
    //   33: aload_0
    //   34: aload_1
    //   35: invokevirtual 1277	java/io/FileInputStream:getFD	()Ljava/io/FileDescriptor;
    //   38: putfield 1243	androidx/exifinterface/media/ExifInterface:mSeekableFileDescriptor	Ljava/io/FileDescriptor;
    //   41: goto +8 -> 49
    //   44: aload_0
    //   45: aconst_null
    //   46: putfield 1243	androidx/exifinterface/media/ExifInterface:mSeekableFileDescriptor	Ljava/io/FileDescriptor;
    //   49: aload_0
    //   50: aload_1
    //   51: invokespecial 1262	androidx/exifinterface/media/ExifInterface:loadAttributes	(Ljava/io/InputStream;)V
    //   54: aload_1
    //   55: invokestatic 1266	androidx/exifinterface/media/ExifInterface:closeQuietly	(Ljava/io/Closeable;)V
    //   58: return
    //   59: astore_2
    //   60: goto +6 -> 66
    //   63: astore_2
    //   64: aconst_null
    //   65: astore_1
    //   66: aload_1
    //   67: invokestatic 1266	androidx/exifinterface/media/ExifInterface:closeQuietly	(Ljava/io/Closeable;)V
    //   70: aload_2
    //   71: athrow
    //   72: new 1220	java/lang/NullPointerException
    //   75: dup
    //   76: ldc_w 1281
    //   79: invokespecial 1223	java/lang/NullPointerException:<init>	(Ljava/lang/String;)V
    //   82: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	83	0	this	ExifInterface
    //   0	83	1	paramString	String
    //   59	1	2	localObject1	Object
    //   63	8	2	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   23	41	59	finally
    //   44	49	59	finally
    //   49	54	59	finally
    //   14	23	63	finally
  }
  
  /* Error */
  private boolean isHeifFormat(byte[] paramArrayOfByte)
    throws IOException
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 15
    //   3: aconst_null
    //   4: astore 13
    //   6: new 8	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream
    //   9: dup
    //   10: aload_1
    //   11: invokespecial 1569	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:<init>	([B)V
    //   14: astore 14
    //   16: aload 14
    //   18: getstatic 1207	java/nio/ByteOrder:BIG_ENDIAN	Ljava/nio/ByteOrder;
    //   21: invokevirtual 1476	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:setByteOrder	(Ljava/nio/ByteOrder;)V
    //   24: aload 14
    //   26: invokevirtual 1604	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:readInt	()I
    //   29: i2l
    //   30: lstore 6
    //   32: iconst_4
    //   33: newarray byte
    //   35: astore 13
    //   37: aload 14
    //   39: aload 13
    //   41: invokevirtual 1440	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:read	([B)I
    //   44: pop
    //   45: aload 13
    //   47: getstatic 948	androidx/exifinterface/media/ExifInterface:HEIF_TYPE_FTYP	[B
    //   50: invokestatic 1443	java/util/Arrays:equals	([B[B)Z
    //   53: istore 12
    //   55: iload 12
    //   57: ifne +10 -> 67
    //   60: aload 14
    //   62: invokevirtual 1720	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:close	()V
    //   65: iconst_0
    //   66: ireturn
    //   67: ldc2_w 1721
    //   70: lstore 8
    //   72: lload 6
    //   74: lconst_1
    //   75: lcmp
    //   76: ifne +30 -> 106
    //   79: aload 14
    //   81: invokevirtual 1725	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:readLong	()J
    //   84: lstore 10
    //   86: lload 10
    //   88: lstore 6
    //   90: lload 10
    //   92: ldc2_w 1721
    //   95: lcmp
    //   96: ifge +15 -> 111
    //   99: aload 14
    //   101: invokevirtual 1720	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:close	()V
    //   104: iconst_0
    //   105: ireturn
    //   106: ldc2_w 1570
    //   109: lstore 8
    //   111: lload 6
    //   113: lstore 10
    //   115: lload 6
    //   117: aload_1
    //   118: arraylength
    //   119: i2l
    //   120: lcmp
    //   121: ifle +10 -> 131
    //   124: aload_1
    //   125: arraylength
    //   126: istore_2
    //   127: iload_2
    //   128: i2l
    //   129: lstore 10
    //   131: lload 10
    //   133: lload 8
    //   135: lsub
    //   136: lstore 8
    //   138: lload 8
    //   140: ldc2_w 1570
    //   143: lcmp
    //   144: ifge +10 -> 154
    //   147: aload 14
    //   149: invokevirtual 1720	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:close	()V
    //   152: iconst_0
    //   153: ireturn
    //   154: iconst_4
    //   155: newarray byte
    //   157: astore_1
    //   158: lconst_0
    //   159: lstore 6
    //   161: iconst_0
    //   162: istore_2
    //   163: iconst_0
    //   164: istore_3
    //   165: lload 6
    //   167: lload 8
    //   169: ldc2_w 1726
    //   172: ldiv
    //   173: lcmp
    //   174: ifge +120 -> 294
    //   177: aload 14
    //   179: aload_1
    //   180: invokevirtual 1440	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:read	([B)I
    //   183: istore 4
    //   185: aload_1
    //   186: arraylength
    //   187: istore 5
    //   189: iload 4
    //   191: iload 5
    //   193: if_icmpeq +10 -> 203
    //   196: aload 14
    //   198: invokevirtual 1720	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:close	()V
    //   201: iconst_0
    //   202: ireturn
    //   203: lload 6
    //   205: lconst_1
    //   206: lcmp
    //   207: ifne +9 -> 216
    //   210: iload_3
    //   211: istore 5
    //   213: goto +69 -> 282
    //   216: aload_1
    //   217: getstatic 953	androidx/exifinterface/media/ExifInterface:HEIF_BRAND_MIF1	[B
    //   220: invokestatic 1443	java/util/Arrays:equals	([B[B)Z
    //   223: ifeq +9 -> 232
    //   226: iconst_1
    //   227: istore 4
    //   229: goto +25 -> 254
    //   232: aload_1
    //   233: getstatic 958	androidx/exifinterface/media/ExifInterface:HEIF_BRAND_HEIC	[B
    //   236: invokestatic 1443	java/util/Arrays:equals	([B[B)Z
    //   239: istore 12
    //   241: iload_2
    //   242: istore 4
    //   244: iload 12
    //   246: ifeq +8 -> 254
    //   249: iconst_1
    //   250: istore_3
    //   251: iload_2
    //   252: istore 4
    //   254: iload 4
    //   256: istore_2
    //   257: iload_3
    //   258: istore 5
    //   260: iload 4
    //   262: ifeq +20 -> 282
    //   265: iload 4
    //   267: istore_2
    //   268: iload_3
    //   269: istore 5
    //   271: iload_3
    //   272: ifeq +10 -> 282
    //   275: aload 14
    //   277: invokevirtual 1720	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:close	()V
    //   280: iconst_1
    //   281: ireturn
    //   282: lload 6
    //   284: lconst_1
    //   285: ladd
    //   286: lstore 6
    //   288: iload 5
    //   290: istore_3
    //   291: goto -126 -> 165
    //   294: aload 14
    //   296: invokevirtual 1720	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:close	()V
    //   299: iconst_0
    //   300: ireturn
    //   301: astore_1
    //   302: goto +62 -> 364
    //   305: astore 13
    //   307: aload 14
    //   309: astore_1
    //   310: aload 13
    //   312: astore 14
    //   314: goto +16 -> 330
    //   317: astore_1
    //   318: aload 13
    //   320: astore 14
    //   322: goto +42 -> 364
    //   325: astore 14
    //   327: aload 15
    //   329: astore_1
    //   330: aload_1
    //   331: astore 13
    //   333: getstatic 918	androidx/exifinterface/media/ExifInterface:DEBUG	Z
    //   336: ifeq +18 -> 354
    //   339: aload_1
    //   340: astore 13
    //   342: ldc_w 371
    //   345: ldc_w 1729
    //   348: aload 14
    //   350: invokestatic 1732	android/util/Log:d	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   353: pop
    //   354: aload_1
    //   355: ifnull +7 -> 362
    //   358: aload_1
    //   359: invokevirtual 1720	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:close	()V
    //   362: iconst_0
    //   363: ireturn
    //   364: aload 14
    //   366: ifnull +8 -> 374
    //   369: aload 14
    //   371: invokevirtual 1720	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:close	()V
    //   374: aload_1
    //   375: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	376	0	this	ExifInterface
    //   0	376	1	paramArrayOfByte	byte[]
    //   126	142	2	i	int
    //   164	127	3	j	int
    //   183	83	4	k	int
    //   187	102	5	m	int
    //   30	257	6	l1	long
    //   70	98	8	l2	long
    //   84	48	10	l3	long
    //   53	192	12	bool	boolean
    //   4	42	13	arrayOfByte1	byte[]
    //   305	14	13	localException1	Exception
    //   331	10	13	arrayOfByte2	byte[]
    //   14	307	14	localObject1	Object
    //   325	45	14	localException2	Exception
    //   1	327	15	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   16	55	301	finally
    //   79	86	301	finally
    //   115	127	301	finally
    //   154	158	301	finally
    //   165	189	301	finally
    //   216	226	301	finally
    //   232	241	301	finally
    //   16	55	305	java/lang/Exception
    //   79	86	305	java/lang/Exception
    //   115	127	305	java/lang/Exception
    //   154	158	305	java/lang/Exception
    //   165	189	305	java/lang/Exception
    //   216	226	305	java/lang/Exception
    //   232	241	305	java/lang/Exception
    //   6	16	317	finally
    //   333	339	317	finally
    //   342	354	317	finally
    //   6	16	325	java/lang/Exception
  }
  
  private static boolean isJpegFormat(byte[] paramArrayOfByte)
    throws IOException
  {
    int i = 0;
    while (i < JPEG_SIGNATURE.length)
    {
      if (paramArrayOfByte[i] != JPEG_SIGNATURE[i]) {
        return false;
      }
      i += 1;
    }
    return true;
  }
  
  private boolean isOrfFormat(byte[] paramArrayOfByte)
    throws IOException
  {
    paramArrayOfByte = new ByteOrderedDataInputStream(paramArrayOfByte);
    mExifByteOrder = readByteOrder(paramArrayOfByte);
    paramArrayOfByte.setByteOrder(mExifByteOrder);
    int i = paramArrayOfByte.readShort();
    paramArrayOfByte.close();
    return (i == 20306) || (i == 21330);
  }
  
  private boolean isRafFormat(byte[] paramArrayOfByte)
    throws IOException
  {
    byte[] arrayOfByte = "FUJIFILMCCD-RAW".getBytes(Charset.defaultCharset());
    int i = 0;
    while (i < arrayOfByte.length)
    {
      if (paramArrayOfByte[i] != arrayOfByte[i]) {
        return false;
      }
      i += 1;
    }
    return true;
  }
  
  private boolean isRw2Format(byte[] paramArrayOfByte)
    throws IOException
  {
    paramArrayOfByte = new ByteOrderedDataInputStream(paramArrayOfByte);
    mExifByteOrder = readByteOrder(paramArrayOfByte);
    paramArrayOfByte.setByteOrder(mExifByteOrder);
    int i = paramArrayOfByte.readShort();
    paramArrayOfByte.close();
    return i == 85;
  }
  
  private static boolean isSeekableFD(FileDescriptor paramFileDescriptor)
    throws IOException
  {
    if (Build.VERSION.SDK_INT >= 21) {}
    try
    {
      Os.lseek(paramFileDescriptor, 0L, OsConstants.SEEK_CUR);
      return true;
    }
    catch (Exception paramFileDescriptor) {}
    return false;
    return false;
  }
  
  private boolean isSupportedDataType(HashMap paramHashMap)
    throws IOException
  {
    Object localObject = (ExifAttribute)paramHashMap.get("BitsPerSample");
    if (localObject != null)
    {
      localObject = (int[])((ExifAttribute)localObject).getValue(mExifByteOrder);
      if (Arrays.equals(BITS_PER_SAMPLE_RGB, (int[])localObject)) {
        return true;
      }
      if (mMimeType == 3)
      {
        paramHashMap = (ExifAttribute)paramHashMap.get("PhotometricInterpretation");
        if (paramHashMap != null)
        {
          int i = paramHashMap.getIntValue(mExifByteOrder);
          if (((i == 1) && (Arrays.equals((int[])localObject, BITS_PER_SAMPLE_GREYSCALE_2))) || ((i == 6) && (Arrays.equals((int[])localObject, BITS_PER_SAMPLE_RGB)))) {
            return true;
          }
        }
      }
    }
    if (DEBUG) {
      Log.d("ExifInterface", "Unsupported data type value");
    }
    return false;
  }
  
  private boolean isThumbnail(HashMap paramHashMap)
    throws IOException
  {
    ExifAttribute localExifAttribute = (ExifAttribute)paramHashMap.get("ImageLength");
    paramHashMap = (ExifAttribute)paramHashMap.get("ImageWidth");
    if ((localExifAttribute != null) && (paramHashMap != null))
    {
      int i = localExifAttribute.getIntValue(mExifByteOrder);
      int j = paramHashMap.getIntValue(mExifByteOrder);
      if ((i <= 512) && (j <= 512)) {
        return true;
      }
    }
    return false;
  }
  
  /* Error */
  private void loadAttributes(@NonNull InputStream paramInputStream)
    throws IOException
  {
    // Byte code:
    //   0: aload_1
    //   1: ifnull +263 -> 264
    //   4: iconst_0
    //   5: istore_2
    //   6: iload_2
    //   7: getstatic 1099	androidx/exifinterface/media/ExifInterface:EXIF_TAGS	[[Landroidx/exifinterface/media/ExifInterface$ExifTag;
    //   10: arraylength
    //   11: if_icmpge +23 -> 34
    //   14: aload_0
    //   15: getfield 1197	androidx/exifinterface/media/ExifInterface:mAttributes	[Ljava/util/HashMap;
    //   18: iload_2
    //   19: new 1107	java/util/HashMap
    //   22: dup
    //   23: invokespecial 1120	java/util/HashMap:<init>	()V
    //   26: aastore
    //   27: iload_2
    //   28: iconst_1
    //   29: iadd
    //   30: istore_2
    //   31: goto -25 -> 6
    //   34: new 1537	java/io/BufferedInputStream
    //   37: dup
    //   38: aload_1
    //   39: sipush 5000
    //   42: invokespecial 1760	java/io/BufferedInputStream:<init>	(Ljava/io/InputStream;I)V
    //   45: astore_1
    //   46: aload_0
    //   47: aload_0
    //   48: aload_1
    //   49: checkcast 1537	java/io/BufferedInputStream
    //   52: invokespecial 1762	androidx/exifinterface/media/ExifInterface:getMimeType	(Ljava/io/BufferedInputStream;)I
    //   55: putfield 1628	androidx/exifinterface/media/ExifInterface:mMimeType	I
    //   58: new 8	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream
    //   61: dup
    //   62: aload_1
    //   63: invokespecial 1764	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:<init>	(Ljava/io/InputStream;)V
    //   66: astore_1
    //   67: aload_0
    //   68: getfield 1628	androidx/exifinterface/media/ExifInterface:mMimeType	I
    //   71: tableswitch	default:+204->275, 0:+107->178, 1:+107->178, 2:+107->178, 3:+107->178, 4:+97->168, 5:+107->178, 6:+107->178, 7:+89->160, 8:+107->178, 9:+81->152, 10:+73->144, 11:+107->178, 12:+65->136
    //   136: aload_0
    //   137: aload_1
    //   138: invokespecial 1766	androidx/exifinterface/media/ExifInterface:getHeifAttributes	(Landroidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream;)V
    //   141: goto +42 -> 183
    //   144: aload_0
    //   145: aload_1
    //   146: invokespecial 1768	androidx/exifinterface/media/ExifInterface:getRw2Attributes	(Landroidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream;)V
    //   149: goto +34 -> 183
    //   152: aload_0
    //   153: aload_1
    //   154: invokespecial 1770	androidx/exifinterface/media/ExifInterface:getRafAttributes	(Landroidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream;)V
    //   157: goto +26 -> 183
    //   160: aload_0
    //   161: aload_1
    //   162: invokespecial 1772	androidx/exifinterface/media/ExifInterface:getOrfAttributes	(Landroidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream;)V
    //   165: goto +18 -> 183
    //   168: aload_0
    //   169: aload_1
    //   170: iconst_0
    //   171: iconst_0
    //   172: invokespecial 1601	androidx/exifinterface/media/ExifInterface:getJpegAttributes	(Landroidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream;II)V
    //   175: goto +8 -> 183
    //   178: aload_0
    //   179: aload_1
    //   180: invokespecial 1564	androidx/exifinterface/media/ExifInterface:getRawAttributes	(Landroidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream;)V
    //   183: aload_0
    //   184: aload_1
    //   185: invokespecial 1775	androidx/exifinterface/media/ExifInterface:setThumbnailData	(Landroidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream;)V
    //   188: aload_0
    //   189: iconst_1
    //   190: putfield 1777	androidx/exifinterface/media/ExifInterface:mIsSupportedFile	Z
    //   193: aload_0
    //   194: invokespecial 1779	androidx/exifinterface/media/ExifInterface:addDefaultValuesForCompatibility	()V
    //   197: getstatic 918	androidx/exifinterface/media/ExifInterface:DEBUG	Z
    //   200: ifeq +47 -> 247
    //   203: goto +40 -> 243
    //   206: astore_1
    //   207: goto +41 -> 248
    //   210: astore_1
    //   211: aload_0
    //   212: iconst_0
    //   213: putfield 1777	androidx/exifinterface/media/ExifInterface:mIsSupportedFile	Z
    //   216: getstatic 918	androidx/exifinterface/media/ExifInterface:DEBUG	Z
    //   219: ifeq +14 -> 233
    //   222: ldc_w 371
    //   225: ldc_w 1781
    //   228: aload_1
    //   229: invokestatic 1783	android/util/Log:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   232: pop
    //   233: aload_0
    //   234: invokespecial 1779	androidx/exifinterface/media/ExifInterface:addDefaultValuesForCompatibility	()V
    //   237: getstatic 918	androidx/exifinterface/media/ExifInterface:DEBUG	Z
    //   240: ifeq +7 -> 247
    //   243: aload_0
    //   244: invokespecial 1786	androidx/exifinterface/media/ExifInterface:printAttributes	()V
    //   247: return
    //   248: aload_0
    //   249: invokespecial 1779	androidx/exifinterface/media/ExifInterface:addDefaultValuesForCompatibility	()V
    //   252: getstatic 918	androidx/exifinterface/media/ExifInterface:DEBUG	Z
    //   255: ifeq +7 -> 262
    //   258: aload_0
    //   259: invokespecial 1786	androidx/exifinterface/media/ExifInterface:printAttributes	()V
    //   262: aload_1
    //   263: athrow
    //   264: new 1220	java/lang/NullPointerException
    //   267: dup
    //   268: ldc_w 1788
    //   271: invokespecial 1223	java/lang/NullPointerException:<init>	(Ljava/lang/String;)V
    //   274: athrow
    //   275: goto -92 -> 183
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	278	0	this	ExifInterface
    //   0	278	1	paramInputStream	InputStream
    //   5	26	2	i	int
    // Exception table:
    //   from	to	target	type
    //   6	27	206	finally
    //   34	136	206	finally
    //   136	141	206	finally
    //   144	149	206	finally
    //   152	157	206	finally
    //   160	165	206	finally
    //   168	175	206	finally
    //   178	183	206	finally
    //   183	193	206	finally
    //   211	233	206	finally
    //   6	27	210	java/io/IOException
    //   34	136	210	java/io/IOException
    //   136	141	210	java/io/IOException
    //   144	149	210	java/io/IOException
    //   152	157	210	java/io/IOException
    //   160	165	210	java/io/IOException
    //   168	175	210	java/io/IOException
    //   178	183	210	java/io/IOException
    //   183	193	210	java/io/IOException
  }
  
  private static long parseDateTime(@Nullable String paramString1, @Nullable String paramString2)
  {
    ParsePosition localParsePosition;
    if (paramString1 != null)
    {
      if (!sNonZeroTimePattern.matcher(paramString1).matches()) {
        return -1L;
      }
      localParsePosition = new ParsePosition(0);
    }
    long l2;
    for (;;)
    {
      try
      {
        paramString1 = sFormatter.parse(paramString1, localParsePosition);
        if (paramString1 == null) {
          return -1L;
        }
        l2 = paramString1.getTime();
        l1 = l2;
        if (paramString2 == null) {}
      }
      catch (IllegalArgumentException paramString1)
      {
        long l1;
        return -1L;
      }
      try
      {
        l1 = Long.parseLong(paramString2);
        if (l1 > 1000L)
        {
          l1 /= 10L;
        }
        else
        {
          l1 = l2 + l1;
          return l1;
        }
      }
      catch (NumberFormatException paramString1) {}
    }
    return -1L;
    return l2;
  }
  
  private void parseTiffHeaders(ByteOrderedDataInputStream paramByteOrderedDataInputStream, int paramInt)
    throws IOException
  {
    mExifByteOrder = readByteOrder(paramByteOrderedDataInputStream);
    paramByteOrderedDataInputStream.setByteOrder(mExifByteOrder);
    int i = paramByteOrderedDataInputStream.readUnsignedShort();
    if ((mMimeType != 7) && (mMimeType != 10) && (i != 42))
    {
      paramByteOrderedDataInputStream = new StringBuilder();
      paramByteOrderedDataInputStream.append("Invalid start code: ");
      paramByteOrderedDataInputStream.append(Integer.toHexString(i));
      throw new IOException(paramByteOrderedDataInputStream.toString());
    }
    i = paramByteOrderedDataInputStream.readInt();
    if ((i >= 8) && (i < paramInt))
    {
      paramInt = i - 8;
      if (paramInt > 0)
      {
        if (paramByteOrderedDataInputStream.skipBytes(paramInt) == paramInt) {
          return;
        }
        paramByteOrderedDataInputStream = new StringBuilder();
        paramByteOrderedDataInputStream.append("Couldn't jump to first Ifd: ");
        paramByteOrderedDataInputStream.append(paramInt);
        throw new IOException(paramByteOrderedDataInputStream.toString());
      }
      return;
    }
    paramByteOrderedDataInputStream = new StringBuilder();
    paramByteOrderedDataInputStream.append("Invalid first Ifd offset: ");
    paramByteOrderedDataInputStream.append(i);
    throw new IOException(paramByteOrderedDataInputStream.toString());
  }
  
  private void printAttributes()
  {
    int i = 0;
    while (i < mAttributes.length)
    {
      Object localObject = new StringBuilder();
      ((StringBuilder)localObject).append("The size of tag group[");
      ((StringBuilder)localObject).append(i);
      ((StringBuilder)localObject).append("]: ");
      ((StringBuilder)localObject).append(mAttributes[i].size());
      Log.d("ExifInterface", ((StringBuilder)localObject).toString());
      localObject = mAttributes[i].entrySet().iterator();
      while (((Iterator)localObject).hasNext())
      {
        Map.Entry localEntry = (Map.Entry)((Iterator)localObject).next();
        ExifAttribute localExifAttribute = (ExifAttribute)localEntry.getValue();
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("tagName: ");
        localStringBuilder.append((String)localEntry.getKey());
        localStringBuilder.append(", tagType: ");
        localStringBuilder.append(localExifAttribute.toString());
        localStringBuilder.append(", tagValue: '");
        localStringBuilder.append(localExifAttribute.getStringValue(mExifByteOrder));
        localStringBuilder.append("'");
        Log.d("ExifInterface", localStringBuilder.toString());
      }
      i += 1;
    }
  }
  
  private ByteOrder readByteOrder(ByteOrderedDataInputStream paramByteOrderedDataInputStream)
    throws IOException
  {
    int i = paramByteOrderedDataInputStream.readShort();
    if (i != 18761)
    {
      if (i == 19789)
      {
        if (DEBUG) {
          Log.d("ExifInterface", "readExifSegment: Byte Align MM");
        }
        return ByteOrder.BIG_ENDIAN;
      }
      paramByteOrderedDataInputStream = new StringBuilder();
      paramByteOrderedDataInputStream.append("Invalid byte order: ");
      paramByteOrderedDataInputStream.append(Integer.toHexString(i));
      throw new IOException(paramByteOrderedDataInputStream.toString());
    }
    if (DEBUG) {
      Log.d("ExifInterface", "readExifSegment: Byte Align II");
    }
    return ByteOrder.LITTLE_ENDIAN;
  }
  
  private void readExifSegment(byte[] paramArrayOfByte, int paramInt)
    throws IOException
  {
    ByteOrderedDataInputStream localByteOrderedDataInputStream = new ByteOrderedDataInputStream(paramArrayOfByte);
    parseTiffHeaders(localByteOrderedDataInputStream, paramArrayOfByte.length);
    readImageFileDirectory(localByteOrderedDataInputStream, paramInt);
  }
  
  private void readImageFileDirectory(ByteOrderedDataInputStream paramByteOrderedDataInputStream, int paramInt)
    throws IOException
  {
    mAttributesOffsets.add(Integer.valueOf(mPosition));
    if (mPosition + 2 > mLength) {
      return;
    }
    int j = paramByteOrderedDataInputStream.readShort();
    Object localObject1;
    if (DEBUG)
    {
      localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append("numberOfDirectoryEntry: ");
      ((StringBuilder)localObject1).append(j);
      Log.d("ExifInterface", ((StringBuilder)localObject1).toString());
    }
    if (mPosition + j * 12 <= mLength)
    {
      if (j <= 0) {
        return;
      }
      long l1;
      for (int k = 0; k < j; k = (short)(k + 1))
      {
        int i1 = paramByteOrderedDataInputStream.readUnsignedShort();
        int m = paramByteOrderedDataInputStream.readUnsignedShort();
        int n = paramByteOrderedDataInputStream.readInt();
        long l2 = paramByteOrderedDataInputStream.peek() + 4L;
        Object localObject2 = (ExifTag)sExifTagMapsForReading[paramInt].get(Integer.valueOf(i1));
        if (DEBUG)
        {
          if (localObject2 != null) {}
          for (localObject1 = name;; localObject1 = null) {
            break;
          }
          Log.d("ExifInterface", String.format("ifdType: %d, tagNumber: %d, tagName: %s, dataFormat: %d, numberOfComponents: %d", new Object[] { Integer.valueOf(paramInt), Integer.valueOf(i1), localObject1, Integer.valueOf(m), Integer.valueOf(n) }));
        }
        if (localObject2 == null) {
          if (DEBUG)
          {
            localObject1 = new StringBuilder();
            ((StringBuilder)localObject1).append("Skip the tag entry since tag number is not defined: ");
            ((StringBuilder)localObject1).append(i1);
            Log.d("ExifInterface", ((StringBuilder)localObject1).toString());
          }
        }
        for (;;)
        {
          break;
          if ((m > 0) && (m < IFD_FORMAT_BYTES_PER_FORMAT.length))
          {
            if (!((ExifTag)localObject2).isFormatCompatible(m))
            {
              if (DEBUG)
              {
                localObject1 = new StringBuilder();
                ((StringBuilder)localObject1).append("Skip the tag entry since data format (");
                ((StringBuilder)localObject1).append(IFD_FORMAT_NAMES[m]);
                ((StringBuilder)localObject1).append(") is unexpected for tag: ");
                ((StringBuilder)localObject1).append(name);
                Log.d("ExifInterface", ((StringBuilder)localObject1).toString());
              }
            }
            else
            {
              i = m;
              if (m == 7) {
                i = primaryFormat;
              }
              l1 = n;
              int i2 = IFD_FORMAT_BYTES_PER_FORMAT[i];
              m = i;
              l1 *= i2;
              if ((l1 >= 0L) && (l1 <= 2147483647L))
              {
                i = 1;
                break label552;
              }
              if (DEBUG)
              {
                localObject1 = new StringBuilder();
                ((StringBuilder)localObject1).append("Skip the tag entry since the number of components is invalid: ");
                ((StringBuilder)localObject1).append(n);
                Log.d("ExifInterface", ((StringBuilder)localObject1).toString());
              }
              i = 0;
              break label552;
            }
          }
          else if (DEBUG)
          {
            localObject1 = new StringBuilder();
            ((StringBuilder)localObject1).append("Skip the tag entry since data format is invalid: ");
            ((StringBuilder)localObject1).append(m);
            Log.d("ExifInterface", ((StringBuilder)localObject1).toString());
          }
        }
        int i = 0;
        l1 = 0L;
        label552:
        if (i == 0) {
          paramByteOrderedDataInputStream.seek(l2);
        }
        for (;;)
        {
          break;
          Object localObject3;
          if (l1 > 4L)
          {
            i = paramByteOrderedDataInputStream.readInt();
            if (DEBUG)
            {
              localObject1 = new StringBuilder();
              ((StringBuilder)localObject1).append("seek to data offset: ");
              ((StringBuilder)localObject1).append(i);
              Log.d("ExifInterface", ((StringBuilder)localObject1).toString());
            }
            if (mMimeType == 7)
            {
              if ("MakerNote".equals(name)) {
                mOrfMakerNoteOffset = i;
              }
              while ((paramInt != 6) || (!"ThumbnailImage".equals(name))) {
                break;
              }
              mOrfThumbnailOffset = i;
              mOrfThumbnailLength = n;
              localObject1 = ExifAttribute.createUShort(6, mExifByteOrder);
              localObject3 = ExifAttribute.createULong(mOrfThumbnailOffset, mExifByteOrder);
              ExifAttribute localExifAttribute = ExifAttribute.createULong(mOrfThumbnailLength, mExifByteOrder);
              mAttributes[4].put("Compression", localObject1);
              mAttributes[4].put("JPEGInterchangeFormat", localObject3);
              mAttributes[4].put("JPEGInterchangeFormatLength", localExifAttribute);
            }
            else if ((mMimeType == 10) && ("JpgFromRaw".equals(name)))
            {
              mRw2JpgFromRawOffset = i;
            }
            long l3 = i;
            if (l3 + l1 <= mLength)
            {
              paramByteOrderedDataInputStream.seek(l3);
            }
            else
            {
              if (DEBUG)
              {
                localObject1 = new StringBuilder();
                ((StringBuilder)localObject1).append("Skip the tag entry since data offset is invalid: ");
                ((StringBuilder)localObject1).append(i);
                Log.d("ExifInterface", ((StringBuilder)localObject1).toString());
              }
              paramByteOrderedDataInputStream.seek(l2);
              continue;
            }
          }
          localObject1 = (Integer)sExifPointerTagMap.get(Integer.valueOf(i1));
          if (DEBUG)
          {
            localObject3 = new StringBuilder();
            ((StringBuilder)localObject3).append("nextIfdType: ");
            ((StringBuilder)localObject3).append(localObject1);
            ((StringBuilder)localObject3).append(" byteCount: ");
            ((StringBuilder)localObject3).append(l1);
            Log.d("ExifInterface", ((StringBuilder)localObject3).toString());
          }
          if (localObject1 != null)
          {
            l1 = -1L;
            switch (m)
            {
            default: 
              break;
            case 9: 
            case 13: 
              l1 = paramByteOrderedDataInputStream.readInt();
              break;
            case 8: 
              l1 = paramByteOrderedDataInputStream.readShort();
              break;
            case 4: 
              l1 = paramByteOrderedDataInputStream.readUnsignedInt();
              break;
            case 3: 
              l1 = paramByteOrderedDataInputStream.readUnsignedShort();
            }
            if (DEBUG) {
              Log.d("ExifInterface", String.format("Offset: %d, tagName: %s", new Object[] { Long.valueOf(l1), name }));
            }
            if ((l1 > 0L) && (l1 < mLength))
            {
              if (!mAttributesOffsets.contains(Integer.valueOf((int)l1)))
              {
                paramByteOrderedDataInputStream.seek(l1);
                readImageFileDirectory(paramByteOrderedDataInputStream, ((Integer)localObject1).intValue());
              }
              else if (DEBUG)
              {
                localObject2 = new StringBuilder();
                ((StringBuilder)localObject2).append("Skip jump into the IFD since it has already been read: IfdType ");
                ((StringBuilder)localObject2).append(localObject1);
                ((StringBuilder)localObject2).append(" (at ");
                ((StringBuilder)localObject2).append(l1);
                ((StringBuilder)localObject2).append(")");
                Log.d("ExifInterface", ((StringBuilder)localObject2).toString());
              }
            }
            else if (DEBUG)
            {
              localObject1 = new StringBuilder();
              ((StringBuilder)localObject1).append("Skip jump into the IFD since its offset is invalid: ");
              ((StringBuilder)localObject1).append(l1);
              Log.d("ExifInterface", ((StringBuilder)localObject1).toString());
            }
            paramByteOrderedDataInputStream.seek(l2);
          }
          else
          {
            i = paramByteOrderedDataInputStream.peek();
            localObject1 = new byte[(int)l1];
            paramByteOrderedDataInputStream.readFully((byte[])localObject1);
            localObject1 = new ExifAttribute(m, n, i, (byte[])localObject1);
            mAttributes[paramInt].put(name, localObject1);
            if ("DNGVersion".equals(name)) {
              mMimeType = 3;
            }
            if (((!"Make".equals(name)) && (!"Model".equals(name))) || ((((ExifAttribute)localObject1).getStringValue(mExifByteOrder).contains("PENTAX")) || (("Compression".equals(name)) && (((ExifAttribute)localObject1).getIntValue(mExifByteOrder) == 65535)))) {
              mMimeType = 8;
            }
            if (paramByteOrderedDataInputStream.peek() != l2) {
              paramByteOrderedDataInputStream.seek(l2);
            }
          }
        }
      }
      if (paramByteOrderedDataInputStream.peek() + 4 <= mLength)
      {
        paramInt = paramByteOrderedDataInputStream.readInt();
        if (DEBUG) {
          Log.d("ExifInterface", String.format("nextIfdOffset: %d", new Object[] { Integer.valueOf(paramInt) }));
        }
        l1 = paramInt;
        if ((l1 > 0L) && (paramInt < mLength))
        {
          if (!mAttributesOffsets.contains(Integer.valueOf(paramInt)))
          {
            paramByteOrderedDataInputStream.seek(l1);
            if (mAttributes[4].isEmpty())
            {
              readImageFileDirectory(paramByteOrderedDataInputStream, 4);
              return;
            }
            if (mAttributes[5].isEmpty()) {
              readImageFileDirectory(paramByteOrderedDataInputStream, 5);
            }
          }
          else if (DEBUG)
          {
            paramByteOrderedDataInputStream = new StringBuilder();
            paramByteOrderedDataInputStream.append("Stop reading file since re-reading an IFD may cause an infinite loop: ");
            paramByteOrderedDataInputStream.append(paramInt);
            Log.d("ExifInterface", paramByteOrderedDataInputStream.toString());
          }
        }
        else if (DEBUG)
        {
          paramByteOrderedDataInputStream = new StringBuilder();
          paramByteOrderedDataInputStream.append("Stop reading file since a wrong offset may cause an infinite loop: ");
          paramByteOrderedDataInputStream.append(paramInt);
          Log.d("ExifInterface", paramByteOrderedDataInputStream.toString());
        }
      }
      return;
    }
  }
  
  private void removeAttribute(String paramString)
  {
    int i = 0;
    while (i < EXIF_TAGS.length)
    {
      mAttributes[i].remove(paramString);
      i += 1;
    }
  }
  
  private void retrieveJpegImageSize(ByteOrderedDataInputStream paramByteOrderedDataInputStream, int paramInt)
    throws IOException
  {
    ExifAttribute localExifAttribute1 = (ExifAttribute)mAttributes[paramInt].get("ImageLength");
    ExifAttribute localExifAttribute2 = (ExifAttribute)mAttributes[paramInt].get("ImageWidth");
    if ((localExifAttribute1 == null) || (localExifAttribute2 == null))
    {
      localExifAttribute1 = (ExifAttribute)mAttributes[paramInt].get("JPEGInterchangeFormat");
      if (localExifAttribute1 != null) {
        getJpegAttributes(paramByteOrderedDataInputStream, localExifAttribute1.getIntValue(mExifByteOrder), paramInt);
      }
    }
  }
  
  private void saveJpegAttributes(InputStream paramInputStream, OutputStream paramOutputStream)
    throws IOException
  {
    Object localObject;
    if (DEBUG)
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("saveJpegAttributes starting with (inputStream: ");
      ((StringBuilder)localObject).append(paramInputStream);
      ((StringBuilder)localObject).append(", outputStream: ");
      ((StringBuilder)localObject).append(paramOutputStream);
      ((StringBuilder)localObject).append(")");
      Log.d("ExifInterface", ((StringBuilder)localObject).toString());
    }
    paramInputStream = new DataInputStream(paramInputStream);
    paramOutputStream = new ByteOrderedDataOutputStream(paramOutputStream, ByteOrder.BIG_ENDIAN);
    if (paramInputStream.readByte() == -1)
    {
      paramOutputStream.writeByte(-1);
      if (paramInputStream.readByte() == -40)
      {
        paramOutputStream.writeByte(-40);
        paramOutputStream.writeByte(-1);
        paramOutputStream.writeByte(-31);
        writeExifSegment(paramOutputStream, 6);
        localObject = new byte['?'];
        while (paramInputStream.readByte() == -1)
        {
          int i = paramInputStream.readByte();
          if (i != -31)
          {
            switch (i)
            {
            default: 
              paramOutputStream.writeByte(-1);
              paramOutputStream.writeByte(i);
              i = paramInputStream.readUnsignedShort();
              paramOutputStream.writeUnsignedShort(i);
              i -= 2;
              if (i >= 0) {
                while (i > 0)
                {
                  j = paramInputStream.read((byte[])localObject, 0, Math.min(i, localObject.length));
                  if (j < 0) {
                    break;
                  }
                  paramOutputStream.write((byte[])localObject, 0, j);
                  i -= j;
                }
              }
              throw new IOException("Invalid length");
            }
            paramOutputStream.writeByte(-1);
            paramOutputStream.writeByte(i);
            copy(paramInputStream, paramOutputStream);
            return;
          }
          int j = paramInputStream.readUnsignedShort() - 2;
          if (j >= 0)
          {
            byte[] arrayOfByte = new byte[6];
            if (j >= 6) {
              if (paramInputStream.read(arrayOfByte) == 6)
              {
                if (Arrays.equals(arrayOfByte, IDENTIFIER_EXIF_APP1))
                {
                  i = j - 6;
                  if (paramInputStream.skipBytes(i) == i) {
                    continue;
                  }
                  throw new IOException("Invalid length");
                }
              }
              else {
                throw new IOException("Invalid exif");
              }
            }
            paramOutputStream.writeByte(-1);
            paramOutputStream.writeByte(i);
            paramOutputStream.writeUnsignedShort(j + 2);
            i = j;
            if (j >= 6)
            {
              i = j - 6;
              paramOutputStream.write(arrayOfByte);
            }
            for (;;)
            {
              if (i <= 0) {
                break label450;
              }
              j = paramInputStream.read((byte[])localObject, 0, Math.min(i, localObject.length));
              if (j < 0) {
                break;
              }
              paramOutputStream.write((byte[])localObject, 0, j);
              i -= j;
            }
          }
          else
          {
            label450:
            throw new IOException("Invalid length");
          }
        }
        throw new IOException("Invalid marker");
      }
      throw new IOException("Invalid marker");
    }
    throw new IOException("Invalid marker");
  }
  
  private void setThumbnailData(ByteOrderedDataInputStream paramByteOrderedDataInputStream)
    throws IOException
  {
    HashMap localHashMap = mAttributes[4];
    ExifAttribute localExifAttribute = (ExifAttribute)localHashMap.get("Compression");
    if (localExifAttribute != null)
    {
      mThumbnailCompression = localExifAttribute.getIntValue(mExifByteOrder);
      int i = mThumbnailCompression;
      if (i != 1) {
        switch (i)
        {
        default: 
          return;
        case 6: 
          handleThumbnailFromJfif(paramByteOrderedDataInputStream, localHashMap);
          return;
        }
      }
      if (isSupportedDataType(localHashMap)) {
        handleThumbnailFromStrips(paramByteOrderedDataInputStream, localHashMap);
      }
    }
    else
    {
      mThumbnailCompression = 6;
      handleThumbnailFromJfif(paramByteOrderedDataInputStream, localHashMap);
    }
  }
  
  private static boolean startsWith(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
  {
    if (paramArrayOfByte1 != null)
    {
      if (paramArrayOfByte2 == null) {
        return false;
      }
      if (paramArrayOfByte1.length < paramArrayOfByte2.length) {
        return false;
      }
      int i = 0;
      while (i < paramArrayOfByte2.length)
      {
        if (paramArrayOfByte1[i] != paramArrayOfByte2[i]) {
          return false;
        }
        i += 1;
      }
      return true;
    }
    return false;
  }
  
  private void swapBasedOnImageSize(int paramInt1, int paramInt2)
    throws IOException
  {
    if ((!mAttributes[paramInt1].isEmpty()) && (!mAttributes[paramInt2].isEmpty()))
    {
      Object localObject = (ExifAttribute)mAttributes[paramInt1].get("ImageLength");
      ExifAttribute localExifAttribute1 = (ExifAttribute)mAttributes[paramInt1].get("ImageWidth");
      ExifAttribute localExifAttribute2 = (ExifAttribute)mAttributes[paramInt2].get("ImageLength");
      ExifAttribute localExifAttribute3 = (ExifAttribute)mAttributes[paramInt2].get("ImageWidth");
      if ((localObject != null) && (localExifAttribute1 != null))
      {
        if ((localExifAttribute2 != null) && (localExifAttribute3 != null))
        {
          int i = ((ExifAttribute)localObject).getIntValue(mExifByteOrder);
          int j = localExifAttribute1.getIntValue(mExifByteOrder);
          int k = localExifAttribute2.getIntValue(mExifByteOrder);
          int m = localExifAttribute3.getIntValue(mExifByteOrder);
          if ((i < k) && (j < m))
          {
            localObject = mAttributes[paramInt1];
            mAttributes[paramInt1] = mAttributes[paramInt2];
            mAttributes[paramInt2] = localObject;
          }
        }
        else if (DEBUG)
        {
          Log.d("ExifInterface", "Second image does not contain valid size information");
        }
      }
      else if (DEBUG) {
        Log.d("ExifInterface", "First image does not contain valid size information");
      }
      return;
    }
    if (DEBUG) {
      Log.d("ExifInterface", "Cannot perform swap since only one image data exists");
    }
  }
  
  private boolean updateAttribute(String paramString, ExifAttribute paramExifAttribute)
  {
    int i = 0;
    boolean bool = false;
    while (i < EXIF_TAGS.length)
    {
      if (mAttributes[i].containsKey(paramString))
      {
        mAttributes[i].put(paramString, paramExifAttribute);
        bool = true;
      }
      i += 1;
    }
    return bool;
  }
  
  private void updateImageSizeValues(ByteOrderedDataInputStream paramByteOrderedDataInputStream, int paramInt)
    throws IOException
  {
    Object localObject = (ExifAttribute)mAttributes[paramInt].get("DefaultCropSize");
    ExifAttribute localExifAttribute1 = (ExifAttribute)mAttributes[paramInt].get("SensorTopBorder");
    ExifAttribute localExifAttribute2 = (ExifAttribute)mAttributes[paramInt].get("SensorLeftBorder");
    ExifAttribute localExifAttribute3 = (ExifAttribute)mAttributes[paramInt].get("SensorBottomBorder");
    ExifAttribute localExifAttribute4 = (ExifAttribute)mAttributes[paramInt].get("SensorRightBorder");
    if (localObject != null)
    {
      if (format == 5)
      {
        localObject = (Rational[])((ExifAttribute)localObject).getValue(mExifByteOrder);
        if ((localObject != null) && (localObject.length == 2))
        {
          paramByteOrderedDataInputStream = ExifAttribute.createURational(localObject[0], mExifByteOrder);
          localObject = ExifAttribute.createURational(localObject[1], mExifByteOrder);
        }
        else
        {
          paramByteOrderedDataInputStream = new StringBuilder();
          paramByteOrderedDataInputStream.append("Invalid crop size values. cropSize=");
          paramByteOrderedDataInputStream.append(Arrays.toString((Object[])localObject));
          Log.w("ExifInterface", paramByteOrderedDataInputStream.toString());
        }
      }
      else
      {
        localObject = (int[])((ExifAttribute)localObject).getValue(mExifByteOrder);
        if ((localObject == null) || (localObject.length != 2)) {
          break label278;
        }
        paramByteOrderedDataInputStream = ExifAttribute.createUShort(localObject[0], mExifByteOrder);
        localObject = ExifAttribute.createUShort(localObject[1], mExifByteOrder);
      }
      mAttributes[paramInt].put("ImageWidth", paramByteOrderedDataInputStream);
      mAttributes[paramInt].put("ImageLength", localObject);
      return;
      label278:
      paramByteOrderedDataInputStream = new StringBuilder();
      paramByteOrderedDataInputStream.append("Invalid crop size values. cropSize=");
      paramByteOrderedDataInputStream.append(Arrays.toString((int[])localObject));
      Log.w("ExifInterface", paramByteOrderedDataInputStream.toString());
      return;
    }
    if ((localExifAttribute1 != null) && (localExifAttribute2 != null) && (localExifAttribute3 != null) && (localExifAttribute4 != null))
    {
      int i = localExifAttribute1.getIntValue(mExifByteOrder);
      int j = localExifAttribute3.getIntValue(mExifByteOrder);
      int k = localExifAttribute4.getIntValue(mExifByteOrder);
      int m = localExifAttribute2.getIntValue(mExifByteOrder);
      if ((j > i) && (k > m))
      {
        paramByteOrderedDataInputStream = ExifAttribute.createUShort(j - i, mExifByteOrder);
        localObject = ExifAttribute.createUShort(k - m, mExifByteOrder);
        mAttributes[paramInt].put("ImageLength", paramByteOrderedDataInputStream);
        mAttributes[paramInt].put("ImageWidth", localObject);
      }
    }
    else
    {
      retrieveJpegImageSize(paramByteOrderedDataInputStream, paramInt);
    }
  }
  
  private void validateImages(InputStream paramInputStream)
    throws IOException
  {
    swapBasedOnImageSize(0, 5);
    swapBasedOnImageSize(0, 4);
    swapBasedOnImageSize(5, 4);
    paramInputStream = (ExifAttribute)mAttributes[1].get("PixelXDimension");
    ExifAttribute localExifAttribute = (ExifAttribute)mAttributes[1].get("PixelYDimension");
    if ((paramInputStream != null) && (localExifAttribute != null))
    {
      mAttributes[0].put("ImageWidth", paramInputStream);
      mAttributes[0].put("ImageLength", localExifAttribute);
    }
    if ((mAttributes[4].isEmpty()) && (isThumbnail(mAttributes[5])))
    {
      mAttributes[4] = mAttributes[5];
      mAttributes[5] = new HashMap();
    }
    if (!isThumbnail(mAttributes[4])) {
      Log.d("ExifInterface", "No image meets the size requirements of a thumbnail image.");
    }
  }
  
  private int writeExifSegment(ByteOrderedDataOutputStream paramByteOrderedDataOutputStream, int paramInt)
    throws IOException
  {
    int[] arrayOfInt = new int[EXIF_TAGS.length];
    Object localObject1 = new int[EXIF_TAGS.length];
    Object localObject2 = EXIF_POINTER_TAGS;
    int j = localObject2.length;
    int i = 0;
    while (i < j)
    {
      removeAttribute(name);
      i += 1;
    }
    removeAttribute(JPEG_INTERCHANGE_FORMAT_TAGname);
    removeAttribute(JPEG_INTERCHANGE_FORMAT_LENGTH_TAGname);
    i = 0;
    while (i < EXIF_TAGS.length)
    {
      localObject2 = mAttributes[i].entrySet().toArray();
      k = localObject2.length;
      j = 0;
      while (j < k)
      {
        Map.Entry localEntry = (Map.Entry)localObject2[j];
        if (localEntry.getValue() == null) {
          mAttributes[i].remove(localEntry.getKey());
        }
        j += 1;
      }
      i += 1;
    }
    if (!mAttributes[1].isEmpty()) {
      mAttributes[0].put(EXIF_POINTER_TAGS1name, ExifAttribute.createULong(0L, mExifByteOrder));
    }
    if (!mAttributes[2].isEmpty()) {
      mAttributes[0].put(EXIF_POINTER_TAGS2name, ExifAttribute.createULong(0L, mExifByteOrder));
    }
    if (!mAttributes[3].isEmpty()) {
      mAttributes[1].put(EXIF_POINTER_TAGS3name, ExifAttribute.createULong(0L, mExifByteOrder));
    }
    if (mHasThumbnail)
    {
      mAttributes[4].put(JPEG_INTERCHANGE_FORMAT_TAGname, ExifAttribute.createULong(0L, mExifByteOrder));
      mAttributes[4].put(JPEG_INTERCHANGE_FORMAT_LENGTH_TAGname, ExifAttribute.createULong(mThumbnailLength, mExifByteOrder));
    }
    i = 0;
    while (i < EXIF_TAGS.length)
    {
      localObject2 = mAttributes[i].entrySet().iterator();
      j = 0;
      while (((Iterator)localObject2).hasNext())
      {
        k = ((ExifAttribute)((Map.Entry)((Iterator)localObject2).next()).getValue()).size();
        if (k > 4) {
          j += k;
        }
      }
      localObject1[i] += j;
      i += 1;
    }
    j = 0;
    for (i = 8; j < EXIF_TAGS.length; i = k)
    {
      k = i;
      if (!mAttributes[j].isEmpty())
      {
        arrayOfInt[j] = i;
        k = i + (mAttributes[j].size() * 12 + 2 + 4 + localObject1[j]);
      }
      j += 1;
    }
    j = i;
    if (mHasThumbnail)
    {
      mAttributes[4].put(JPEG_INTERCHANGE_FORMAT_TAGname, ExifAttribute.createULong(i, mExifByteOrder));
      mThumbnailOffset = (paramInt + i);
      j = i + mThumbnailLength;
    }
    int k = j + 8;
    if (DEBUG)
    {
      localObject2 = new StringBuilder();
      ((StringBuilder)localObject2).append("totalSize length: ");
      ((StringBuilder)localObject2).append(k);
      Log.d("ExifInterface", ((StringBuilder)localObject2).toString());
      paramInt = 0;
      while (paramInt < EXIF_TAGS.length)
      {
        Log.d("ExifInterface", String.format("index: %d, offsets: %d, tag count: %d, data sizes: %d", new Object[] { Integer.valueOf(paramInt), Integer.valueOf(arrayOfInt[paramInt]), Integer.valueOf(mAttributes[paramInt].size()), Integer.valueOf(localObject1[paramInt]) }));
        paramInt += 1;
      }
    }
    if (!mAttributes[1].isEmpty()) {
      mAttributes[0].put(EXIF_POINTER_TAGS1name, ExifAttribute.createULong(arrayOfInt[1], mExifByteOrder));
    }
    if (!mAttributes[2].isEmpty()) {
      mAttributes[0].put(EXIF_POINTER_TAGS2name, ExifAttribute.createULong(arrayOfInt[2], mExifByteOrder));
    }
    if (!mAttributes[3].isEmpty()) {
      mAttributes[1].put(EXIF_POINTER_TAGS3name, ExifAttribute.createULong(arrayOfInt[3], mExifByteOrder));
    }
    paramByteOrderedDataOutputStream.writeUnsignedShort(k);
    paramByteOrderedDataOutputStream.write(IDENTIFIER_EXIF_APP1);
    short s;
    if (mExifByteOrder == ByteOrder.BIG_ENDIAN) {
      s = 19789;
    } else {
      s = 18761;
    }
    paramByteOrderedDataOutputStream.writeShort(s);
    paramByteOrderedDataOutputStream.setByteOrder(mExifByteOrder);
    paramByteOrderedDataOutputStream.writeUnsignedShort(42);
    paramByteOrderedDataOutputStream.writeUnsignedInt(8L);
    paramInt = 0;
    while (paramInt < EXIF_TAGS.length)
    {
      if (!mAttributes[paramInt].isEmpty())
      {
        paramByteOrderedDataOutputStream.writeUnsignedShort(mAttributes[paramInt].size());
        i = arrayOfInt[paramInt] + 2 + mAttributes[paramInt].size() * 12 + 4;
        localObject1 = mAttributes[paramInt].entrySet().iterator();
        while (((Iterator)localObject1).hasNext())
        {
          localObject2 = (Map.Entry)((Iterator)localObject1).next();
          int m = sExifTagMapsForWritinggetgetKeynumber;
          localObject2 = (ExifAttribute)((Map.Entry)localObject2).getValue();
          j = ((ExifAttribute)localObject2).size();
          paramByteOrderedDataOutputStream.writeUnsignedShort(m);
          paramByteOrderedDataOutputStream.writeUnsignedShort(format);
          paramByteOrderedDataOutputStream.writeInt(numberOfComponents);
          if (j > 4)
          {
            paramByteOrderedDataOutputStream.writeUnsignedInt(i);
            i += j;
          }
          else
          {
            paramByteOrderedDataOutputStream.write(bytes);
            if (j < 4) {
              while (j < 4)
              {
                paramByteOrderedDataOutputStream.writeByte(0);
                j += 1;
              }
            }
          }
        }
        if ((paramInt == 0) && (!mAttributes[4].isEmpty())) {
          paramByteOrderedDataOutputStream.writeUnsignedInt(arrayOfInt[4]);
        } else {
          paramByteOrderedDataOutputStream.writeUnsignedInt(0L);
        }
        localObject1 = mAttributes[paramInt].entrySet().iterator();
        while (((Iterator)localObject1).hasNext())
        {
          localObject2 = (ExifAttribute)((Map.Entry)((Iterator)localObject1).next()).getValue();
          if (bytes.length > 4) {
            paramByteOrderedDataOutputStream.write(bytes, 0, bytes.length);
          }
        }
      }
      paramInt += 1;
    }
    if (mHasThumbnail) {
      paramByteOrderedDataOutputStream.write(getThumbnailBytes());
    }
    paramByteOrderedDataOutputStream.setByteOrder(ByteOrder.BIG_ENDIAN);
    return k;
  }
  
  public void flipHorizontally()
  {
    int i = 1;
    switch (getAttributeInt("Orientation", 1))
    {
    default: 
      i = 0;
      break;
    case 8: 
      i = 7;
      break;
    case 7: 
      i = 8;
      break;
    case 6: 
      i = 5;
      break;
    case 5: 
      i = 6;
      break;
    case 4: 
      i = 3;
      break;
    case 3: 
      i = 4;
      break;
    case 1: 
      i = 2;
    }
    setAttribute("Orientation", Integer.toString(i));
  }
  
  public void flipVertically()
  {
    int i = 1;
    switch (getAttributeInt("Orientation", 1))
    {
    default: 
      i = 0;
      break;
    case 8: 
      i = 5;
      break;
    case 7: 
      i = 6;
      break;
    case 6: 
      i = 7;
      break;
    case 5: 
      i = 8;
      break;
    case 3: 
      i = 2;
      break;
    case 2: 
      i = 3;
      break;
    case 1: 
      i = 4;
    }
    setAttribute("Orientation", Integer.toString(i));
  }
  
  public double getAltitude(double paramDouble)
  {
    double d = getAttributeDouble("GPSAltitude", -1.0D);
    int j = getAttributeInt("GPSAltitudeRef", -1);
    if ((d >= 0.0D) && (j >= 0))
    {
      int i = 1;
      if (j == 1) {
        i = -1;
      }
      return d * i;
    }
    return paramDouble;
  }
  
  @Nullable
  public String getAttribute(@NonNull String paramString)
  {
    Object localObject;
    if (paramString != null)
    {
      localObject = getExifAttribute(paramString);
      if (localObject != null)
      {
        if (!sTagSetForCompatibility.contains(paramString)) {
          return ((ExifAttribute)localObject).getStringValue(mExifByteOrder);
        }
        if (paramString.equals("GPSTimeStamp"))
        {
          if ((format != 5) && (format != 10))
          {
            paramString = new StringBuilder();
            paramString.append("GPS Timestamp format is not rational. format=");
            paramString.append(format);
            Log.w("ExifInterface", paramString.toString());
            return null;
          }
          paramString = (Rational[])((ExifAttribute)localObject).getValue(mExifByteOrder);
          if ((paramString != null) && (paramString.length == 3)) {
            return String.format("%02d:%02d:%02d", new Object[] { Integer.valueOf((int)((float)0numerator / (float)0denominator)), Integer.valueOf((int)((float)1numerator / (float)1denominator)), Integer.valueOf((int)((float)2numerator / (float)2denominator)) });
          }
          localObject = new StringBuilder();
          ((StringBuilder)localObject).append("Invalid GPS Timestamp array. array=");
          ((StringBuilder)localObject).append(Arrays.toString(paramString));
          Log.w("ExifInterface", ((StringBuilder)localObject).toString());
          return null;
        }
      }
    }
    try
    {
      paramString = Double.toString(((ExifAttribute)localObject).getDoubleValue(mExifByteOrder));
      return paramString;
    }
    catch (NumberFormatException paramString) {}
    return null;
    throw new NullPointerException("tag shouldn't be null");
    return null;
  }
  
  @Nullable
  public byte[] getAttributeBytes(@NonNull String paramString)
  {
    if (paramString != null)
    {
      paramString = getExifAttribute(paramString);
      if (paramString != null) {
        return bytes;
      }
      return null;
    }
    throw new NullPointerException("tag shouldn't be null");
  }
  
  public double getAttributeDouble(@NonNull String paramString, double paramDouble)
  {
    if (paramString != null)
    {
      paramString = getExifAttribute(paramString);
      if (paramString == null) {
        return paramDouble;
      }
    }
    try
    {
      double d = paramString.getDoubleValue(mExifByteOrder);
      return d;
    }
    catch (NumberFormatException paramString) {}
    throw new NullPointerException("tag shouldn't be null");
    return paramDouble;
  }
  
  public int getAttributeInt(@NonNull String paramString, int paramInt)
  {
    if (paramString != null)
    {
      paramString = getExifAttribute(paramString);
      if (paramString == null) {
        return paramInt;
      }
    }
    try
    {
      int i = paramString.getIntValue(mExifByteOrder);
      return i;
    }
    catch (NumberFormatException paramString) {}
    throw new NullPointerException("tag shouldn't be null");
    return paramInt;
  }
  
  @Nullable
  public long[] getAttributeRange(@NonNull String paramString)
  {
    if (paramString != null)
    {
      if (!mModified)
      {
        paramString = getExifAttribute(paramString);
        if (paramString != null) {
          return new long[] { bytesOffset, bytes.length };
        }
        return null;
      }
      throw new IllegalStateException("The underlying file has been modified since being parsed");
    }
    throw new NullPointerException("tag shouldn't be null");
  }
  
  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY})
  public long getDateTime()
  {
    return parseDateTime(getAttribute("DateTime"), getAttribute("SubSecTime"));
  }
  
  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY})
  public long getDateTimeDigitized()
  {
    return parseDateTime(getAttribute("DateTimeDigitized"), getAttribute("SubSecTimeDigitized"));
  }
  
  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY})
  public long getDateTimeOriginal()
  {
    return parseDateTime(getAttribute("DateTimeOriginal"), getAttribute("SubSecTimeOriginal"));
  }
  
  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY})
  public long getGpsDateTime()
  {
    Object localObject1 = getAttribute("GPSDateStamp");
    Object localObject2 = getAttribute("GPSTimeStamp");
    if ((localObject1 != null) && (localObject2 != null))
    {
      if ((!sNonZeroTimePattern.matcher((CharSequence)localObject1).matches()) && (!sNonZeroTimePattern.matcher((CharSequence)localObject2).matches())) {
        return -1L;
      }
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append((String)localObject1);
      localStringBuilder.append(' ');
      localStringBuilder.append((String)localObject2);
      localObject1 = localStringBuilder.toString();
      localObject2 = new ParsePosition(0);
    }
    try
    {
      localObject1 = sFormatter.parse((String)localObject1, (ParsePosition)localObject2);
      if (localObject1 == null) {
        return -1L;
      }
      long l = ((Date)localObject1).getTime();
      return l;
    }
    catch (IllegalArgumentException localIllegalArgumentException) {}
    return -1L;
    return -1L;
  }
  
  @Deprecated
  public boolean getLatLong(float[] paramArrayOfFloat)
  {
    double[] arrayOfDouble = getLatLong();
    if (arrayOfDouble == null) {
      return false;
    }
    paramArrayOfFloat[0] = ((float)arrayOfDouble[0]);
    paramArrayOfFloat[1] = ((float)arrayOfDouble[1]);
    return true;
  }
  
  @Nullable
  public double[] getLatLong()
  {
    String str1 = getAttribute("GPSLatitude");
    String str2 = getAttribute("GPSLatitudeRef");
    String str3 = getAttribute("GPSLongitude");
    String str4 = getAttribute("GPSLongitudeRef");
    if ((str1 != null) && (str2 != null) && (str3 != null) && (str4 != null)) {}
    try
    {
      double d1 = convertRationalLatLonToDouble(str1, str2);
      double d2 = convertRationalLatLonToDouble(str3, str4);
      return new double[] { d1, d2 };
    }
    catch (IllegalArgumentException localIllegalArgumentException)
    {
      StringBuilder localStringBuilder;
      for (;;) {}
    }
    localStringBuilder = new StringBuilder();
    localStringBuilder.append("Latitude/longitude values are not parsable. ");
    localStringBuilder.append(String.format("latValue=%s, latRef=%s, lngValue=%s, lngRef=%s", new Object[] { str1, str2, str3, str4 }));
    Log.w("ExifInterface", localStringBuilder.toString());
    return null;
  }
  
  public int getRotationDegrees()
  {
    switch (getAttributeInt("Orientation", 1))
    {
    default: 
      return 0;
    case 6: 
    case 7: 
      return 90;
    case 5: 
    case 8: 
      return 270;
    }
    return 180;
  }
  
  @Nullable
  public byte[] getThumbnail()
  {
    if ((mThumbnailCompression != 6) && (mThumbnailCompression != 7)) {
      return null;
    }
    return getThumbnailBytes();
  }
  
  @Nullable
  public Bitmap getThumbnailBitmap()
  {
    if (!mHasThumbnail) {
      return null;
    }
    if (mThumbnailBytes == null) {
      mThumbnailBytes = getThumbnailBytes();
    }
    if ((mThumbnailCompression != 6) && (mThumbnailCompression != 7))
    {
      if (mThumbnailCompression == 1)
      {
        int[] arrayOfInt = new int[mThumbnailBytes.length / 3];
        int i = 0;
        while (i < arrayOfInt.length)
        {
          localObject = mThumbnailBytes;
          int j = i * 3;
          arrayOfInt[i] = ((localObject[j] << 16) + 0 + (mThumbnailBytes[(j + 1)] << 8) + mThumbnailBytes[(j + 2)]);
          i += 1;
        }
        Object localObject = (ExifAttribute)mAttributes[4].get("ImageLength");
        ExifAttribute localExifAttribute = (ExifAttribute)mAttributes[4].get("ImageWidth");
        if ((localObject != null) && (localExifAttribute != null))
        {
          i = ((ExifAttribute)localObject).getIntValue(mExifByteOrder);
          return Bitmap.createBitmap(arrayOfInt, localExifAttribute.getIntValue(mExifByteOrder), i, Bitmap.Config.ARGB_8888);
        }
      }
      return null;
    }
    return BitmapFactory.decodeByteArray(mThumbnailBytes, 0, mThumbnailLength);
  }
  
  /* Error */
  @Nullable
  public byte[] getThumbnailBytes()
  {
    // Byte code:
    //   0: aload_0
    //   1: getfield 1697	androidx/exifinterface/media/ExifInterface:mHasThumbnail	Z
    //   4: istore_1
    //   5: aconst_null
    //   6: astore 4
    //   8: iload_1
    //   9: ifne +5 -> 14
    //   12: aconst_null
    //   13: areturn
    //   14: aload_0
    //   15: getfield 1703	androidx/exifinterface/media/ExifInterface:mThumbnailBytes	[B
    //   18: ifnull +8 -> 26
    //   21: aload_0
    //   22: getfield 1703	androidx/exifinterface/media/ExifInterface:mThumbnailBytes	[B
    //   25: areturn
    //   26: aload_0
    //   27: getfield 1230	androidx/exifinterface/media/ExifInterface:mAssetInputStream	Landroid/content/res/AssetManager$AssetInputStream;
    //   30: ifnull +49 -> 79
    //   33: aload_0
    //   34: getfield 1230	androidx/exifinterface/media/ExifInterface:mAssetInputStream	Landroid/content/res/AssetManager$AssetInputStream;
    //   37: astore_2
    //   38: aload_2
    //   39: invokevirtual 2162	java/io/InputStream:markSupported	()Z
    //   42: ifeq +10 -> 52
    //   45: aload_2
    //   46: invokevirtual 2163	java/io/InputStream:reset	()V
    //   49: goto +296 -> 345
    //   52: ldc_w 371
    //   55: ldc_w 2165
    //   58: invokestatic 1398	android/util/Log:d	(Ljava/lang/String;Ljava/lang/String;)I
    //   61: pop
    //   62: aload_2
    //   63: invokestatic 1266	androidx/exifinterface/media/ExifInterface:closeQuietly	(Ljava/io/Closeable;)V
    //   66: aconst_null
    //   67: areturn
    //   68: astore_3
    //   69: goto +260 -> 329
    //   72: astore 4
    //   74: aconst_null
    //   75: astore_3
    //   76: goto +219 -> 295
    //   79: aload_0
    //   80: getfield 1232	androidx/exifinterface/media/ExifInterface:mFilename	Ljava/lang/String;
    //   83: ifnull +18 -> 101
    //   86: new 1256	java/io/FileInputStream
    //   89: dup
    //   90: aload_0
    //   91: getfield 1232	androidx/exifinterface/media/ExifInterface:mFilename	Ljava/lang/String;
    //   94: invokespecial 1719	java/io/FileInputStream:<init>	(Ljava/lang/String;)V
    //   97: astore_2
    //   98: goto +247 -> 345
    //   101: getstatic 1237	android/os/Build$VERSION:SDK_INT	I
    //   104: bipush 21
    //   106: if_icmplt +63 -> 169
    //   109: aload_0
    //   110: getfield 1243	androidx/exifinterface/media/ExifInterface:mSeekableFileDescriptor	Ljava/io/FileDescriptor;
    //   113: ifnull +56 -> 169
    //   116: aload_0
    //   117: getfield 1243	androidx/exifinterface/media/ExifInterface:mSeekableFileDescriptor	Ljava/io/FileDescriptor;
    //   120: invokestatic 1249	android/system/Os:dup	(Ljava/io/FileDescriptor;)Ljava/io/FileDescriptor;
    //   123: astore_2
    //   124: aload_2
    //   125: lconst_0
    //   126: getstatic 2168	android/system/OsConstants:SEEK_SET	I
    //   129: invokestatic 1749	android/system/Os:lseek	(Ljava/io/FileDescriptor;JI)J
    //   132: pop2
    //   133: new 1256	java/io/FileInputStream
    //   136: dup
    //   137: aload_2
    //   138: invokespecial 1258	java/io/FileInputStream:<init>	(Ljava/io/FileDescriptor;)V
    //   141: astore 4
    //   143: aload_2
    //   144: astore_3
    //   145: aload 4
    //   147: astore_2
    //   148: goto +25 -> 173
    //   151: astore_3
    //   152: aload_2
    //   153: astore 4
    //   155: aconst_null
    //   156: astore_2
    //   157: goto +172 -> 329
    //   160: astore 4
    //   162: aload_2
    //   163: astore_3
    //   164: aconst_null
    //   165: astore_2
    //   166: goto +129 -> 295
    //   169: aconst_null
    //   170: astore_2
    //   171: aload_2
    //   172: astore_3
    //   173: aload_2
    //   174: ifnull +85 -> 259
    //   177: aload_2
    //   178: aload_0
    //   179: getfield 1699	androidx/exifinterface/media/ExifInterface:mThumbnailOffset	I
    //   182: i2l
    //   183: invokevirtual 2172	java/io/InputStream:skip	(J)J
    //   186: aload_0
    //   187: getfield 1699	androidx/exifinterface/media/ExifInterface:mThumbnailOffset	I
    //   190: i2l
    //   191: lcmp
    //   192: ifne +56 -> 248
    //   195: aload_0
    //   196: getfield 1701	androidx/exifinterface/media/ExifInterface:mThumbnailLength	I
    //   199: newarray byte
    //   201: astore 4
    //   203: aload_2
    //   204: aload 4
    //   206: invokevirtual 1385	java/io/InputStream:read	([B)I
    //   209: aload_0
    //   210: getfield 1701	androidx/exifinterface/media/ExifInterface:mThumbnailLength	I
    //   213: if_icmpne +24 -> 237
    //   216: aload_0
    //   217: aload 4
    //   219: putfield 1703	androidx/exifinterface/media/ExifInterface:mThumbnailBytes	[B
    //   222: aload_2
    //   223: invokestatic 1266	androidx/exifinterface/media/ExifInterface:closeQuietly	(Ljava/io/Closeable;)V
    //   226: aload_3
    //   227: ifnull +7 -> 234
    //   230: aload_3
    //   231: invokestatic 1269	androidx/exifinterface/media/ExifInterface:closeFileDescriptor	(Ljava/io/FileDescriptor;)V
    //   234: aload 4
    //   236: areturn
    //   237: new 1193	java/io/IOException
    //   240: dup
    //   241: ldc_w 2174
    //   244: invokespecial 1450	java/io/IOException:<init>	(Ljava/lang/String;)V
    //   247: athrow
    //   248: new 1193	java/io/IOException
    //   251: dup
    //   252: ldc_w 2174
    //   255: invokespecial 1450	java/io/IOException:<init>	(Ljava/lang/String;)V
    //   258: athrow
    //   259: new 2176	java/io/FileNotFoundException
    //   262: dup
    //   263: invokespecial 2177	java/io/FileNotFoundException:<init>	()V
    //   266: athrow
    //   267: astore 5
    //   269: aload_3
    //   270: astore 4
    //   272: aload 5
    //   274: astore_3
    //   275: goto +54 -> 329
    //   278: astore 4
    //   280: goto +15 -> 295
    //   283: astore_3
    //   284: aconst_null
    //   285: astore_2
    //   286: goto +43 -> 329
    //   289: astore 4
    //   291: aconst_null
    //   292: astore_2
    //   293: aload_2
    //   294: astore_3
    //   295: ldc_w 371
    //   298: ldc_w 2179
    //   301: aload 4
    //   303: invokestatic 1732	android/util/Log:d	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   306: pop
    //   307: aload_2
    //   308: invokestatic 1266	androidx/exifinterface/media/ExifInterface:closeQuietly	(Ljava/io/Closeable;)V
    //   311: aload_3
    //   312: ifnull +7 -> 319
    //   315: aload_3
    //   316: invokestatic 1269	androidx/exifinterface/media/ExifInterface:closeFileDescriptor	(Ljava/io/FileDescriptor;)V
    //   319: aconst_null
    //   320: areturn
    //   321: astore 5
    //   323: aload_3
    //   324: astore 4
    //   326: aload 5
    //   328: astore_3
    //   329: aload_2
    //   330: invokestatic 1266	androidx/exifinterface/media/ExifInterface:closeQuietly	(Ljava/io/Closeable;)V
    //   333: aload 4
    //   335: ifnull +8 -> 343
    //   338: aload 4
    //   340: invokestatic 1269	androidx/exifinterface/media/ExifInterface:closeFileDescriptor	(Ljava/io/FileDescriptor;)V
    //   343: aload_3
    //   344: athrow
    //   345: aconst_null
    //   346: astore_3
    //   347: goto -174 -> 173
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	350	0	this	ExifInterface
    //   4	5	1	bool	boolean
    //   37	293	2	localObject1	Object
    //   68	1	3	localObject2	Object
    //   75	70	3	localObject3	Object
    //   151	1	3	localObject4	Object
    //   163	112	3	localObject5	Object
    //   283	1	3	localObject6	Object
    //   294	53	3	localObject7	Object
    //   6	1	4	localObject8	Object
    //   72	1	4	localException1	Exception
    //   141	13	4	localObject9	Object
    //   160	1	4	localException2	Exception
    //   201	70	4	localObject10	Object
    //   278	1	4	localException3	Exception
    //   289	13	4	localException4	Exception
    //   324	15	4	localObject11	Object
    //   267	6	5	localObject12	Object
    //   321	6	5	localObject13	Object
    // Exception table:
    //   from	to	target	type
    //   38	49	68	finally
    //   52	62	68	finally
    //   38	49	72	java/lang/Exception
    //   52	62	72	java/lang/Exception
    //   124	143	151	finally
    //   124	143	160	java/lang/Exception
    //   177	222	267	finally
    //   237	248	267	finally
    //   248	259	267	finally
    //   259	267	267	finally
    //   177	222	278	java/lang/Exception
    //   237	248	278	java/lang/Exception
    //   248	259	278	java/lang/Exception
    //   259	267	278	java/lang/Exception
    //   26	38	283	finally
    //   79	98	283	finally
    //   101	124	283	finally
    //   26	38	289	java/lang/Exception
    //   79	98	289	java/lang/Exception
    //   101	124	289	java/lang/Exception
    //   295	307	321	finally
  }
  
  @Nullable
  public long[] getThumbnailRange()
  {
    if (!mModified)
    {
      if (mHasThumbnail) {
        return new long[] { mThumbnailOffset, mThumbnailLength };
      }
      return null;
    }
    throw new IllegalStateException("The underlying file has been modified since being parsed");
  }
  
  public boolean hasAttribute(@NonNull String paramString)
  {
    return getExifAttribute(paramString) != null;
  }
  
  public boolean hasThumbnail()
  {
    return mHasThumbnail;
  }
  
  public boolean isFlipped()
  {
    int i = getAttributeInt("Orientation", 1);
    if ((i != 2) && (i != 7)) {
      switch (i)
      {
      default: 
        return false;
      }
    }
    return true;
  }
  
  public boolean isThumbnailCompressed()
  {
    if (!mHasThumbnail) {
      return false;
    }
    return (mThumbnailCompression == 6) || (mThumbnailCompression == 7);
  }
  
  public void resetOrientation()
  {
    setAttribute("Orientation", Integer.toString(1));
  }
  
  public void rotate(int paramInt)
  {
    if (paramInt % 90 == 0)
    {
      int m = getAttributeInt("Orientation", 1);
      boolean bool = ROTATION_ORDER.contains(Integer.valueOf(m));
      int j = 0;
      int k = 0;
      int i = 0;
      if (bool)
      {
        j = (ROTATION_ORDER.indexOf(Integer.valueOf(m)) + paramInt / 90) % 4;
        paramInt = i;
        if (j < 0) {
          paramInt = 4;
        }
        i = ((Integer)ROTATION_ORDER.get(j + paramInt)).intValue();
      }
      else
      {
        i = k;
        if (FLIPPED_ROTATION_ORDER.contains(Integer.valueOf(m)))
        {
          i = (FLIPPED_ROTATION_ORDER.indexOf(Integer.valueOf(m)) + paramInt / 90) % 4;
          paramInt = j;
          if (i < 0) {
            paramInt = 4;
          }
          i = ((Integer)FLIPPED_ROTATION_ORDER.get(i + paramInt)).intValue();
        }
      }
      setAttribute("Orientation", Integer.toString(i));
      return;
    }
    throw new IllegalArgumentException("degree should be a multiple of 90");
  }
  
  /* Error */
  public void saveAttributes()
    throws IOException
  {
    // Byte code:
    //   0: aload_0
    //   1: getfield 1777	androidx/exifinterface/media/ExifInterface:mIsSupportedFile	Z
    //   4: ifeq +615 -> 619
    //   7: aload_0
    //   8: getfield 1628	androidx/exifinterface/media/ExifInterface:mMimeType	I
    //   11: iconst_4
    //   12: if_icmpne +607 -> 619
    //   15: aload_0
    //   16: getfield 1243	androidx/exifinterface/media/ExifInterface:mSeekableFileDescriptor	Ljava/io/FileDescriptor;
    //   19: ifnonnull +24 -> 43
    //   22: aload_0
    //   23: getfield 1232	androidx/exifinterface/media/ExifInterface:mFilename	Ljava/lang/String;
    //   26: ifnull +6 -> 32
    //   29: goto +14 -> 43
    //   32: new 1193	java/io/IOException
    //   35: dup
    //   36: ldc_w 2204
    //   39: invokespecial 1450	java/io/IOException:<init>	(Ljava/lang/String;)V
    //   42: athrow
    //   43: aload_0
    //   44: iconst_1
    //   45: putfield 2108	androidx/exifinterface/media/ExifInterface:mModified	Z
    //   48: aload_0
    //   49: aload_0
    //   50: invokevirtual 2206	androidx/exifinterface/media/ExifInterface:getThumbnail	()[B
    //   53: putfield 1703	androidx/exifinterface/media/ExifInterface:mThumbnailBytes	[B
    //   56: aload_0
    //   57: getfield 1232	androidx/exifinterface/media/ExifInterface:mFilename	Ljava/lang/String;
    //   60: astore_1
    //   61: aconst_null
    //   62: astore 8
    //   64: aconst_null
    //   65: astore_3
    //   66: aconst_null
    //   67: astore_2
    //   68: aconst_null
    //   69: astore 7
    //   71: aload_1
    //   72: ifnull +19 -> 91
    //   75: new 1211	java/io/File
    //   78: dup
    //   79: aload_0
    //   80: getfield 1232	androidx/exifinterface/media/ExifInterface:mFilename	Ljava/lang/String;
    //   83: invokespecial 2207	java/io/File:<init>	(Ljava/lang/String;)V
    //   86: astore 4
    //   88: goto +6 -> 94
    //   91: aconst_null
    //   92: astore 4
    //   94: aload_0
    //   95: getfield 1232	androidx/exifinterface/media/ExifInterface:mFilename	Ljava/lang/String;
    //   98: ifnull +93 -> 191
    //   101: new 1327	java/lang/StringBuilder
    //   104: dup
    //   105: invokespecial 1328	java/lang/StringBuilder:<init>	()V
    //   108: astore_1
    //   109: aload_1
    //   110: aload_0
    //   111: getfield 1232	androidx/exifinterface/media/ExifInterface:mFilename	Ljava/lang/String;
    //   114: invokevirtual 1337	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   117: pop
    //   118: aload_1
    //   119: ldc_w 2209
    //   122: invokevirtual 1337	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   125: pop
    //   126: new 1211	java/io/File
    //   129: dup
    //   130: aload_1
    //   131: invokevirtual 1342	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   134: invokespecial 2207	java/io/File:<init>	(Ljava/lang/String;)V
    //   137: astore_1
    //   138: aload 4
    //   140: aload_1
    //   141: invokevirtual 2213	java/io/File:renameTo	(Ljava/io/File;)Z
    //   144: ifeq +6 -> 150
    //   147: goto +145 -> 292
    //   150: new 1327	java/lang/StringBuilder
    //   153: dup
    //   154: invokespecial 1328	java/lang/StringBuilder:<init>	()V
    //   157: astore 4
    //   159: aload 4
    //   161: ldc_w 2215
    //   164: invokevirtual 1337	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   167: pop
    //   168: aload 4
    //   170: aload_1
    //   171: invokevirtual 1215	java/io/File:getAbsolutePath	()Ljava/lang/String;
    //   174: invokevirtual 1337	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   177: pop
    //   178: new 1193	java/io/IOException
    //   181: dup
    //   182: aload 4
    //   184: invokevirtual 1342	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   187: invokespecial 1450	java/io/IOException:<init>	(Ljava/lang/String;)V
    //   190: athrow
    //   191: getstatic 1237	android/os/Build$VERSION:SDK_INT	I
    //   194: bipush 21
    //   196: if_icmplt +94 -> 290
    //   199: aload_0
    //   200: getfield 1243	androidx/exifinterface/media/ExifInterface:mSeekableFileDescriptor	Ljava/io/FileDescriptor;
    //   203: ifnull +87 -> 290
    //   206: ldc_w 2217
    //   209: ldc_w 2219
    //   212: invokestatic 2223	java/io/File:createTempFile	(Ljava/lang/String;Ljava/lang/String;)Ljava/io/File;
    //   215: astore 5
    //   217: aload_0
    //   218: getfield 1243	androidx/exifinterface/media/ExifInterface:mSeekableFileDescriptor	Ljava/io/FileDescriptor;
    //   221: lconst_0
    //   222: getstatic 2168	android/system/OsConstants:SEEK_SET	I
    //   225: invokestatic 1749	android/system/Os:lseek	(Ljava/io/FileDescriptor;JI)J
    //   228: pop2
    //   229: new 1256	java/io/FileInputStream
    //   232: dup
    //   233: aload_0
    //   234: getfield 1243	androidx/exifinterface/media/ExifInterface:mSeekableFileDescriptor	Ljava/io/FileDescriptor;
    //   237: invokespecial 1258	java/io/FileInputStream:<init>	(Ljava/io/FileDescriptor;)V
    //   240: astore_1
    //   241: new 2225	java/io/FileOutputStream
    //   244: dup
    //   245: aload 5
    //   247: invokespecial 2227	java/io/FileOutputStream:<init>	(Ljava/io/File;)V
    //   250: astore_2
    //   251: aload_1
    //   252: aload_2
    //   253: invokestatic 1983	androidx/exifinterface/media/ExifInterface:copy	(Ljava/io/InputStream;Ljava/io/OutputStream;)I
    //   256: pop
    //   257: aload_1
    //   258: astore_3
    //   259: goto +40 -> 299
    //   262: astore_3
    //   263: goto +10 -> 273
    //   266: astore_3
    //   267: goto +20 -> 287
    //   270: astore_3
    //   271: aconst_null
    //   272: astore_2
    //   273: aload_1
    //   274: astore 4
    //   276: aload_3
    //   277: astore_1
    //   278: aload 4
    //   280: astore_3
    //   281: goto +328 -> 609
    //   284: astore_3
    //   285: aconst_null
    //   286: astore_2
    //   287: goto +303 -> 590
    //   290: aconst_null
    //   291: astore_1
    //   292: aconst_null
    //   293: astore_3
    //   294: aconst_null
    //   295: astore_2
    //   296: aload_1
    //   297: astore 5
    //   299: aload_3
    //   300: invokestatic 1266	androidx/exifinterface/media/ExifInterface:closeQuietly	(Ljava/io/Closeable;)V
    //   303: aload_2
    //   304: invokestatic 1266	androidx/exifinterface/media/ExifInterface:closeQuietly	(Ljava/io/Closeable;)V
    //   307: new 1256	java/io/FileInputStream
    //   310: dup
    //   311: aload 5
    //   313: invokespecial 2228	java/io/FileInputStream:<init>	(Ljava/io/File;)V
    //   316: astore_2
    //   317: aload_0
    //   318: getfield 1232	androidx/exifinterface/media/ExifInterface:mFilename	Ljava/lang/String;
    //   321: ifnull +18 -> 339
    //   324: new 2225	java/io/FileOutputStream
    //   327: dup
    //   328: aload_0
    //   329: getfield 1232	androidx/exifinterface/media/ExifInterface:mFilename	Ljava/lang/String;
    //   332: invokespecial 2229	java/io/FileOutputStream:<init>	(Ljava/lang/String;)V
    //   335: astore_1
    //   336: goto +45 -> 381
    //   339: getstatic 1237	android/os/Build$VERSION:SDK_INT	I
    //   342: bipush 21
    //   344: if_icmplt +286 -> 630
    //   347: aload_0
    //   348: getfield 1243	androidx/exifinterface/media/ExifInterface:mSeekableFileDescriptor	Ljava/io/FileDescriptor;
    //   351: ifnull +279 -> 630
    //   354: aload_0
    //   355: getfield 1243	androidx/exifinterface/media/ExifInterface:mSeekableFileDescriptor	Ljava/io/FileDescriptor;
    //   358: lconst_0
    //   359: getstatic 2168	android/system/OsConstants:SEEK_SET	I
    //   362: invokestatic 1749	android/system/Os:lseek	(Ljava/io/FileDescriptor;JI)J
    //   365: pop2
    //   366: new 2225	java/io/FileOutputStream
    //   369: dup
    //   370: aload_0
    //   371: getfield 1243	androidx/exifinterface/media/ExifInterface:mSeekableFileDescriptor	Ljava/io/FileDescriptor;
    //   374: invokespecial 2230	java/io/FileOutputStream:<init>	(Ljava/io/FileDescriptor;)V
    //   377: astore_1
    //   378: goto +3 -> 381
    //   381: new 1537	java/io/BufferedInputStream
    //   384: dup
    //   385: aload_2
    //   386: invokespecial 2231	java/io/BufferedInputStream:<init>	(Ljava/io/InputStream;)V
    //   389: astore 6
    //   391: new 2233	java/io/BufferedOutputStream
    //   394: dup
    //   395: aload_1
    //   396: invokespecial 2236	java/io/BufferedOutputStream:<init>	(Ljava/io/OutputStream;)V
    //   399: astore_1
    //   400: aload_0
    //   401: aload 6
    //   403: aload_1
    //   404: invokespecial 2238	androidx/exifinterface/media/ExifInterface:saveJpegAttributes	(Ljava/io/InputStream;Ljava/io/OutputStream;)V
    //   407: aload 6
    //   409: invokestatic 1266	androidx/exifinterface/media/ExifInterface:closeQuietly	(Ljava/io/Closeable;)V
    //   412: aload_1
    //   413: invokestatic 1266	androidx/exifinterface/media/ExifInterface:closeQuietly	(Ljava/io/Closeable;)V
    //   416: aload 5
    //   418: invokevirtual 2241	java/io/File:delete	()Z
    //   421: pop
    //   422: aload_0
    //   423: aconst_null
    //   424: putfield 1703	androidx/exifinterface/media/ExifInterface:mThumbnailBytes	[B
    //   427: return
    //   428: astore_2
    //   429: goto +12 -> 441
    //   432: astore_3
    //   433: aload_1
    //   434: astore_2
    //   435: goto +18 -> 453
    //   438: astore_2
    //   439: aconst_null
    //   440: astore_1
    //   441: aload 6
    //   443: astore_3
    //   444: aload_1
    //   445: astore 4
    //   447: goto +105 -> 552
    //   450: astore_3
    //   451: aconst_null
    //   452: astore_2
    //   453: aload 6
    //   455: astore_1
    //   456: goto +19 -> 475
    //   459: astore_2
    //   460: aconst_null
    //   461: astore 4
    //   463: aload 8
    //   465: astore_3
    //   466: goto +86 -> 552
    //   469: astore_3
    //   470: aconst_null
    //   471: astore_2
    //   472: aload 7
    //   474: astore_1
    //   475: aload_0
    //   476: getfield 1232	androidx/exifinterface/media/ExifInterface:mFilename	Ljava/lang/String;
    //   479: ifnull +51 -> 530
    //   482: aload 5
    //   484: aload 4
    //   486: invokevirtual 2213	java/io/File:renameTo	(Ljava/io/File;)Z
    //   489: ifne +41 -> 530
    //   492: new 1327	java/lang/StringBuilder
    //   495: dup
    //   496: invokespecial 1328	java/lang/StringBuilder:<init>	()V
    //   499: astore_3
    //   500: aload_3
    //   501: ldc_w 2243
    //   504: invokevirtual 1337	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   507: pop
    //   508: aload_3
    //   509: aload 4
    //   511: invokevirtual 1215	java/io/File:getAbsolutePath	()Ljava/lang/String;
    //   514: invokevirtual 1337	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   517: pop
    //   518: new 1193	java/io/IOException
    //   521: dup
    //   522: aload_3
    //   523: invokevirtual 1342	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   526: invokespecial 1450	java/io/IOException:<init>	(Ljava/lang/String;)V
    //   529: athrow
    //   530: new 1193	java/io/IOException
    //   533: dup
    //   534: ldc_w 2245
    //   537: aload_3
    //   538: invokespecial 1254	java/io/IOException:<init>	(Ljava/lang/String;Ljava/lang/Throwable;)V
    //   541: athrow
    //   542: astore 6
    //   544: aload_2
    //   545: astore 4
    //   547: aload_1
    //   548: astore_3
    //   549: aload 6
    //   551: astore_2
    //   552: aload_3
    //   553: invokestatic 1266	androidx/exifinterface/media/ExifInterface:closeQuietly	(Ljava/io/Closeable;)V
    //   556: aload 4
    //   558: invokestatic 1266	androidx/exifinterface/media/ExifInterface:closeQuietly	(Ljava/io/Closeable;)V
    //   561: aload 5
    //   563: invokevirtual 2241	java/io/File:delete	()Z
    //   566: pop
    //   567: aload_2
    //   568: athrow
    //   569: astore_1
    //   570: aconst_null
    //   571: astore 4
    //   573: aload_2
    //   574: astore_3
    //   575: aload 4
    //   577: astore_2
    //   578: goto +31 -> 609
    //   581: astore 4
    //   583: aconst_null
    //   584: astore_2
    //   585: aload_3
    //   586: astore_1
    //   587: aload 4
    //   589: astore_3
    //   590: new 1193	java/io/IOException
    //   593: dup
    //   594: ldc_w 2247
    //   597: aload_3
    //   598: invokespecial 1254	java/io/IOException:<init>	(Ljava/lang/String;Ljava/lang/Throwable;)V
    //   601: athrow
    //   602: astore 4
    //   604: aload_1
    //   605: astore_3
    //   606: aload 4
    //   608: astore_1
    //   609: aload_3
    //   610: invokestatic 1266	androidx/exifinterface/media/ExifInterface:closeQuietly	(Ljava/io/Closeable;)V
    //   613: aload_2
    //   614: invokestatic 1266	androidx/exifinterface/media/ExifInterface:closeQuietly	(Ljava/io/Closeable;)V
    //   617: aload_1
    //   618: athrow
    //   619: new 1193	java/io/IOException
    //   622: dup
    //   623: ldc_w 2249
    //   626: invokespecial 1450	java/io/IOException:<init>	(Ljava/lang/String;)V
    //   629: athrow
    //   630: aconst_null
    //   631: astore_1
    //   632: goto -251 -> 381
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	635	0	this	ExifInterface
    //   60	488	1	localObject1	Object
    //   569	1	1	localObject2	Object
    //   586	46	1	localObject3	Object
    //   67	319	2	localObject4	Object
    //   428	1	2	localObject5	Object
    //   434	1	2	localObject6	Object
    //   438	1	2	localObject7	Object
    //   452	1	2	localObject8	Object
    //   459	1	2	localObject9	Object
    //   471	143	2	localObject10	Object
    //   65	194	3	localObject11	Object
    //   262	1	3	localObject12	Object
    //   266	1	3	localException1	Exception
    //   270	7	3	localObject13	Object
    //   280	1	3	localObject14	Object
    //   284	1	3	localException2	Exception
    //   293	7	3	localCloseable	Closeable
    //   432	1	3	localException3	Exception
    //   443	1	3	localObject15	Object
    //   450	1	3	localException4	Exception
    //   465	1	3	localObject16	Object
    //   469	1	3	localException5	Exception
    //   499	111	3	localObject17	Object
    //   86	490	4	localObject18	Object
    //   581	7	4	localException6	Exception
    //   602	5	4	localObject19	Object
    //   215	347	5	localObject20	Object
    //   389	65	6	localBufferedInputStream	BufferedInputStream
    //   542	8	6	localObject21	Object
    //   69	404	7	localObject22	Object
    //   62	402	8	localObject23	Object
    // Exception table:
    //   from	to	target	type
    //   251	257	262	finally
    //   251	257	266	java/lang/Exception
    //   241	251	270	finally
    //   241	251	284	java/lang/Exception
    //   400	407	428	finally
    //   400	407	432	java/lang/Exception
    //   391	400	438	finally
    //   391	400	450	java/lang/Exception
    //   307	336	459	finally
    //   339	378	459	finally
    //   381	391	459	finally
    //   307	336	469	java/lang/Exception
    //   339	378	469	java/lang/Exception
    //   381	391	469	java/lang/Exception
    //   475	530	542	finally
    //   530	542	542	finally
    //   94	147	569	finally
    //   150	191	569	finally
    //   191	241	569	finally
    //   94	147	581	java/lang/Exception
    //   150	191	581	java/lang/Exception
    //   191	241	581	java/lang/Exception
    //   590	602	602	finally
  }
  
  public void setAltitude(double paramDouble)
  {
    String str;
    if (paramDouble >= 0.0D) {
      str = "0";
    } else {
      str = "1";
    }
    setAttribute("GPSAltitude", new Rational(Math.abs(paramDouble)).toString());
    setAttribute("GPSAltitudeRef", str);
  }
  
  public void setAttribute(@NonNull String paramString1, @Nullable String paramString2)
  {
    Object localObject1 = paramString2;
    String str;
    if (paramString1 != null)
    {
      str = paramString1;
      if ("ISOSpeedRatings".equals(paramString1))
      {
        if (DEBUG) {
          Log.d("ExifInterface", "setAttribute: Replacing TAG_ISO_SPEED_RATINGS with TAG_PHOTOGRAPHIC_SENSITIVITY.");
        }
        str = "PhotographicSensitivity";
      }
      paramString1 = (String)localObject1;
      if (localObject1 != null)
      {
        paramString1 = (String)localObject1;
        if (sTagSetForCompatibility.contains(str)) {
          if (str.equals("GPSTimeStamp"))
          {
            paramString1 = sGpsTimestampPattern.matcher((CharSequence)localObject1);
            if (!paramString1.find())
            {
              paramString1 = new StringBuilder();
              paramString1.append("Invalid value for ");
              paramString1.append(str);
              paramString1.append(" : ");
              paramString1.append((String)localObject1);
              Log.w("ExifInterface", paramString1.toString());
              return;
            }
            paramString2 = new StringBuilder();
            paramString2.append(Integer.parseInt(paramString1.group(1)));
            paramString2.append("/1,");
            paramString2.append(Integer.parseInt(paramString1.group(2)));
            paramString2.append("/1,");
            paramString2.append(Integer.parseInt(paramString1.group(3)));
            paramString2.append("/1");
            paramString1 = paramString2.toString();
          }
        }
      }
    }
    try
    {
      paramString1 = new Rational(Double.parseDouble(paramString2)).toString();
    }
    catch (NumberFormatException paramString1)
    {
      int j;
      for (;;) {}
    }
    paramString1 = new StringBuilder();
    paramString1.append("Invalid value for ");
    paramString1.append(str);
    paramString1.append(" : ");
    paramString1.append((String)localObject1);
    Log.w("ExifInterface", paramString1.toString());
    return;
    j = 0;
    while (j < EXIF_TAGS.length)
    {
      if ((j != 4) || (mHasThumbnail))
      {
        paramString2 = (ExifTag)sExifTagMapsForWriting[j].get(str);
        if (paramString2 != null) {
          if (paramString1 == null)
          {
            mAttributes[j].remove(str);
          }
          else
          {
            Object localObject2 = guessDataFormat(paramString1);
            int i;
            if ((primaryFormat != ((Integer)first).intValue()) && (primaryFormat != ((Integer)second).intValue()))
            {
              if ((secondaryFormat != -1) && ((secondaryFormat == ((Integer)first).intValue()) || (secondaryFormat == ((Integer)second).intValue())))
              {
                i = secondaryFormat;
              }
              else
              {
                if ((primaryFormat != 1) && (primaryFormat != 7) && (primaryFormat != 2))
                {
                  if (!DEBUG) {
                    break label1325;
                  }
                  localObject1 = new StringBuilder();
                  ((StringBuilder)localObject1).append("Given tag (");
                  ((StringBuilder)localObject1).append(str);
                  ((StringBuilder)localObject1).append(") value didn't match with one of expected formats: ");
                  ((StringBuilder)localObject1).append(IFD_FORMAT_NAMES[primaryFormat]);
                  if (secondaryFormat == -1)
                  {
                    paramString2 = "";
                  }
                  else
                  {
                    StringBuilder localStringBuilder = new StringBuilder();
                    localStringBuilder.append(", ");
                    localStringBuilder.append(IFD_FORMAT_NAMES[secondaryFormat]);
                    paramString2 = localStringBuilder.toString();
                  }
                  ((StringBuilder)localObject1).append(paramString2);
                  ((StringBuilder)localObject1).append(" (guess: ");
                  ((StringBuilder)localObject1).append(IFD_FORMAT_NAMES[((Integer)first).intValue()]);
                  if (((Integer)second).intValue() == -1)
                  {
                    paramString2 = "";
                  }
                  else
                  {
                    paramString2 = new StringBuilder();
                    paramString2.append(", ");
                    paramString2.append(IFD_FORMAT_NAMES[((Integer)second).intValue()]);
                    paramString2 = paramString2.toString();
                  }
                  ((StringBuilder)localObject1).append(paramString2);
                  ((StringBuilder)localObject1).append(")");
                  Log.d("ExifInterface", ((StringBuilder)localObject1).toString());
                  break label1325;
                }
                i = primaryFormat;
              }
            }
            else {
              i = primaryFormat;
            }
            switch (i)
            {
            case 6: 
            case 8: 
            case 11: 
            default: 
              if (DEBUG)
              {
                paramString2 = new StringBuilder();
                paramString2.append("Data format isn't one of expected formats: ");
                paramString2.append(i);
                Log.d("ExifInterface", paramString2.toString());
              }
              break;
            case 12: 
              paramString2 = paramString1.split(",", -1);
              localObject1 = new double[paramString2.length];
              i = 0;
              while (i < paramString2.length)
              {
                localObject1[i] = Double.parseDouble(paramString2[i]);
                i += 1;
              }
              mAttributes[j].put(str, ExifAttribute.createDouble((double[])localObject1, mExifByteOrder));
              break;
            case 10: 
              paramString2 = paramString1.split(",", -1);
              localObject1 = new Rational[paramString2.length];
              i = 0;
              while (i < paramString2.length)
              {
                localObject2 = paramString2[i].split("/", -1);
                localObject1[i] = new Rational(Double.parseDouble(localObject2[0]), Double.parseDouble(localObject2[1]));
                i += 1;
              }
              mAttributes[j].put(str, ExifAttribute.createSRational((Rational[])localObject1, mExifByteOrder));
              break;
            case 9: 
              paramString2 = paramString1.split(",", -1);
              localObject1 = new int[paramString2.length];
              i = 0;
              while (i < paramString2.length)
              {
                localObject1[i] = Integer.parseInt(paramString2[i]);
                i += 1;
              }
              mAttributes[j].put(str, ExifAttribute.createSLong((int[])localObject1, mExifByteOrder));
              break;
            case 5: 
              paramString2 = paramString1.split(",", -1);
              localObject1 = new Rational[paramString2.length];
              i = 0;
              while (i < paramString2.length)
              {
                localObject2 = paramString2[i].split("/", -1);
                localObject1[i] = new Rational(Double.parseDouble(localObject2[0]), Double.parseDouble(localObject2[1]));
                i += 1;
              }
              mAttributes[j].put(str, ExifAttribute.createURational((Rational[])localObject1, mExifByteOrder));
              break;
            case 4: 
              paramString2 = paramString1.split(",", -1);
              localObject1 = new long[paramString2.length];
              i = 0;
              while (i < paramString2.length)
              {
                localObject1[i] = Long.parseLong(paramString2[i]);
                i += 1;
              }
              mAttributes[j].put(str, ExifAttribute.createULong((long[])localObject1, mExifByteOrder));
              break;
            case 3: 
              paramString2 = paramString1.split(",", -1);
              localObject1 = new int[paramString2.length];
              i = 0;
              while (i < paramString2.length)
              {
                localObject1[i] = Integer.parseInt(paramString2[i]);
                i += 1;
              }
              mAttributes[j].put(str, ExifAttribute.createUShort((int[])localObject1, mExifByteOrder));
              break;
            case 2: 
            case 7: 
              mAttributes[j].put(str, ExifAttribute.createString(paramString1));
              break;
            case 1: 
              mAttributes[j].put(str, ExifAttribute.createByte(paramString1));
            }
          }
        }
      }
      label1325:
      j += 1;
    }
    return;
    throw new NullPointerException("tag shouldn't be null");
  }
  
  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY})
  public void setDateTime(long paramLong)
  {
    setAttribute("DateTime", sFormatter.format(new Date(paramLong)));
    setAttribute("SubSecTime", Long.toString(paramLong % 1000L));
  }
  
  public void setGpsInfo(Location paramLocation)
  {
    if (paramLocation == null) {
      return;
    }
    setAttribute("GPSProcessingMethod", paramLocation.getProvider());
    setLatLong(paramLocation.getLatitude(), paramLocation.getLongitude());
    setAltitude(paramLocation.getAltitude());
    setAttribute("GPSSpeedRef", "K");
    setAttribute("GPSSpeed", new Rational(paramLocation.getSpeed() * (float)TimeUnit.HOURS.toSeconds(1L) / 1000.0F).toString());
    paramLocation = sFormatter.format(new Date(paramLocation.getTime())).split("\\s+", -1);
    setAttribute("GPSDateStamp", paramLocation[0]);
    setAttribute("GPSTimeStamp", paramLocation[1]);
  }
  
  public void setLatLong(double paramDouble1, double paramDouble2)
  {
    if ((paramDouble1 >= -90.0D) && (paramDouble1 <= 90.0D) && (!Double.isNaN(paramDouble1)))
    {
      if ((paramDouble2 >= -180.0D) && (paramDouble2 <= 180.0D) && (!Double.isNaN(paramDouble2)))
      {
        if (paramDouble1 >= 0.0D) {
          localObject = "N";
        } else {
          localObject = "S";
        }
        setAttribute("GPSLatitudeRef", (String)localObject);
        setAttribute("GPSLatitude", convertDecimalDegree(Math.abs(paramDouble1)));
        if (paramDouble2 >= 0.0D) {
          localObject = "E";
        } else {
          localObject = "W";
        }
        setAttribute("GPSLongitudeRef", (String)localObject);
        setAttribute("GPSLongitude", convertDecimalDegree(Math.abs(paramDouble2)));
        return;
      }
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("Longitude value ");
      ((StringBuilder)localObject).append(paramDouble2);
      ((StringBuilder)localObject).append(" is not valid.");
      throw new IllegalArgumentException(((StringBuilder)localObject).toString());
    }
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("Latitude value ");
    ((StringBuilder)localObject).append(paramDouble1);
    ((StringBuilder)localObject).append(" is not valid.");
    throw new IllegalArgumentException(((StringBuilder)localObject).toString());
  }
  
  private static class ByteOrderedDataInputStream
    extends InputStream
    implements DataInput
  {
    private static final ByteOrder BIG_ENDIAN = ByteOrder.BIG_ENDIAN;
    private static final ByteOrder LITTLE_ENDIAN = ByteOrder.LITTLE_ENDIAN;
    private ByteOrder mByteOrder = ByteOrder.BIG_ENDIAN;
    private DataInputStream mDataInputStream;
    final int mLength;
    int mPosition;
    
    public ByteOrderedDataInputStream(InputStream paramInputStream)
      throws IOException
    {
      mDataInputStream = new DataInputStream(paramInputStream);
      mLength = mDataInputStream.available();
      mPosition = 0;
      mDataInputStream.mark(mLength);
    }
    
    public ByteOrderedDataInputStream(byte[] paramArrayOfByte)
      throws IOException
    {
      this(new ByteArrayInputStream(paramArrayOfByte));
    }
    
    public int available()
      throws IOException
    {
      return mDataInputStream.available();
    }
    
    public int getLength()
    {
      return mLength;
    }
    
    public int peek()
    {
      return mPosition;
    }
    
    public int read()
      throws IOException
    {
      mPosition += 1;
      return mDataInputStream.read();
    }
    
    public int read(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
      throws IOException
    {
      paramInt1 = mDataInputStream.read(paramArrayOfByte, paramInt1, paramInt2);
      mPosition += paramInt1;
      return paramInt1;
    }
    
    public boolean readBoolean()
      throws IOException
    {
      mPosition += 1;
      return mDataInputStream.readBoolean();
    }
    
    public byte readByte()
      throws IOException
    {
      mPosition += 1;
      if (mPosition <= mLength)
      {
        int i = mDataInputStream.read();
        if (i >= 0) {
          return (byte)i;
        }
        throw new EOFException();
      }
      throw new EOFException();
    }
    
    public char readChar()
      throws IOException
    {
      mPosition += 2;
      return mDataInputStream.readChar();
    }
    
    public double readDouble()
      throws IOException
    {
      return Double.longBitsToDouble(readLong());
    }
    
    public float readFloat()
      throws IOException
    {
      return Float.intBitsToFloat(readInt());
    }
    
    public void readFully(byte[] paramArrayOfByte)
      throws IOException
    {
      mPosition += paramArrayOfByte.length;
      if (mPosition <= mLength)
      {
        if (mDataInputStream.read(paramArrayOfByte, 0, paramArrayOfByte.length) == paramArrayOfByte.length) {
          return;
        }
        throw new IOException("Couldn't read up to the length of buffer");
      }
      throw new EOFException();
    }
    
    public void readFully(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
      throws IOException
    {
      mPosition += paramInt2;
      if (mPosition <= mLength)
      {
        if (mDataInputStream.read(paramArrayOfByte, paramInt1, paramInt2) == paramInt2) {
          return;
        }
        throw new IOException("Couldn't read up to the length of buffer");
      }
      throw new EOFException();
    }
    
    public int readInt()
      throws IOException
    {
      mPosition += 4;
      if (mPosition <= mLength)
      {
        int i = mDataInputStream.read();
        int j = mDataInputStream.read();
        int k = mDataInputStream.read();
        int m = mDataInputStream.read();
        if ((i | j | k | m) >= 0)
        {
          if (mByteOrder == LITTLE_ENDIAN) {
            return (m << 24) + (k << 16) + (j << 8) + i;
          }
          if (mByteOrder == BIG_ENDIAN) {
            return (i << 24) + (j << 16) + (k << 8) + m;
          }
          StringBuilder localStringBuilder = new StringBuilder();
          localStringBuilder.append("Invalid byte order: ");
          localStringBuilder.append(mByteOrder);
          throw new IOException(localStringBuilder.toString());
        }
        throw new EOFException();
      }
      throw new EOFException();
    }
    
    public String readLine()
      throws IOException
    {
      Log.d("ExifInterface", "Currently unsupported");
      return null;
    }
    
    public long readLong()
      throws IOException
    {
      mPosition += 8;
      if (mPosition <= mLength)
      {
        int i = mDataInputStream.read();
        int j = mDataInputStream.read();
        int k = mDataInputStream.read();
        int m = mDataInputStream.read();
        int n = mDataInputStream.read();
        int i1 = mDataInputStream.read();
        int i2 = mDataInputStream.read();
        int i3 = mDataInputStream.read();
        if ((i | j | k | m | n | i1 | i2 | i3) >= 0)
        {
          if (mByteOrder == LITTLE_ENDIAN) {
            return (i3 << 56) + (i2 << 48) + (i1 << 40) + (n << 32) + (m << 24) + (k << 16) + (j << 8) + i;
          }
          if (mByteOrder == BIG_ENDIAN) {
            return (i << 56) + (j << 48) + (k << 40) + (m << 32) + (n << 24) + (i1 << 16) + (i2 << 8) + i3;
          }
          StringBuilder localStringBuilder = new StringBuilder();
          localStringBuilder.append("Invalid byte order: ");
          localStringBuilder.append(mByteOrder);
          throw new IOException(localStringBuilder.toString());
        }
        throw new EOFException();
      }
      throw new EOFException();
    }
    
    public short readShort()
      throws IOException
    {
      mPosition += 2;
      if (mPosition <= mLength)
      {
        int i = mDataInputStream.read();
        int j = mDataInputStream.read();
        if ((i | j) >= 0)
        {
          if (mByteOrder == LITTLE_ENDIAN) {
            return (short)((j << 8) + i);
          }
          if (mByteOrder == BIG_ENDIAN) {
            return (short)((i << 8) + j);
          }
          StringBuilder localStringBuilder = new StringBuilder();
          localStringBuilder.append("Invalid byte order: ");
          localStringBuilder.append(mByteOrder);
          throw new IOException(localStringBuilder.toString());
        }
        throw new EOFException();
      }
      throw new EOFException();
    }
    
    public String readUTF()
      throws IOException
    {
      mPosition += 2;
      return mDataInputStream.readUTF();
    }
    
    public int readUnsignedByte()
      throws IOException
    {
      mPosition += 1;
      return mDataInputStream.readUnsignedByte();
    }
    
    public long readUnsignedInt()
      throws IOException
    {
      return readInt() & 0xFFFFFFFF;
    }
    
    public int readUnsignedShort()
      throws IOException
    {
      mPosition += 2;
      if (mPosition <= mLength)
      {
        int i = mDataInputStream.read();
        int j = mDataInputStream.read();
        if ((i | j) >= 0)
        {
          if (mByteOrder == LITTLE_ENDIAN) {
            return (j << 8) + i;
          }
          if (mByteOrder == BIG_ENDIAN) {
            return (i << 8) + j;
          }
          StringBuilder localStringBuilder = new StringBuilder();
          localStringBuilder.append("Invalid byte order: ");
          localStringBuilder.append(mByteOrder);
          throw new IOException(localStringBuilder.toString());
        }
        throw new EOFException();
      }
      throw new EOFException();
    }
    
    public void seek(long paramLong)
      throws IOException
    {
      if (mPosition > paramLong)
      {
        mPosition = 0;
        mDataInputStream.reset();
        mDataInputStream.mark(mLength);
      }
      else
      {
        paramLong -= mPosition;
      }
      int i = (int)paramLong;
      if (skipBytes(i) == i) {
        return;
      }
      throw new IOException("Couldn't seek up to the byteCount");
    }
    
    public void setByteOrder(ByteOrder paramByteOrder)
    {
      mByteOrder = paramByteOrder;
    }
    
    public int skipBytes(int paramInt)
      throws IOException
    {
      int i = Math.min(paramInt, mLength - mPosition);
      paramInt = 0;
      while (paramInt < i) {
        paramInt += mDataInputStream.skipBytes(i - paramInt);
      }
      mPosition += paramInt;
      return paramInt;
    }
  }
  
  private static class ByteOrderedDataOutputStream
    extends FilterOutputStream
  {
    private ByteOrder mByteOrder;
    private final OutputStream mOutputStream;
    
    public ByteOrderedDataOutputStream(OutputStream paramOutputStream, ByteOrder paramByteOrder)
    {
      super();
      mOutputStream = paramOutputStream;
      mByteOrder = paramByteOrder;
    }
    
    public void setByteOrder(ByteOrder paramByteOrder)
    {
      mByteOrder = paramByteOrder;
    }
    
    public void write(byte[] paramArrayOfByte)
      throws IOException
    {
      mOutputStream.write(paramArrayOfByte);
    }
    
    public void write(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
      throws IOException
    {
      mOutputStream.write(paramArrayOfByte, paramInt1, paramInt2);
    }
    
    public void writeByte(int paramInt)
      throws IOException
    {
      mOutputStream.write(paramInt);
    }
    
    public void writeInt(int paramInt)
      throws IOException
    {
      if (mByteOrder == ByteOrder.LITTLE_ENDIAN)
      {
        mOutputStream.write(paramInt >>> 0 & 0xFF);
        mOutputStream.write(paramInt >>> 8 & 0xFF);
        mOutputStream.write(paramInt >>> 16 & 0xFF);
        mOutputStream.write(paramInt >>> 24 & 0xFF);
        return;
      }
      if (mByteOrder == ByteOrder.BIG_ENDIAN)
      {
        mOutputStream.write(paramInt >>> 24 & 0xFF);
        mOutputStream.write(paramInt >>> 16 & 0xFF);
        mOutputStream.write(paramInt >>> 8 & 0xFF);
        mOutputStream.write(paramInt >>> 0 & 0xFF);
      }
    }
    
    public void writeShort(short paramShort)
      throws IOException
    {
      if (mByteOrder == ByteOrder.LITTLE_ENDIAN)
      {
        mOutputStream.write(paramShort >>> 0 & 0xFF);
        mOutputStream.write(paramShort >>> 8 & 0xFF);
        return;
      }
      if (mByteOrder == ByteOrder.BIG_ENDIAN)
      {
        mOutputStream.write(paramShort >>> 8 & 0xFF);
        mOutputStream.write(paramShort >>> 0 & 0xFF);
      }
    }
    
    public void writeUnsignedInt(long paramLong)
      throws IOException
    {
      writeInt((int)paramLong);
    }
    
    public void writeUnsignedShort(int paramInt)
      throws IOException
    {
      writeShort((short)paramInt);
    }
  }
  
  private static class ExifAttribute
  {
    public static final long BYTES_OFFSET_UNKNOWN = -1L;
    public final byte[] bytes;
    public final long bytesOffset;
    public final int format;
    public final int numberOfComponents;
    
    ExifAttribute(int paramInt1, int paramInt2, long paramLong, byte[] paramArrayOfByte)
    {
      format = paramInt1;
      numberOfComponents = paramInt2;
      bytesOffset = paramLong;
      bytes = paramArrayOfByte;
    }
    
    ExifAttribute(int paramInt1, int paramInt2, byte[] paramArrayOfByte)
    {
      this(paramInt1, paramInt2, -1L, paramArrayOfByte);
    }
    
    public static ExifAttribute createByte(String paramString)
    {
      if ((paramString.length() == 1) && (paramString.charAt(0) >= '0') && (paramString.charAt(0) <= '1'))
      {
        byte[] arrayOfByte = new byte[1];
        arrayOfByte[0] = ((byte)(paramString.charAt(0) - '0'));
        return new ExifAttribute(1, arrayOfByte.length, arrayOfByte);
      }
      paramString = paramString.getBytes(ExifInterface.ASCII);
      return new ExifAttribute(1, paramString.length, paramString);
    }
    
    public static ExifAttribute createDouble(double paramDouble, ByteOrder paramByteOrder)
    {
      return createDouble(new double[] { paramDouble }, paramByteOrder);
    }
    
    public static ExifAttribute createDouble(double[] paramArrayOfDouble, ByteOrder paramByteOrder)
    {
      ByteBuffer localByteBuffer = ByteBuffer.wrap(new byte[ExifInterface.IFD_FORMAT_BYTES_PER_FORMAT[12] * paramArrayOfDouble.length]);
      localByteBuffer.order(paramByteOrder);
      int j = paramArrayOfDouble.length;
      int i = 0;
      while (i < j)
      {
        localByteBuffer.putDouble(paramArrayOfDouble[i]);
        i += 1;
      }
      return new ExifAttribute(12, paramArrayOfDouble.length, localByteBuffer.array());
    }
    
    public static ExifAttribute createSLong(int paramInt, ByteOrder paramByteOrder)
    {
      return createSLong(new int[] { paramInt }, paramByteOrder);
    }
    
    public static ExifAttribute createSLong(int[] paramArrayOfInt, ByteOrder paramByteOrder)
    {
      ByteBuffer localByteBuffer = ByteBuffer.wrap(new byte[ExifInterface.IFD_FORMAT_BYTES_PER_FORMAT[9] * paramArrayOfInt.length]);
      localByteBuffer.order(paramByteOrder);
      int j = paramArrayOfInt.length;
      int i = 0;
      while (i < j)
      {
        localByteBuffer.putInt(paramArrayOfInt[i]);
        i += 1;
      }
      return new ExifAttribute(9, paramArrayOfInt.length, localByteBuffer.array());
    }
    
    public static ExifAttribute createSRational(ExifInterface.Rational paramRational, ByteOrder paramByteOrder)
    {
      return createSRational(new ExifInterface.Rational[] { paramRational }, paramByteOrder);
    }
    
    public static ExifAttribute createSRational(ExifInterface.Rational[] paramArrayOfRational, ByteOrder paramByteOrder)
    {
      ByteBuffer localByteBuffer = ByteBuffer.wrap(new byte[ExifInterface.IFD_FORMAT_BYTES_PER_FORMAT[10] * paramArrayOfRational.length]);
      localByteBuffer.order(paramByteOrder);
      int j = paramArrayOfRational.length;
      int i = 0;
      while (i < j)
      {
        paramByteOrder = paramArrayOfRational[i];
        localByteBuffer.putInt((int)numerator);
        localByteBuffer.putInt((int)denominator);
        i += 1;
      }
      return new ExifAttribute(10, paramArrayOfRational.length, localByteBuffer.array());
    }
    
    public static ExifAttribute createString(String paramString)
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(paramString);
      localStringBuilder.append('\000');
      paramString = localStringBuilder.toString().getBytes(ExifInterface.ASCII);
      return new ExifAttribute(2, paramString.length, paramString);
    }
    
    public static ExifAttribute createULong(long paramLong, ByteOrder paramByteOrder)
    {
      return createULong(new long[] { paramLong }, paramByteOrder);
    }
    
    public static ExifAttribute createULong(long[] paramArrayOfLong, ByteOrder paramByteOrder)
    {
      ByteBuffer localByteBuffer = ByteBuffer.wrap(new byte[ExifInterface.IFD_FORMAT_BYTES_PER_FORMAT[4] * paramArrayOfLong.length]);
      localByteBuffer.order(paramByteOrder);
      int j = paramArrayOfLong.length;
      int i = 0;
      while (i < j)
      {
        localByteBuffer.putInt((int)paramArrayOfLong[i]);
        i += 1;
      }
      return new ExifAttribute(4, paramArrayOfLong.length, localByteBuffer.array());
    }
    
    public static ExifAttribute createURational(ExifInterface.Rational paramRational, ByteOrder paramByteOrder)
    {
      return createURational(new ExifInterface.Rational[] { paramRational }, paramByteOrder);
    }
    
    public static ExifAttribute createURational(ExifInterface.Rational[] paramArrayOfRational, ByteOrder paramByteOrder)
    {
      ByteBuffer localByteBuffer = ByteBuffer.wrap(new byte[ExifInterface.IFD_FORMAT_BYTES_PER_FORMAT[5] * paramArrayOfRational.length]);
      localByteBuffer.order(paramByteOrder);
      int j = paramArrayOfRational.length;
      int i = 0;
      while (i < j)
      {
        paramByteOrder = paramArrayOfRational[i];
        localByteBuffer.putInt((int)numerator);
        localByteBuffer.putInt((int)denominator);
        i += 1;
      }
      return new ExifAttribute(5, paramArrayOfRational.length, localByteBuffer.array());
    }
    
    public static ExifAttribute createUShort(int paramInt, ByteOrder paramByteOrder)
    {
      return createUShort(new int[] { paramInt }, paramByteOrder);
    }
    
    public static ExifAttribute createUShort(int[] paramArrayOfInt, ByteOrder paramByteOrder)
    {
      ByteBuffer localByteBuffer = ByteBuffer.wrap(new byte[ExifInterface.IFD_FORMAT_BYTES_PER_FORMAT[3] * paramArrayOfInt.length]);
      localByteBuffer.order(paramByteOrder);
      int j = paramArrayOfInt.length;
      int i = 0;
      while (i < j)
      {
        localByteBuffer.putShort((short)paramArrayOfInt[i]);
        i += 1;
      }
      return new ExifAttribute(3, paramArrayOfInt.length, localByteBuffer.array());
    }
    
    public double getDoubleValue(ByteOrder paramByteOrder)
    {
      paramByteOrder = getValue(paramByteOrder);
      if (paramByteOrder != null)
      {
        if ((paramByteOrder instanceof String)) {
          return Double.parseDouble((String)paramByteOrder);
        }
        if ((paramByteOrder instanceof long[]))
        {
          paramByteOrder = (long[])paramByteOrder;
          if (paramByteOrder.length == 1) {
            return paramByteOrder[0];
          }
          throw new NumberFormatException("There are more than one component");
        }
        if ((paramByteOrder instanceof int[]))
        {
          paramByteOrder = (int[])paramByteOrder;
          if (paramByteOrder.length == 1) {
            return paramByteOrder[0];
          }
          throw new NumberFormatException("There are more than one component");
        }
        if ((paramByteOrder instanceof double[]))
        {
          paramByteOrder = (double[])paramByteOrder;
          if (paramByteOrder.length == 1) {
            return paramByteOrder[0];
          }
          throw new NumberFormatException("There are more than one component");
        }
        if ((paramByteOrder instanceof ExifInterface.Rational[]))
        {
          paramByteOrder = (ExifInterface.Rational[])paramByteOrder;
          if (paramByteOrder.length == 1) {
            return paramByteOrder[0].calculate();
          }
          throw new NumberFormatException("There are more than one component");
        }
        throw new NumberFormatException("Couldn't find a double value");
      }
      throw new NumberFormatException("NULL can't be converted to a double value");
    }
    
    public int getIntValue(ByteOrder paramByteOrder)
    {
      paramByteOrder = getValue(paramByteOrder);
      if (paramByteOrder != null)
      {
        if ((paramByteOrder instanceof String)) {
          return Integer.parseInt((String)paramByteOrder);
        }
        if ((paramByteOrder instanceof long[]))
        {
          paramByteOrder = (long[])paramByteOrder;
          if (paramByteOrder.length == 1) {
            return (int)paramByteOrder[0];
          }
          throw new NumberFormatException("There are more than one component");
        }
        if ((paramByteOrder instanceof int[]))
        {
          paramByteOrder = (int[])paramByteOrder;
          if (paramByteOrder.length == 1) {
            return paramByteOrder[0];
          }
          throw new NumberFormatException("There are more than one component");
        }
        throw new NumberFormatException("Couldn't find a integer value");
      }
      throw new NumberFormatException("NULL can't be converted to a integer value");
    }
    
    public String getStringValue(ByteOrder paramByteOrder)
    {
      Object localObject = getValue(paramByteOrder);
      if (localObject == null) {
        return null;
      }
      if ((localObject instanceof String)) {
        return (String)localObject;
      }
      paramByteOrder = new StringBuilder();
      boolean bool = localObject instanceof long[];
      int j = 0;
      int k = 0;
      int m = 0;
      int i = 0;
      if (bool)
      {
        localObject = (long[])localObject;
        while (i < localObject.length)
        {
          paramByteOrder.append(localObject[i]);
          j = i + 1;
          i = j;
          if (j != localObject.length)
          {
            paramByteOrder.append(",");
            i = j;
          }
        }
        return paramByteOrder.toString();
      }
      if ((localObject instanceof int[]))
      {
        localObject = (int[])localObject;
        i = j;
        while (i < localObject.length)
        {
          paramByteOrder.append(localObject[i]);
          j = i + 1;
          i = j;
          if (j != localObject.length)
          {
            paramByteOrder.append(",");
            i = j;
          }
        }
        return paramByteOrder.toString();
      }
      if ((localObject instanceof double[]))
      {
        localObject = (double[])localObject;
        i = k;
        while (i < localObject.length)
        {
          paramByteOrder.append(localObject[i]);
          j = i + 1;
          i = j;
          if (j != localObject.length)
          {
            paramByteOrder.append(",");
            i = j;
          }
        }
        return paramByteOrder.toString();
      }
      if ((localObject instanceof ExifInterface.Rational[]))
      {
        localObject = (ExifInterface.Rational[])localObject;
        i = m;
        while (i < localObject.length)
        {
          paramByteOrder.append(numerator);
          paramByteOrder.append('/');
          paramByteOrder.append(denominator);
          j = i + 1;
          i = j;
          if (j != localObject.length)
          {
            paramByteOrder.append(",");
            i = j;
          }
        }
        return paramByteOrder.toString();
      }
      return null;
    }
    
    /* Error */
    Object getValue(ByteOrder paramByteOrder)
    {
      // Byte code:
      //   0: new 198	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream
      //   3: dup
      //   4: aload_0
      //   5: getfield 30	androidx/exifinterface/media/ExifInterface$ExifAttribute:bytes	[B
      //   8: invokespecial 201	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:<init>	([B)V
      //   11: astore 14
      //   13: aload 14
      //   15: astore 13
      //   17: aload 14
      //   19: aload_1
      //   20: invokevirtual 205	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:setByteOrder	(Ljava/nio/ByteOrder;)V
      //   23: aload 14
      //   25: astore 13
      //   27: aload_0
      //   28: getfield 24	androidx/exifinterface/media/ExifInterface$ExifAttribute:format	I
      //   31: istore 12
      //   33: iconst_1
      //   34: istore 5
      //   36: iconst_0
      //   37: istore_3
      //   38: iconst_0
      //   39: istore 6
      //   41: iconst_0
      //   42: istore 7
      //   44: iconst_0
      //   45: istore 8
      //   47: iconst_0
      //   48: istore 9
      //   50: iconst_0
      //   51: istore 10
      //   53: iconst_0
      //   54: istore 11
      //   56: iconst_0
      //   57: istore 4
      //   59: iconst_0
      //   60: istore_2
      //   61: iload 12
      //   63: tableswitch	default:+1028->1091, 1:+794->857, 2:+614->677, 3:+548->611, 4:+482->545, 5:+403->466, 6:+794->857, 7:+614->677, 8:+337->400, 9:+271->334, 10:+190->253, 11:+124->187, 12:+61->124
      //   124: aload 14
      //   126: astore 13
      //   128: aload_0
      //   129: getfield 26	androidx/exifinterface/media/ExifInterface$ExifAttribute:numberOfComponents	I
      //   132: newarray double
      //   134: astore_1
      //   135: aload 14
      //   137: astore 13
      //   139: iload_2
      //   140: aload_0
      //   141: getfield 26	androidx/exifinterface/media/ExifInterface$ExifAttribute:numberOfComponents	I
      //   144: if_icmpge +22 -> 166
      //   147: aload 14
      //   149: astore 13
      //   151: aload_1
      //   152: iload_2
      //   153: aload 14
      //   155: invokevirtual 208	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:readDouble	()D
      //   158: dastore
      //   159: iload_2
      //   160: iconst_1
      //   161: iadd
      //   162: istore_2
      //   163: goto -28 -> 135
      //   166: aload 14
      //   168: invokevirtual 211	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:close	()V
      //   171: aload_1
      //   172: areturn
      //   173: astore 13
      //   175: ldc -43
      //   177: ldc -41
      //   179: aload 13
      //   181: invokestatic 221	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   184: pop
      //   185: aload_1
      //   186: areturn
      //   187: aload 14
      //   189: astore 13
      //   191: aload_0
      //   192: getfield 26	androidx/exifinterface/media/ExifInterface$ExifAttribute:numberOfComponents	I
      //   195: newarray double
      //   197: astore_1
      //   198: iload_3
      //   199: istore_2
      //   200: aload 14
      //   202: astore 13
      //   204: iload_2
      //   205: aload_0
      //   206: getfield 26	androidx/exifinterface/media/ExifInterface$ExifAttribute:numberOfComponents	I
      //   209: if_icmpge +23 -> 232
      //   212: aload 14
      //   214: astore 13
      //   216: aload_1
      //   217: iload_2
      //   218: aload 14
      //   220: invokevirtual 225	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:readFloat	()F
      //   223: f2d
      //   224: dastore
      //   225: iload_2
      //   226: iconst_1
      //   227: iadd
      //   228: istore_2
      //   229: goto -29 -> 200
      //   232: aload 14
      //   234: invokevirtual 211	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:close	()V
      //   237: aload_1
      //   238: areturn
      //   239: astore 13
      //   241: ldc -43
      //   243: ldc -41
      //   245: aload 13
      //   247: invokestatic 221	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   250: pop
      //   251: aload_1
      //   252: areturn
      //   253: aload 14
      //   255: astore 13
      //   257: aload_0
      //   258: getfield 26	androidx/exifinterface/media/ExifInterface$ExifAttribute:numberOfComponents	I
      //   261: anewarray 96	androidx/exifinterface/media/ExifInterface$Rational
      //   264: astore_1
      //   265: iload 6
      //   267: istore_2
      //   268: aload 14
      //   270: astore 13
      //   272: iload_2
      //   273: aload_0
      //   274: getfield 26	androidx/exifinterface/media/ExifInterface$ExifAttribute:numberOfComponents	I
      //   277: if_icmpge +36 -> 313
      //   280: aload 14
      //   282: astore 13
      //   284: aload_1
      //   285: iload_2
      //   286: new 96	androidx/exifinterface/media/ExifInterface$Rational
      //   289: dup
      //   290: aload 14
      //   292: invokevirtual 228	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:readInt	()I
      //   295: i2l
      //   296: aload 14
      //   298: invokevirtual 228	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:readInt	()I
      //   301: i2l
      //   302: invokespecial 231	androidx/exifinterface/media/ExifInterface$Rational:<init>	(JJ)V
      //   305: aastore
      //   306: iload_2
      //   307: iconst_1
      //   308: iadd
      //   309: istore_2
      //   310: goto -42 -> 268
      //   313: aload 14
      //   315: invokevirtual 211	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:close	()V
      //   318: aload_1
      //   319: areturn
      //   320: astore 13
      //   322: ldc -43
      //   324: ldc -41
      //   326: aload 13
      //   328: invokestatic 221	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   331: pop
      //   332: aload_1
      //   333: areturn
      //   334: aload 14
      //   336: astore 13
      //   338: aload_0
      //   339: getfield 26	androidx/exifinterface/media/ExifInterface$ExifAttribute:numberOfComponents	I
      //   342: newarray int
      //   344: astore_1
      //   345: iload 7
      //   347: istore_2
      //   348: aload 14
      //   350: astore 13
      //   352: iload_2
      //   353: aload_0
      //   354: getfield 26	androidx/exifinterface/media/ExifInterface$ExifAttribute:numberOfComponents	I
      //   357: if_icmpge +22 -> 379
      //   360: aload 14
      //   362: astore 13
      //   364: aload_1
      //   365: iload_2
      //   366: aload 14
      //   368: invokevirtual 228	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:readInt	()I
      //   371: iastore
      //   372: iload_2
      //   373: iconst_1
      //   374: iadd
      //   375: istore_2
      //   376: goto -28 -> 348
      //   379: aload 14
      //   381: invokevirtual 211	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:close	()V
      //   384: aload_1
      //   385: areturn
      //   386: astore 13
      //   388: ldc -43
      //   390: ldc -41
      //   392: aload 13
      //   394: invokestatic 221	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   397: pop
      //   398: aload_1
      //   399: areturn
      //   400: aload 14
      //   402: astore 13
      //   404: aload_0
      //   405: getfield 26	androidx/exifinterface/media/ExifInterface$ExifAttribute:numberOfComponents	I
      //   408: newarray int
      //   410: astore_1
      //   411: iload 8
      //   413: istore_2
      //   414: aload 14
      //   416: astore 13
      //   418: iload_2
      //   419: aload_0
      //   420: getfield 26	androidx/exifinterface/media/ExifInterface$ExifAttribute:numberOfComponents	I
      //   423: if_icmpge +22 -> 445
      //   426: aload 14
      //   428: astore 13
      //   430: aload_1
      //   431: iload_2
      //   432: aload 14
      //   434: invokevirtual 235	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:readShort	()S
      //   437: iastore
      //   438: iload_2
      //   439: iconst_1
      //   440: iadd
      //   441: istore_2
      //   442: goto -28 -> 414
      //   445: aload 14
      //   447: invokevirtual 211	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:close	()V
      //   450: aload_1
      //   451: areturn
      //   452: astore 13
      //   454: ldc -43
      //   456: ldc -41
      //   458: aload 13
      //   460: invokestatic 221	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   463: pop
      //   464: aload_1
      //   465: areturn
      //   466: aload 14
      //   468: astore 13
      //   470: aload_0
      //   471: getfield 26	androidx/exifinterface/media/ExifInterface$ExifAttribute:numberOfComponents	I
      //   474: anewarray 96	androidx/exifinterface/media/ExifInterface$Rational
      //   477: astore_1
      //   478: iload 9
      //   480: istore_2
      //   481: aload 14
      //   483: astore 13
      //   485: iload_2
      //   486: aload_0
      //   487: getfield 26	androidx/exifinterface/media/ExifInterface$ExifAttribute:numberOfComponents	I
      //   490: if_icmpge +34 -> 524
      //   493: aload 14
      //   495: astore 13
      //   497: aload_1
      //   498: iload_2
      //   499: new 96	androidx/exifinterface/media/ExifInterface$Rational
      //   502: dup
      //   503: aload 14
      //   505: invokevirtual 239	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:readUnsignedInt	()J
      //   508: aload 14
      //   510: invokevirtual 239	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:readUnsignedInt	()J
      //   513: invokespecial 231	androidx/exifinterface/media/ExifInterface$Rational:<init>	(JJ)V
      //   516: aastore
      //   517: iload_2
      //   518: iconst_1
      //   519: iadd
      //   520: istore_2
      //   521: goto -40 -> 481
      //   524: aload 14
      //   526: invokevirtual 211	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:close	()V
      //   529: aload_1
      //   530: areturn
      //   531: astore 13
      //   533: ldc -43
      //   535: ldc -41
      //   537: aload 13
      //   539: invokestatic 221	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   542: pop
      //   543: aload_1
      //   544: areturn
      //   545: aload 14
      //   547: astore 13
      //   549: aload_0
      //   550: getfield 26	androidx/exifinterface/media/ExifInterface$ExifAttribute:numberOfComponents	I
      //   553: newarray long
      //   555: astore_1
      //   556: iload 10
      //   558: istore_2
      //   559: aload 14
      //   561: astore 13
      //   563: iload_2
      //   564: aload_0
      //   565: getfield 26	androidx/exifinterface/media/ExifInterface$ExifAttribute:numberOfComponents	I
      //   568: if_icmpge +22 -> 590
      //   571: aload 14
      //   573: astore 13
      //   575: aload_1
      //   576: iload_2
      //   577: aload 14
      //   579: invokevirtual 239	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:readUnsignedInt	()J
      //   582: lastore
      //   583: iload_2
      //   584: iconst_1
      //   585: iadd
      //   586: istore_2
      //   587: goto -28 -> 559
      //   590: aload 14
      //   592: invokevirtual 211	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:close	()V
      //   595: aload_1
      //   596: areturn
      //   597: astore 13
      //   599: ldc -43
      //   601: ldc -41
      //   603: aload 13
      //   605: invokestatic 221	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   608: pop
      //   609: aload_1
      //   610: areturn
      //   611: aload 14
      //   613: astore 13
      //   615: aload_0
      //   616: getfield 26	androidx/exifinterface/media/ExifInterface$ExifAttribute:numberOfComponents	I
      //   619: newarray int
      //   621: astore_1
      //   622: iload 11
      //   624: istore_2
      //   625: aload 14
      //   627: astore 13
      //   629: iload_2
      //   630: aload_0
      //   631: getfield 26	androidx/exifinterface/media/ExifInterface$ExifAttribute:numberOfComponents	I
      //   634: if_icmpge +22 -> 656
      //   637: aload 14
      //   639: astore 13
      //   641: aload_1
      //   642: iload_2
      //   643: aload 14
      //   645: invokevirtual 242	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:readUnsignedShort	()I
      //   648: iastore
      //   649: iload_2
      //   650: iconst_1
      //   651: iadd
      //   652: istore_2
      //   653: goto -28 -> 625
      //   656: aload 14
      //   658: invokevirtual 211	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:close	()V
      //   661: aload_1
      //   662: areturn
      //   663: astore 13
      //   665: ldc -43
      //   667: ldc -41
      //   669: aload 13
      //   671: invokestatic 221	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   674: pop
      //   675: aload_1
      //   676: areturn
      //   677: iload 4
      //   679: istore_2
      //   680: aload 14
      //   682: astore 13
      //   684: aload_0
      //   685: getfield 26	androidx/exifinterface/media/ExifInterface$ExifAttribute:numberOfComponents	I
      //   688: getstatic 245	androidx/exifinterface/media/ExifInterface:EXIF_ASCII_PREFIX	[B
      //   691: arraylength
      //   692: if_icmplt +59 -> 751
      //   695: iconst_0
      //   696: istore_2
      //   697: iload 5
      //   699: istore_3
      //   700: aload 14
      //   702: astore 13
      //   704: iload_2
      //   705: getstatic 245	androidx/exifinterface/media/ExifInterface:EXIF_ASCII_PREFIX	[B
      //   708: arraylength
      //   709: if_icmpge +26 -> 735
      //   712: aload 14
      //   714: astore 13
      //   716: aload_0
      //   717: getfield 30	androidx/exifinterface/media/ExifInterface$ExifAttribute:bytes	[B
      //   720: iload_2
      //   721: baload
      //   722: getstatic 245	androidx/exifinterface/media/ExifInterface:EXIF_ASCII_PREFIX	[B
      //   725: iload_2
      //   726: baload
      //   727: if_icmpeq +367 -> 1094
      //   730: iconst_0
      //   731: istore_3
      //   732: goto +3 -> 735
      //   735: iload 4
      //   737: istore_2
      //   738: iload_3
      //   739: ifeq +12 -> 751
      //   742: aload 14
      //   744: astore 13
      //   746: getstatic 245	androidx/exifinterface/media/ExifInterface:EXIF_ASCII_PREFIX	[B
      //   749: arraylength
      //   750: istore_2
      //   751: aload 14
      //   753: astore 13
      //   755: new 108	java/lang/StringBuilder
      //   758: dup
      //   759: invokespecial 109	java/lang/StringBuilder:<init>	()V
      //   762: astore_1
      //   763: aload 14
      //   765: astore 13
      //   767: iload_2
      //   768: aload_0
      //   769: getfield 26	androidx/exifinterface/media/ExifInterface$ExifAttribute:numberOfComponents	I
      //   772: if_icmpge +55 -> 827
      //   775: aload 14
      //   777: astore 13
      //   779: aload_0
      //   780: getfield 30	androidx/exifinterface/media/ExifInterface$ExifAttribute:bytes	[B
      //   783: iload_2
      //   784: baload
      //   785: istore_3
      //   786: iload_3
      //   787: ifne +6 -> 793
      //   790: goto +37 -> 827
      //   793: iload_3
      //   794: bipush 32
      //   796: if_icmplt +17 -> 813
      //   799: aload 14
      //   801: astore 13
      //   803: aload_1
      //   804: iload_3
      //   805: i2c
      //   806: invokevirtual 116	java/lang/StringBuilder:append	(C)Ljava/lang/StringBuilder;
      //   809: pop
      //   810: goto +291 -> 1101
      //   813: aload 14
      //   815: astore 13
      //   817: aload_1
      //   818: bipush 63
      //   820: invokevirtual 116	java/lang/StringBuilder:append	(C)Ljava/lang/StringBuilder;
      //   823: pop
      //   824: goto +277 -> 1101
      //   827: aload 14
      //   829: astore 13
      //   831: aload_1
      //   832: invokevirtual 120	java/lang/StringBuilder:toString	()Ljava/lang/String;
      //   835: astore_1
      //   836: aload 14
      //   838: invokevirtual 211	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:close	()V
      //   841: aload_1
      //   842: areturn
      //   843: astore 13
      //   845: ldc -43
      //   847: ldc -41
      //   849: aload 13
      //   851: invokestatic 221	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   854: pop
      //   855: aload_1
      //   856: areturn
      //   857: aload 14
      //   859: astore 13
      //   861: aload_0
      //   862: getfield 30	androidx/exifinterface/media/ExifInterface$ExifAttribute:bytes	[B
      //   865: arraylength
      //   866: iconst_1
      //   867: if_icmpne +79 -> 946
      //   870: aload 14
      //   872: astore 13
      //   874: aload_0
      //   875: getfield 30	androidx/exifinterface/media/ExifInterface$ExifAttribute:bytes	[B
      //   878: iconst_0
      //   879: baload
      //   880: iflt +66 -> 946
      //   883: aload 14
      //   885: astore 13
      //   887: aload_0
      //   888: getfield 30	androidx/exifinterface/media/ExifInterface$ExifAttribute:bytes	[B
      //   891: iconst_0
      //   892: baload
      //   893: iconst_1
      //   894: if_icmpgt +52 -> 946
      //   897: aload 14
      //   899: astore 13
      //   901: new 38	java/lang/String
      //   904: dup
      //   905: iconst_1
      //   906: newarray char
      //   908: dup
      //   909: iconst_0
      //   910: aload_0
      //   911: getfield 30	androidx/exifinterface/media/ExifInterface$ExifAttribute:bytes	[B
      //   914: iconst_0
      //   915: baload
      //   916: bipush 48
      //   918: iadd
      //   919: i2c
      //   920: castore
      //   921: invokespecial 248	java/lang/String:<init>	([C)V
      //   924: astore_1
      //   925: aload 14
      //   927: invokevirtual 211	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:close	()V
      //   930: aload_1
      //   931: areturn
      //   932: astore 13
      //   934: ldc -43
      //   936: ldc -41
      //   938: aload 13
      //   940: invokestatic 221	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   943: pop
      //   944: aload_1
      //   945: areturn
      //   946: aload 14
      //   948: astore 13
      //   950: new 38	java/lang/String
      //   953: dup
      //   954: aload_0
      //   955: getfield 30	androidx/exifinterface/media/ExifInterface$ExifAttribute:bytes	[B
      //   958: getstatic 52	androidx/exifinterface/media/ExifInterface:ASCII	Ljava/nio/charset/Charset;
      //   961: invokespecial 251	java/lang/String:<init>	([BLjava/nio/charset/Charset;)V
      //   964: astore_1
      //   965: aload 14
      //   967: invokevirtual 211	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:close	()V
      //   970: aload_1
      //   971: areturn
      //   972: astore 13
      //   974: ldc -43
      //   976: ldc -41
      //   978: aload 13
      //   980: invokestatic 221	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   983: pop
      //   984: aload_1
      //   985: areturn
      //   986: aload 14
      //   988: invokevirtual 211	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:close	()V
      //   991: aconst_null
      //   992: areturn
      //   993: astore_1
      //   994: ldc -43
      //   996: ldc -41
      //   998: aload_1
      //   999: invokestatic 221	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   1002: pop
      //   1003: aconst_null
      //   1004: areturn
      //   1005: astore 13
      //   1007: aload 14
      //   1009: astore_1
      //   1010: aload 13
      //   1012: astore 14
      //   1014: goto +14 -> 1028
      //   1017: astore_1
      //   1018: aconst_null
      //   1019: astore 13
      //   1021: goto +43 -> 1064
      //   1024: astore 14
      //   1026: aconst_null
      //   1027: astore_1
      //   1028: aload_1
      //   1029: astore 13
      //   1031: ldc -43
      //   1033: ldc -3
      //   1035: aload 14
      //   1037: invokestatic 256	android/util/Log:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   1040: pop
      //   1041: aload_1
      //   1042: ifnull +19 -> 1061
      //   1045: aload_1
      //   1046: invokevirtual 211	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:close	()V
      //   1049: aconst_null
      //   1050: areturn
      //   1051: astore_1
      //   1052: ldc -43
      //   1054: ldc -41
      //   1056: aload_1
      //   1057: invokestatic 221	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   1060: pop
      //   1061: aconst_null
      //   1062: areturn
      //   1063: astore_1
      //   1064: aload 13
      //   1066: ifnull +23 -> 1089
      //   1069: aload 13
      //   1071: invokevirtual 211	androidx/exifinterface/media/ExifInterface$ByteOrderedDataInputStream:close	()V
      //   1074: goto +15 -> 1089
      //   1077: astore 13
      //   1079: ldc -43
      //   1081: ldc -41
      //   1083: aload 13
      //   1085: invokestatic 221	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
      //   1088: pop
      //   1089: aload_1
      //   1090: athrow
      //   1091: goto -105 -> 986
      //   1094: iload_2
      //   1095: iconst_1
      //   1096: iadd
      //   1097: istore_2
      //   1098: goto -401 -> 697
      //   1101: iload_2
      //   1102: iconst_1
      //   1103: iadd
      //   1104: istore_2
      //   1105: goto -342 -> 763
      // Local variable table:
      //   start	length	slot	name	signature
      //   0	1108	0	this	ExifAttribute
      //   0	1108	1	paramByteOrder	ByteOrder
      //   60	1045	2	i	int
      //   37	768	3	j	int
      //   57	679	4	k	int
      //   34	664	5	m	int
      //   39	227	6	n	int
      //   42	304	7	i1	int
      //   45	367	8	i2	int
      //   48	431	9	i3	int
      //   51	506	10	i4	int
      //   54	569	11	i5	int
      //   31	31	12	i6	int
      //   15	135	13	localObject1	Object
      //   173	7	13	localIOException1	IOException
      //   189	26	13	localObject2	Object
      //   239	7	13	localIOException2	IOException
      //   255	28	13	localObject3	Object
      //   320	7	13	localIOException3	IOException
      //   336	27	13	localObject4	Object
      //   386	7	13	localIOException4	IOException
      //   402	27	13	localObject5	Object
      //   452	7	13	localIOException5	IOException
      //   468	28	13	localObject6	Object
      //   531	7	13	localIOException6	IOException
      //   547	27	13	localObject7	Object
      //   597	7	13	localIOException7	IOException
      //   613	27	13	localObject8	Object
      //   663	7	13	localIOException8	IOException
      //   682	148	13	localObject9	Object
      //   843	7	13	localIOException9	IOException
      //   859	41	13	localObject10	Object
      //   932	7	13	localIOException10	IOException
      //   948	1	13	localObject11	Object
      //   972	7	13	localIOException11	IOException
      //   1005	6	13	localIOException12	IOException
      //   1019	51	13	localByteOrder	ByteOrder
      //   1077	7	13	localIOException13	IOException
      //   11	1002	14	localObject12	Object
      //   1024	12	14	localIOException14	IOException
      // Exception table:
      //   from	to	target	type
      //   166	171	173	java/io/IOException
      //   232	237	239	java/io/IOException
      //   313	318	320	java/io/IOException
      //   379	384	386	java/io/IOException
      //   445	450	452	java/io/IOException
      //   524	529	531	java/io/IOException
      //   590	595	597	java/io/IOException
      //   656	661	663	java/io/IOException
      //   836	841	843	java/io/IOException
      //   925	930	932	java/io/IOException
      //   965	970	972	java/io/IOException
      //   986	991	993	java/io/IOException
      //   17	23	1005	java/io/IOException
      //   27	33	1005	java/io/IOException
      //   128	135	1005	java/io/IOException
      //   139	147	1005	java/io/IOException
      //   151	159	1005	java/io/IOException
      //   191	198	1005	java/io/IOException
      //   204	212	1005	java/io/IOException
      //   216	225	1005	java/io/IOException
      //   257	265	1005	java/io/IOException
      //   272	280	1005	java/io/IOException
      //   284	306	1005	java/io/IOException
      //   338	345	1005	java/io/IOException
      //   352	360	1005	java/io/IOException
      //   364	372	1005	java/io/IOException
      //   404	411	1005	java/io/IOException
      //   418	426	1005	java/io/IOException
      //   430	438	1005	java/io/IOException
      //   470	478	1005	java/io/IOException
      //   485	493	1005	java/io/IOException
      //   497	517	1005	java/io/IOException
      //   549	556	1005	java/io/IOException
      //   563	571	1005	java/io/IOException
      //   575	583	1005	java/io/IOException
      //   615	622	1005	java/io/IOException
      //   629	637	1005	java/io/IOException
      //   641	649	1005	java/io/IOException
      //   684	695	1005	java/io/IOException
      //   704	712	1005	java/io/IOException
      //   716	730	1005	java/io/IOException
      //   746	751	1005	java/io/IOException
      //   755	763	1005	java/io/IOException
      //   767	775	1005	java/io/IOException
      //   779	786	1005	java/io/IOException
      //   803	810	1005	java/io/IOException
      //   817	824	1005	java/io/IOException
      //   831	836	1005	java/io/IOException
      //   861	870	1005	java/io/IOException
      //   874	883	1005	java/io/IOException
      //   887	897	1005	java/io/IOException
      //   901	925	1005	java/io/IOException
      //   950	965	1005	java/io/IOException
      //   0	13	1017	finally
      //   0	13	1024	java/io/IOException
      //   1045	1049	1051	java/io/IOException
      //   17	23	1063	finally
      //   27	33	1063	finally
      //   128	135	1063	finally
      //   139	147	1063	finally
      //   151	159	1063	finally
      //   191	198	1063	finally
      //   204	212	1063	finally
      //   216	225	1063	finally
      //   257	265	1063	finally
      //   272	280	1063	finally
      //   284	306	1063	finally
      //   338	345	1063	finally
      //   352	360	1063	finally
      //   364	372	1063	finally
      //   404	411	1063	finally
      //   418	426	1063	finally
      //   430	438	1063	finally
      //   470	478	1063	finally
      //   485	493	1063	finally
      //   497	517	1063	finally
      //   549	556	1063	finally
      //   563	571	1063	finally
      //   575	583	1063	finally
      //   615	622	1063	finally
      //   629	637	1063	finally
      //   641	649	1063	finally
      //   684	695	1063	finally
      //   704	712	1063	finally
      //   716	730	1063	finally
      //   746	751	1063	finally
      //   755	763	1063	finally
      //   767	775	1063	finally
      //   779	786	1063	finally
      //   803	810	1063	finally
      //   817	824	1063	finally
      //   831	836	1063	finally
      //   861	870	1063	finally
      //   874	883	1063	finally
      //   887	897	1063	finally
      //   901	925	1063	finally
      //   950	965	1063	finally
      //   1031	1041	1063	finally
      //   1069	1074	1077	java/io/IOException
    }
    
    public int size()
    {
      return ExifInterface.IFD_FORMAT_BYTES_PER_FORMAT[format] * numberOfComponents;
    }
    
    public String toString()
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("(");
      localStringBuilder.append(ExifInterface.IFD_FORMAT_NAMES[format]);
      localStringBuilder.append(", data length:");
      localStringBuilder.append(bytes.length);
      localStringBuilder.append(")");
      return localStringBuilder.toString();
    }
  }
  
  static class ExifTag
  {
    public final String name;
    public final int number;
    public final int primaryFormat;
    public final int secondaryFormat;
    
    ExifTag(String paramString, int paramInt1, int paramInt2)
    {
      name = paramString;
      number = paramInt1;
      primaryFormat = paramInt2;
      secondaryFormat = -1;
    }
    
    ExifTag(String paramString, int paramInt1, int paramInt2, int paramInt3)
    {
      name = paramString;
      number = paramInt1;
      primaryFormat = paramInt2;
      secondaryFormat = paramInt3;
    }
    
    boolean isFormatCompatible(int paramInt)
    {
      if (primaryFormat != 7)
      {
        if (paramInt == 7) {
          return true;
        }
        if (primaryFormat != paramInt)
        {
          if (secondaryFormat == paramInt) {
            return true;
          }
          if (((primaryFormat == 4) || (secondaryFormat == 4)) && (paramInt == 3)) {
            return true;
          }
          if (((primaryFormat == 9) || (secondaryFormat == 9)) && (paramInt == 8)) {
            return true;
          }
          return ((primaryFormat == 12) || (secondaryFormat == 12)) && (paramInt == 11);
        }
        return true;
      }
      return true;
    }
  }
  
  @Retention(RetentionPolicy.SOURCE)
  @RestrictTo({androidx.annotation.RestrictTo.Scope.LIBRARY})
  public static @interface IfdType {}
  
  private static class Rational
  {
    public final long denominator;
    public final long numerator;
    
    Rational(double paramDouble)
    {
      this((paramDouble * 10000.0D), 10000L);
    }
    
    Rational(long paramLong1, long paramLong2)
    {
      if (paramLong2 == 0L)
      {
        numerator = 0L;
        denominator = 1L;
        return;
      }
      numerator = paramLong1;
      denominator = paramLong2;
    }
    
    public double calculate()
    {
      return numerator / denominator;
    }
    
    public String toString()
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(numerator);
      localStringBuilder.append("/");
      localStringBuilder.append(denominator);
      return localStringBuilder.toString();
    }
  }
}
