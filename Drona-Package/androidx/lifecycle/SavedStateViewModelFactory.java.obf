package androidx.lifecycle;

import android.annotation.SuppressLint;
import android.app.Application;
import android.os.Bundle;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.savedstate.SavedStateRegistry;
import androidx.savedstate.SavedStateRegistryOwner;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.Arrays;

public final class SavedStateViewModelFactory
  extends ViewModelProvider.KeyedFactory
{
  private static final Class<?>[] ANDROID_VIEWMODEL_SIGNATURE = { Application.class, SavedStateHandle.class };
  private static final Class<?>[] VIEWMODEL_SIGNATURE = { SavedStateHandle.class };
  private final Application mApplication;
  private final Bundle mDefaultArgs;
  private final ViewModelProvider.AndroidViewModelFactory mFactory;
  private final Lifecycle mLifecycle;
  private final SavedStateRegistry mSavedStateRegistry;
  
  public SavedStateViewModelFactory(@NonNull Application paramApplication, @NonNull SavedStateRegistryOwner paramSavedStateRegistryOwner)
  {
    this(paramApplication, paramSavedStateRegistryOwner, null);
  }
  
  @SuppressLint({"LambdaLast"})
  public SavedStateViewModelFactory(@NonNull Application paramApplication, @NonNull SavedStateRegistryOwner paramSavedStateRegistryOwner, @Nullable Bundle paramBundle)
  {
    mSavedStateRegistry = paramSavedStateRegistryOwner.getSavedStateRegistry();
    mLifecycle = paramSavedStateRegistryOwner.getLifecycle();
    mDefaultArgs = paramBundle;
    mApplication = paramApplication;
    mFactory = ViewModelProvider.AndroidViewModelFactory.getInstance(paramApplication);
  }
  
  private static <T> Constructor<T> findMatchingConstructor(Class<T> paramClass, Class<?>[] paramArrayOfClass)
  {
    paramClass = paramClass.getConstructors();
    int j = paramClass.length;
    int i = 0;
    while (i < j)
    {
      Constructor<T> localConstructor = paramClass[i];
      if (Arrays.equals(paramArrayOfClass, localConstructor.getParameterTypes())) {
        return localConstructor;
      }
      i += 1;
    }
    return null;
  }
  
  @NonNull
  public <T extends ViewModel> T create(@NonNull Class<T> paramClass)
  {
    String str = paramClass.getCanonicalName();
    if (str != null) {
      return create(str, paramClass);
    }
    throw new IllegalArgumentException("Local and anonymous classes can not be ViewModels");
  }
  
  @NonNull
  public <T extends ViewModel> T create(@NonNull String paramString, @NonNull Class<T> paramClass)
  {
    boolean bool = AndroidViewModel.class.isAssignableFrom(paramClass);
    Constructor localConstructor;
    if (bool) {
      localConstructor = findMatchingConstructor(paramClass, ANDROID_VIEWMODEL_SIGNATURE);
    } else {
      localConstructor = findMatchingConstructor(paramClass, VIEWMODEL_SIGNATURE);
    }
    if (localConstructor == null) {
      return mFactory.create(paramClass);
    }
    SavedStateHandleController localSavedStateHandleController = SavedStateHandleController.create(mSavedStateRegistry, mLifecycle, paramString, mDefaultArgs);
    if (bool) {}
    try
    {
      paramString = (ViewModel)localConstructor.newInstance(new Object[] { mApplication, localSavedStateHandleController.getHandle() });
      break label120;
      paramString = (ViewModel)localConstructor.newInstance(new Object[] { localSavedStateHandleController.getHandle() });
      label120:
      paramString.setTagIfAbsent("androidx.lifecycle.savedstate.vm.tag", localSavedStateHandleController);
      return paramString;
    }
    catch (InvocationTargetException localInvocationTargetException)
    {
      for (;;) {}
    }
    catch (InstantiationException localInstantiationException)
    {
      for (;;) {}
    }
    catch (IllegalAccessException localIllegalAccessException)
    {
      for (;;) {}
    }
    paramString = new StringBuilder();
    paramString.append("An exception happened in constructor of ");
    paramString.append(paramClass);
    throw new RuntimeException(paramString.toString(), localConstructor.getCause());
    paramString = new StringBuilder();
    paramString.append("A ");
    paramString.append(paramClass);
    paramString.append(" cannot be instantiated.");
    throw new RuntimeException(paramString.toString(), localConstructor);
    paramString = new StringBuilder();
    paramString.append("Failed to access ");
    paramString.append(paramClass);
    throw new RuntimeException(paramString.toString(), localConstructor);
  }
  
  void onRequery(@NonNull ViewModel paramViewModel)
  {
    SavedStateHandleController.attachHandleIfNeeded(paramViewModel, mSavedStateRegistry, mLifecycle);
  }
}
